<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>git 快捷指令</title>
      <link href="/posts/c92b4e2f.html"/>
      <url>/posts/c92b4e2f.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">g - git</span><br><span class="line">gst - git status</span><br><span class="line">gl - git pull</span><br><span class="line">gup - git pull --rebase</span><br><span class="line">gp - git push</span><br><span class="line">gd - git diff</span><br><span class="line">gdc - git diff --cached</span><br><span class="line">gdv - git diff -w <span class="string">"<span class="variable">$@</span>"</span> | view</span><br><span class="line">gc - git commit -v</span><br><span class="line">gc! - git commit -v --amend</span><br><span class="line">gca - git commit -v -a</span><br><span class="line">gca! - git commit -v -a --amend</span><br><span class="line">gcmsg - git commit -m</span><br><span class="line">gco - git checkout</span><br><span class="line">gcm - git checkout master</span><br><span class="line">gr - git remote</span><br><span class="line">grv - git remote -v</span><br><span class="line">grmv - git remote rename</span><br><span class="line">grrm - git remote remove</span><br><span class="line">gsetr - git remote <span class="built_in">set</span>-url</span><br><span class="line">grup - git remote update</span><br><span class="line">grbi - git rebase -i</span><br><span class="line">grbc - git rebase --<span class="built_in">continue</span></span><br><span class="line">grba - git rebase --abort</span><br><span class="line">gb - git branch</span><br><span class="line">gba - git branch -a</span><br><span class="line">gcount - git shortlog -sn</span><br><span class="line">gcl - git config --list</span><br><span class="line">gcp - git cherry-pick</span><br><span class="line">glg - git <span class="built_in">log</span> --<span class="built_in">stat</span> --max-count=10</span><br><span class="line">glgg - git <span class="built_in">log</span> --graph --max-count=10</span><br><span class="line">glgga - git <span class="built_in">log</span> --graph --decorate --all</span><br><span class="line">glo - git <span class="built_in">log</span> --oneline --decorate --color</span><br><span class="line">glog - git <span class="built_in">log</span> --oneline --decorate --color --graph</span><br><span class="line">gss - git status -s</span><br><span class="line">ga - git add</span><br><span class="line">gm - git merge</span><br><span class="line">grh - git reset HEAD</span><br><span class="line">grhh - git reset HEAD --hard</span><br><span class="line">gclean - git reset --hard &amp;&amp; git clean -dfx</span><br><span class="line">gwc - git whatchanged -p --abbrev-commit --pretty=medium</span><br><span class="line">gsts - git stash show --text</span><br><span class="line">gsta - git stash</span><br><span class="line">gstp - git stash pop</span><br><span class="line">gstd - git stash drop</span><br><span class="line">ggpull - git pull origin $(current_branch)</span><br><span class="line">ggpur - git pull --rebase origin $(current_branch)</span><br><span class="line">ggpush - git push origin $(current_branch)</span><br><span class="line">ggpnp - git pull origin $(current_branch) &amp;&amp; git push origin $(current_branch)</span><br><span class="line">glp - _git_log_prettily</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>celery项目中的应用</title>
      <link href="/posts/7208b3f4.html"/>
      <url>/posts/7208b3f4.html</url>
      
        <content type="html"><![CDATA[<h2 id="celery项目结构">celery项目结构</h2><p>因为celery是一个单独的应用. 所以他可以在任何地方. 你可以把celery当作一个app 放进你的项目里.</p><p>我的目录结构是这样的</p><ul><li>IMCenter<ul><li><strong>init</strong>.py</li><li><a href="http://celery.py" target="_blank" rel="noopener">celery.py</a></li><li>celery_cfg.py</li><li><a href="http://tasks.py" target="_blank" rel="noopener">tasks.py</a></li></ul></li></ul><p>代码就是参考<a href="https://www.celerycn.io/" target="_blank" rel="noopener">celery官方教程</a>写的了.</p><h3 id="celery-py"><a href="http://celery.py" target="_blank" rel="noopener">celery.py</a></h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> absolute_import, unicode_literals</span><br><span class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> Celery</span><br><span class="line"></span><br><span class="line">__author__ = <span class="string">"LiuNan"</span></span><br><span class="line">__date__ = <span class="string">"2020/12/16 4:31 下午"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .celery_cfg <span class="keyword">import</span> backend, brokers</span><br><span class="line"></span><br><span class="line">celery_app = Celery(<span class="string">'IMCenter'</span>,</span><br><span class="line">                    broker=brokers,</span><br><span class="line">                    backend=backend,</span><br><span class="line">                    include=[<span class="string">'IMCenter.tasks'</span>])</span><br><span class="line"></span><br><span class="line">celery_app.conf.update(</span><br><span class="line">    result_expires=<span class="number">3600</span>,</span><br><span class="line">)</span><br><span class="line">celery_app.conf.timezone = <span class="string">'Asia/Shanghai'</span></span><br></pre></td></tr></tbody></table></figure><h3 id="tasks-py"><a href="http://tasks.py" target="_blank" rel="noopener">tasks.py</a></h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> absolute_import, unicode_literals</span><br><span class="line"></span><br><span class="line">__author__ = <span class="string">"LiuNan"</span></span><br><span class="line">__date__ = <span class="string">"2020/12/16 4:31 下午"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jpush</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .celery <span class="keyword">import</span> celery_app</span><br><span class="line"></span><br><span class="line">_logger = logging.getLogger(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@celery_app.task</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">myPush</span><span class="params">(a,b,c,d)</span>:</span></span><br><span class="line">    <span class="comment"># 生产环境推送</span></span><br><span class="line">    print(<span class="string">'发送短信中'</span>)</span><br></pre></td></tr></tbody></table></figure><h3 id="celery-cfg-py">celery_cfg.py</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line">__author__ = <span class="string">"LiuNan"</span></span><br><span class="line">__date__ = <span class="string">"2020/12/16 4:31 下午"</span></span><br><span class="line"></span><br><span class="line">brokers = <span class="string">"redis://:password@localhost:6379/1"</span></span><br><span class="line">backend = <span class="string">"redis://:password@localhost:6379/2"</span></span><br></pre></td></tr></tbody></table></figure><h2 id="celery-的启动">celery 的启动</h2><p>切换到celery所在项目的目录<br><img src="/img/loading.gif" class="lazyload" data-src="https://img-blog.csdnimg.cn/202012171822026.png"  alt="在这里插入图片描述"></p><ul><li><p>前台启动命令<br><code>celery -A IMCenter worker -l info</code><br>启动成功的界面 如下 :<br><img src="/img/loading.gif" class="lazyload" data-src="https://img-blog.csdnimg.cn/20201217182408348.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5OTEwMw==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"></p></li><li><p>后台启动命令<br>我在这里使用的是supervisor后期启动服务的. <a href="https://blog.csdn.net/weixin_43199103/article/details/111319101" target="_blank" rel="noopener">传送门</a></p></li></ul><p>完事儿了, 就这么简单. 生产者调用task就行了.</p><h2 id="celery任务的调用">celery任务的调用</h2><p>这样</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> openerp.IMCenter.celery <span class="keyword">import</span> </span><br><span class="line">task_args = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">celery_appcelery_app.send_task(<span class="string">'IMCenter.tasks.myPush'</span>,args=task_args)</span><br></pre></td></tr></tbody></table></figure><h3 id="delay">delay</h3><blockquote><p>apply_async方法的别名，但接受的参数较为简单</p></blockquote><p><code>task.delay()</code></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myPush.delay(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br></pre></td></tr></tbody></table></figure><h3 id="apply-async">apply_async</h3><blockquote><p>常用</p></blockquote><p><code>task.apply_async(args=[arg1,args],kwargs={key:value})</code><br>可以接受复杂的参数</p><ul><li>task_id：为任务分配唯一id，默认是uuid</li><li>countdown：设置该任务等待一段时间在执行，单位为秒</li><li>eta：定义任务的开始时间，eta=time.time()+5，单位为秒，是UTC时间，设置成国内时间也没有用</li><li>expires：设置任务过期时间，任务在过期时间后还没有执行则被丢弃，单位为秒</li><li>retry：如果任务失败后，是否重试，默认为True</li><li>shadow：重新指定任务的名字，覆盖其在日志中使用的任务名称</li><li>retry_policy:{} 重试策略，<ul><li>max_retries:最大重试次数，默认为3次。</li><li>interval_start:重试等待的时间间隔，默认为0。</li><li>interval_step:每次重试让重试间隔增加的秒数，默认为0.2秒。</li><li>interval_max:重试间隔最大的秒数，既通过interval_step增大到多少秒之后，就不在增加了，默认为0.2秒。</li></ul></li><li>routing_key:自定义路由键</li><li>queue：指定发送到哪个队列</li><li>exchange：指定发送到哪个交换机</li><li>priority：任务队列的优先级，0到255之间，对于rabbitmq来说0是最高优先级</li><li>headers：为任务添加额外的消息</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 任务my_task将会被发送到my_queue队列中，并且在发送10秒之后执行。</span></span><br><span class="line">myPush.apply_async((<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>), queue=<span class="string">'my_queue'</span>, countdown=<span class="number">10</span>)</span><br></pre></td></tr></tbody></table></figure><h3 id="send-task">send_task</h3><blockquote><p>不建议用，因为不会校验是否存在这个方法，直接就发送成功里，celery执行就会报错</p></blockquote><p><code>app.send_task(task1.add,args=[1,2])</code></p><ul><li>name：可以显示指定任务的名字，默认是本函数的名字，也就是上面的 shadow</li><li>bind：一个bool值，设置是否绑定一个task的实例，如果绑定，task实例会作为参数传递到任务方法中（第一个参数为self），可以访问task实例的所有属性。</li><li>base：定义任务的基类，可以以此来定义回调函数，默认是Task类，我们也可以定义自己的Task类</li><li>default_retry_delay：设置该任务重试的延迟时间，当任务执行失败后，会自动重试，单位是秒，默认为3分钟</li></ul><h2 id="Flower-Celery-监控工具的使用">Flower Celery 监控工具的使用</h2><ol><li>安装<br><code>$ pip install flower</code></li><li>运行<br><code>flower --port=5555</code><br>或者<br><code>$ celery flower --address=127.0.0.1 --port=5555</code></li><li>打开 <a href="http://localhost:5555" target="_blank" rel="noopener">http://localhost:5555</a>:</li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>celery利用supervisor后台运行方案</title>
      <link href="/posts/4636e0db.html"/>
      <url>/posts/4636e0db.html</url>
      
        <content type="html"><![CDATA[<h2 id="安装">安装</h2><p><code>pip install supervisor</code></p><h2 id="测试是否成功">测试是否成功</h2><p><code>echo_supervisord_conf</code></p><h2 id="创建配置文件">创建配置文件</h2><p><code>mkdir -m 755 -p /etc/supervisor/</code><br><code>cd /etc/supervisor/</code><br><code>mkdir -m 755 conf.d</code><br><code>echo_supervisord_conf &gt; /etc/supervisor/supervisord.conf</code><br>目录结构如下:<br><img src="/img/loading.gif" class="lazyload" data-src="https://img-blog.csdnimg.cn/20201217165005303.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5OTEwMw==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"></p><p>在conf.d目录下创建配置文件<code>celeryd.ini</code><br>内容如下:</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[program:celeryd]</span><br><span class="line">directory=/home/odoo/odoo_src/openerp</span><br><span class="line"><span class="built_in">command</span>=/usr/bin/celery -A IMCenter.tasks worker --loglevel=INFO --concurrency=15</span><br><span class="line">stdout_logfile=/var/<span class="built_in">log</span>/supervisor/celeryd.log</span><br><span class="line">stderr_logfile=/var/<span class="built_in">log</span>/supervisor/celeryd.log</span><br><span class="line">autostart=<span class="literal">true</span></span><br><span class="line">autorestart=<span class="literal">true</span></span><br><span class="line">startsecs=10</span><br><span class="line">[supervisord]</span><br></pre></td></tr></tbody></table></figure><h2 id="添加配置文件到主配置文件">添加配置文件到主配置文件</h2><p><code>vim /etc/supervisor/supervisord.conf </code><br>文件最后面 include注释打开</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[include]</span><br><span class="line">files = /etc/supervisor/conf.d/*.ini /etc/supervisor/example.ini  </span><br><span class="line">; 多个路径用空格隔开就可以了</span><br></pre></td></tr></tbody></table></figure><h2 id="启动supervisor">启动supervisor</h2><blockquote><p>supervisor有两个命令，supervisord和supervisorctl，<br>通过supervisord管理启动和配置supervisor本身，<br>通过supervisorctl来管理使用supervisor启动和管理的自身的一些应用，<a href="http://xn--celeryd-2d5kx00f9rtln5ca8145fvyf.py" target="_blank" rel="noopener">如我们的这里的celeryd.py</a></p></blockquote><ul><li><p>启动supervisor<br><code>   supervisord -c /etc/supervisor/supervisord.conf </code></p></li><li><p>关闭supervisor<br><code>supervisorctl shutdown  </code><br>如果先建的celeryd.ini(控制文件)，在使用启动命令后这些经过配置的程序也会启动</p></li><li><p>查看supervisor 启动的服务状态<br><code>supervisorctl status</code><br><img src="/img/loading.gif" class="lazyload" data-src="https://img-blog.csdnimg.cn/20201217165531791.png"  alt="在这里插入图片描述"></p></li><li><p>启动程序 celeryd.ini<br><code>supervisorctl start program_name  </code><br>这里的program的name是配置文件ini中的[program:name]，所以这里的program_name是<code>celeryd</code><br><img src="/img/loading.gif" class="lazyload" data-src="https://img-blog.csdnimg.cn/20201217165634463.png"  alt="在这里插入图片描述"></p></li><li><p>关闭程序 celeryd.ini<br><code>supervisorctl stop program_name  </code><br><img src="/img/loading.gif" class="lazyload" data-src="https://img-blog.csdnimg.cn/20201217165606764.png"  alt="在这里插入图片描述"></p></li><li><p>刷新配置文件 如果启动后，修改了ini文件，可以通过reload命令来刷新<br><code> supervisorctl reload </code></p></li><li><p>查看supervisor的运行状态<br><code>  ps -efH|grep supervisor</code></p></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库索引</title>
      <link href="/posts/1442515a.html"/>
      <url>/posts/1442515a.html</url>
      
        <content type="html"><![CDATA[<h2 id="普通索引">普通索引</h2><ul><li>创建</li></ul><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span> indexname <span class="keyword">ON</span> tablename(rowname));</span><br></pre></td></tr></tbody></table></figure><ul><li>修改</li></ul><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> tablename <span class="keyword">ADD</span> <span class="keyword">INDEX</span> indexname <span class="keyword">ON</span> (rowname);</span><br></pre></td></tr></tbody></table></figure><ul><li>删除</li></ul><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">INDEX</span> indexname <span class="keyword">ON</span> tablename;</span><br></pre></td></tr></tbody></table></figure><h2 id="唯一索引">唯一索引</h2><p>索引列的值必须唯一 , 但允许有空值 .<br>如果是 <code>组合索引</code> , 则 列值的 组合 必须唯一.</p><ul><li>创建</li></ul><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> NIQUE <span class="keyword">INDEX</span> indexname <span class="keyword">ON</span> tablename(rowname));</span><br></pre></td></tr></tbody></table></figure><ul><li>修改</li></ul><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> tablename <span class="keyword">ADD</span> NIQUE <span class="keyword">INDEX</span> indexname <span class="keyword">ON</span> (rowname);</span><br></pre></td></tr></tbody></table></figure><h2 id="主键索引">主键索引</h2><p>特殊的唯一索引. 一般是id</p><h2 id="联合索引">联合索引</h2><p>由多个字段组成的索引, 叫做 <code>组合索引</code> .<br>如果分别在 a b c 列 建立单列索引. 效率是远远低于 组合索引的.<br><strong>组合索引(a,b,c)都有哪些排列组合?</strong></p><p>组合索引  遵循<code>“最左前缀”</code>原则。简单的理解就是只从最左面的开始组合。并不是只要包含这三列的查询都会用到该组合索引.</p><blockquote><p>1、组合索引字段<code>无论顺序如何改变</code>都会用到索引，前提是<code>所有字段都在where条件</code>上。<br>2、如果想要使用一个或者两个字段在where条件上，<code>必须有组合索引里的第一个字段</code>，但是与顺序无关，例如a,c或c,a，这种场景是可以命中索引的。但是，<code>b,c或c,b这种是不会命中索引</code>的。<br>3、如果组合索引存在<code>范围查询</code>，则组合索引<code>可能会命中索引</code>，这个跟B+Tree的叶子节点中存储的数据是否在当前的叶子节点中，即InnoDB存储引擎的最小存储单元——页，InnoDB页的大小默认是16k，可以通过参数查看页的默认大小：show global status like ‘innodb_page_size’;如果想要修改InnoDB页的大小，需要通过修改mysql源码才可以修改，找到源码文件(storage/innobase/include/univ.i)，找到参数:UNIV_PAGE_SIZE，该参数必须是2的n次方，例如4k、8k、16k、32k、64k等等。<br>4、<code>order by 只能使用a</code>，才能用到索引。</p></blockquote><h2 id="设计索引注意事项">设计索引注意事项</h2><ul><li>索引不会包含有NULL值的列<br>只要列中包含有NULL值都将不会被包含在索引中，复合索引中只要有一列含有 NULL值，那么这一列对于此复合索引就是无效的。所以我们在数据库设计时不要让字段的默认值为NULL。</li><li>使用短索引<br>对串列进行索引，如果可能应该指定一个前缀长度。例如，如果有一个CHAR(255)的列，如果在前10个或20个字符内，多数值是惟一的，那么就不要对整个列进行索引。短索引不仅可以提高查询速度而且可以节省磁盘空间和I/O操作</li><li>索引列排序<br>MySQL查询只使用一个索引，因此<code>如果 where子句中已经使用了索引的话，那么order by中的列是不会使用索引的</code>。因此数据库默认排序可以符合要求的情况下不要使用排序操作;尽量不要包含多个列的排序，如果需要<code>最好给这些列创建复合索引</code>。</li><li>like 语句操作<br>一般情况下不鼓励使用like操作，如果非使用不可，如何使用也是一个问题。like “%aaa%” 不会使用索引而like “aaa%”可以使用索引。</li><li>不要在列上进行运算   <figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">users</span> <span class="keyword">where</span> <span class="keyword">YEAR</span>(adddate)&lt;<span class="number">2007</span>;</span><br></pre></td></tr></tbody></table></figure>将在每个行上进行运算，这将导致索引失效而进行全表扫描，因此我们可以改成   <figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">users</span> <span class="keyword">where</span> adddate&lt;‘<span class="number">2007</span><span class="number">-01</span><span class="number">-01</span>’;</span><br></pre></td></tr></tbody></table></figure></li><li>不要使用NOT IN和&lt;&gt;操作</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> 索引 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python安装mysqlclient报错</title>
      <link href="/posts/9dffa995.html"/>
      <url>/posts/9dffa995.html</url>
      
        <content type="html"><![CDATA[<h2 id="OSError-mysql-config-not-found错误">OSError: mysql_config not found错误</h2><p><img src="/img/loading.gif" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200916124617872.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5OTEwMw==,size_16,color_FFFFFF,t_70#pic_center"  alt="在这里插入图片描述"></p><p>输入 :</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PATH="$PATH":/usr/local/mysql/bin/</span><br><span class="line"></span><br><span class="line">mysql_config</span><br></pre></td></tr></tbody></table></figure><p>之后再pip install 就可以了.</p><p><img src="/img/loading.gif" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200916124557642.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5OTEwMw==,size_16,color_FFFFFF,t_70#pic_center"  alt="在这里插入图片描述"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>35. 搜索插入位置</title>
      <link href="/posts/a8a97330.html"/>
      <url>/posts/a8a97330.html</url>
      
        <content type="html"><![CDATA[<p>给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。</p><p>你可以假设数组中无重复元素。</p><p>示例 1:</p><blockquote><p>输入: [1,3,5,6], 5<br>输出: 2</p></blockquote><p>示例 2:</p><blockquote><p>输入: [1,3,5,6], 2<br>输出: 1</p></blockquote><p>示例 3:</p><blockquote><p>输入: [1,3,5,6], 7<br>输出: 4</p></blockquote><p>示例 4:</p><blockquote><p>输入: [1,3,5,6], 0<br>输出: 0</p></blockquote><h2 id="题解">题解</h2><p><img src="/img/loading.gif" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200821172812405.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5OTEwMw==,size_16,color_FFFFFF,t_70#pic_center"  alt="在这里插入图片描述"><br><img src="/img/loading.gif" class="lazyload" data-src="https://img-blog.csdnimg.cn/202008211728259.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5OTEwMw==,size_16,color_FFFFFF,t_70#pic_center"  alt="在这里插入图片描述"><br><img src="/img/loading.gif" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200821172842630.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5OTEwMw==,size_16,color_FFFFFF,t_70#pic_center"  alt="在这里插入图片描述"><br><img src="/img/loading.gif" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200821172913516.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5OTEwMw==,size_16,color_FFFFFF,t_70#pic_center"  alt="在这里插入图片描述"><br><img src="/img/loading.gif" class="lazyload" data-src="https://img-blog.csdnimg.cn/2020082117292432.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5OTEwMw==,size_16,color_FFFFFF,t_70#pic_center"  alt="在这里插入图片描述"><br><img src="/img/loading.gif" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200821172935782.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5OTEwMw==,size_16,color_FFFFFF,t_70#pic_center"  alt="在这里插入图片描述"><br><img src="/img/loading.gif" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200821172942336.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5OTEwMw==,size_16,color_FFFFFF,t_70#pic_center"  alt="在这里插入图片描述"></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">searchInsert</span><span class="params">(self, nums: List[int], target: int)</span> -&gt; int:</span></span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        j = len(nums) - <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> i &lt;= j:</span><br><span class="line">            mid = (i + j) // <span class="number">2</span></span><br><span class="line">            <span class="keyword">if</span> target &gt; nums[mid]:</span><br><span class="line">                i = mid + <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> target &lt; nums[mid]:</span><br><span class="line">                j = mid - <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> mid</span><br><span class="line">        <span class="keyword">return</span> i</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
          <category> array </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> array </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>674. 最长连续递增序列</title>
      <link href="/posts/c2afb9c.html"/>
      <url>/posts/c2afb9c.html</url>
      
        <content type="html"><![CDATA[<p>给定一个未经排序的整数数组，找到最长且连续的的递增序列，并返回该序列的长度。</p><p>示例 1:</p><blockquote><p>输入: [1,3,5,4,7]<br>输出: 3<br>解释: 最长连续递增序列是 [1,3,5], 长度为3。<br>尽管 [1,3,5,7] 也是升序的子序列, 但它不是连续的，因为5和7在原数组里被4隔开。</p></blockquote><p>示例 2:</p><blockquote><p>输入: [2,2,2,2,2]<br>输出: 1<br>解释: 最长连续递增序列是 [2], 长度为1。</p></blockquote><p>注意：数组长度不会超过10000。</p><h2 id="题解">题解</h2><p>遍历，用一个变量记录递增的最大值。再用一个变量实时记录递增的情况。<br><img src="/img/loading.gif" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200821163942414.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5OTEwMw==,size_16,color_FFFFFF,t_70#pic_center"  alt="在这里插入图片描述"><br><img src="/img/loading.gif" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200821164006641.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5OTEwMw==,size_16,color_FFFFFF,t_70#pic_center"  alt="在这里插入图片描述"><br><img src="/img/loading.gif" class="lazyload" data-src="https://img-blog.csdnimg.cn/2020082116404862.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5OTEwMw==,size_16,color_FFFFFF,t_70#pic_center"  alt="在这里插入图片描述"></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findLengthOfLCIS</span><span class="params">(self, nums: List[int])</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">if</span> len(nums) &lt;= <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> len(nums)</span><br><span class="line">        count = <span class="number">1</span></span><br><span class="line">        ans = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums) - <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> nums[i+<span class="number">1</span>] &gt; nums[i]:</span><br><span class="line">                count += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                count = <span class="number">1</span></span><br><span class="line">            ans = max(ans,count)</span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
          <category> array </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> array </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>剑指offer53 - II. 0～n-1 中缺失的数字</title>
      <link href="/posts/a8d849f.html"/>
      <url>/posts/a8d849f.html</url>
      
        <content type="html"><![CDATA[<p>一个长度为n-1的递增排序数组中的所有数字都是唯一的，并且每个数字都在范围0～n-1之内。在范围0～n-1内的n个数字中有且只有一个数字不在该数组中，请找出这个数字。</p><p>示例 1:</p><p>输入: [0,1,3]<br>输出: 2<br>示例 2:</p><p>输入: [0,1,2,3,4,5,6,7,9]<br>输出: 8</p><p>限制：</p><p>1 &lt;= 数组长度 &lt;= 10000</p><h2 id="思路">思路</h2><p>数组 ， 有序 ， 考虑二分查找。<br><img src="/img/loading.gif" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200820171134284.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5OTEwMw==,size_16,color_FFFFFF,t_70#pic_center"  alt="在这里插入图片描述"><br><img src="/img/loading.gif" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200820171144433.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5OTEwMw==,size_16,color_FFFFFF,t_70#pic_center"  alt="在这里插入图片描述"><br><img src="/img/loading.gif" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200820171153738.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5OTEwMw==,size_16,color_FFFFFF,t_70#pic_center"  alt="在这里插入图片描述"><br><img src="/img/loading.gif" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200820171202739.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5OTEwMw==,size_16,color_FFFFFF,t_70#pic_center"  alt="在这里插入图片描述"><br><img src="/img/loading.gif" class="lazyload" data-src="https://img-blog.csdnimg.cn/2020082017120957.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5OTEwMw==,size_16,color_FFFFFF,t_70#pic_center"  alt="在这里插入图片描述"><br><strong>复杂度分析：</strong><br>时间复杂度 O(log N)O(logN)： 二分法为对数级别复杂度。<br>空间复杂度 O(1)O(1)： 几个变量使用常数大小的额外空间。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">missingNumber</span><span class="params">(self, nums: List[int])</span> -&gt; int:</span></span><br><span class="line">        i , j = <span class="number">0</span> , len(nums) - <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> i &lt;= j:</span><br><span class="line">            m = (i + j) // <span class="number">2</span></span><br><span class="line">            <span class="keyword">if</span> m == nums[m]:</span><br><span class="line">                i = m + <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                j = m <span class="number">-1</span></span><br><span class="line">        <span class="keyword">return</span> i</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
          <category> array </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> array </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1144.递减元素使数组呈锯齿状</title>
      <link href="/posts/be155960.html"/>
      <url>/posts/be155960.html</url>
      
        <content type="html"><![CDATA[<p><img src="/img/loading.gif" class="lazyload" data-src="https://img-blog.csdnimg.cn/2020082016233481.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5OTEwMw==,size_16,color_FFFFFF,t_70#pic_center"  alt="在这里插入图片描述"><br>以输入样例 [9, 6, 1, 6, 2] 为例，检查奇数位置，可以将第一个元素 9 减小到 5，如果检查偶数位置，则需要将两个 6 减小到 0。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">movesToMakeZigzag</span><span class="params">(self, nums: List[int])</span> -&gt; int:</span></span><br><span class="line">        odd,even = <span class="number">0</span>,<span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums)):</span><br><span class="line">            <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">                <span class="comment"># 检查偶数位置的元素是不是最小的。</span></span><br><span class="line">                e1 = nums[i] - nums[i<span class="number">-1</span>] + <span class="number">1</span> <span class="keyword">if</span> i &gt; <span class="number">0</span> <span class="keyword">and</span> nums[i] &gt;= nums[i<span class="number">-1</span>] <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">                e2 = nums[i] - nums[i+<span class="number">1</span>] + <span class="number">1</span> <span class="keyword">if</span> i &lt; len(nums) - <span class="number">1</span> <span class="keyword">and</span> nums[i] &gt;= nums[i+<span class="number">1</span>] <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">                even += max(e1,e2)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># 检查奇数元素。</span></span><br><span class="line">                o1 = nums[i] - nums[i<span class="number">-1</span>] + <span class="number">1</span> <span class="keyword">if</span> i &gt; <span class="number">0</span> <span class="keyword">and</span> nums[i] &gt;= nums[i<span class="number">-1</span>] <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">                o2 = nums[i] - nums[i+<span class="number">1</span>] + <span class="number">1</span> <span class="keyword">if</span> i &lt; len(nums) - <span class="number">1</span> <span class="keyword">and</span> nums[i] &gt;= nums[i+<span class="number">1</span>] <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">                odd += max(o1,o2)</span><br><span class="line">        <span class="keyword">return</span> min(odd,even)</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
          <category> array </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> array </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python的deque的用法</title>
      <link href="/posts/548a2ed5.html"/>
      <url>/posts/548a2ed5.html</url>
      
        <content type="html"><![CDATA[<h2 id="deque-介绍">deque 介绍</h2><p>Python中的collentions中有一个deque，这个对象类似于list列表，但是使用list存储数据是，按索引访问元素很快，但是插入和删除就很慢了，因为list是线性存储，数据量大的时候，插入和删除效率很低。<br>但是deque是为了实现插入和删除操作的双向列表，适用于队列和栈：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collection <span class="keyword">import</span> deque</span><br><span class="line"></span><br><span class="line">q = deque([]) <span class="comment"># 使用deque 必须是可迭代对象</span></span><br><span class="line"></span><br><span class="line">dq = deque(range(<span class="number">10</span>), maxlen=<span class="number">10</span>) <span class="comment"># 可以通过maxlen指定队列长度</span></span><br></pre></td></tr></tbody></table></figure><p><img src="/img/loading.gif" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200729163106614.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5OTEwMw==,size_16,color_FFFFFF,t_70"  alt="[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-Q2HqWweb-1596011444350)(evernotecid://9775C0FD-89E0-4480-9298-5F976A0156D5/appyinxiangcom/28787127/ENResource/p28)]"></p><h2 id="添加元素">添加元素</h2><p>deque是通过extend方法初始化集合元素，同时可以通过extendleft/appendleft将结合元素从左边加到集合。</p><ul><li>extend</li><li>append</li><li>extendleft</li><li>appendleft</li></ul><p><img src="/img/loading.gif" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200729163116767.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5OTEwMw==,size_16,color_FFFFFF,t_70"  alt="[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-7LiKNVok-1596011444352)(evernotecid://9775C0FD-89E0-4480-9298-5F976A0156D5/appyinxiangcom/28787127/ENResource/p29)]"></p><h2 id="弹出元素">弹出元素</h2><ul><li>pop</li><li>popleft</li></ul><h2 id="线程">线程</h2><p>deque是线程安全的，也就是说你可以同时从deque集合的左边和右边进行操作而不会有影响</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>104. 二叉树的最大深度</title>
      <link href="/posts/ff0c5d84.html"/>
      <url>/posts/ff0c5d84.html</url>
      
        <content type="html"><![CDATA[<h2 id="二叉树的遍历">二叉树的遍历</h2><p>二叉树的遍历方式主要有：先序遍历、中序遍历、后序遍历、层次遍历。<br><img src="/img/loading.gif" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200729163220713.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5OTEwMw==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"></p><h3 id="深度优先遍历-DFS（Depth-First-Search）">深度优先遍历 DFS（Depth-First-Search）</h3><blockquote><p>DFS 有三种<br>先序遍历：遍历顺序规则为【根左右】<br>中序遍历：遍历顺序规则为【左根右】<br>后序遍历：遍历顺序规则为【左右根】</p></blockquote><h3 id="递归先序遍历-（用栈的方式实现）">递归先序遍历 （用栈的方式实现）</h3><p>如果我们知道了根节点的 左子树，右子树的 最大深度 l，r，那么该二叉树的最大深度为<br>max(l,r) + 1</p><p>而左子树，右子树的最大深度，同样也可以通过上述的方式计算出来。</p><p>递归在访问到空节点时 退出。</p><p>如图：<br><img src="/img/loading.gif" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200729163201649.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5OTEwMw==,size_16,color_FFFFFF,t_70"  alt=""></p><h4 id="时间复杂度">时间复杂度</h4><p>O(n)</p><h4 id="空间复杂度">空间复杂度</h4><p>O(height)</p><h3 id="广度优先遍历-BFS（Breadth-First-Search）">广度优先遍历 BFS（Breadth-First-Search）</h3><p>实际是用队列的方式实现。</p><p>把 每一层 所有节点 都放到队列里。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
          <category> binary tree </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> binary tree </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DRF 的 View</title>
      <link href="/posts/80f17c2d.html"/>
      <url>/posts/80f17c2d.html</url>
      
        <content type="html"><![CDATA[<p><img src="/img/loading.gif" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200729162858507.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5OTEwMw==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"></p><h1>简介</h1><p>DRF中的View分成 三个等级，最基本的View，APIView，到GenericAPIView，再到GenericViewSet</p><p><code>APIView</code> 和 <code>Viewset</code> 是 <code>DRF</code> 中引入的视图类，<code>Viewset</code> 对 <code>DRF</code> 自身提供的 <code>APIView</code> 进行了再次封装，而 <code>APIView</code> 是对原生 Django <code>View</code> 的封装，灵活运用 <code>APIView</code> 和 <code>Viewset</code> 可以大幅度提升业务开发效率，且大大提升了代码的可维护性。</p><h2 id="继承关系">继承关系</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">View</span><br><span class="line">    APIView</span><br><span class="line">        ViewSet</span><br><span class="line">        GenericAPIView</span><br><span class="line">            GenericViewSet</span><br><span class="line">                ReadOnlyModelViewSet</span><br><span class="line">                ModelViewSet</span><br><span class="line">            ListAPIView</span><br><span class="line">            RetrieveAPIView</span><br><span class="line">            CreateAPIView</span><br><span class="line">            UpdateAPIView</span><br><span class="line">            DestroyAPIView</span><br><span class="line">            ListCreateAPIView</span><br><span class="line">            RetrieveUpdateAPIView</span><br><span class="line">            RetrieveDestoryAPIView</span><br><span class="line">            RetrieveUpdateDestoryAPIView</span><br></pre></td></tr></tbody></table></figure><h2 id="View">View</h2><p>来自Django原生中，是基于所有类的View的父类，它负责将视图连接到URL，HTTP方法调度（POST，GET）和其他简单的功能。</p><h2 id="APIView">APIView</h2><p>APIView 是 DRF 中所有view的父类，本身继承于Django的view，只有简单的调度方法和检查。<br>最直接封装的是对request,response都进行了封装，response里面做了一些认证，权限，限流之类处理。而response返回的结果是经过系列化的json.</p><p>与django中的view类似的是，APIView中只需要实现对应的方法如 get, post等。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArticleView</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="comment"># 取数据</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="comment"># 增加数据</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">put</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="comment"># 全局更新</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">patch</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="comment"># 局部更新</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="comment"># 删除</span></span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></tbody></table></figure><h2 id="GenricAPIView">GenricAPIView</h2><p>这里都是通用的APIView,所谓通用就是常用的增删改查，也就是restframework已经帮你封装好了。比如django的GenericView封装了ListView, DetailView，CreateView, UpdateView, DeleteView等通用视图类。drf中则封装得更多。</p><p>下面 分别看一下源码：</p><p><code>CreateAPIView</code><br>实现了post方法</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CreateAPIView</span><span class="params">(mixins.CreateModelMixin,</span></span></span><br><span class="line"><span class="class"><span class="params">                    GenericAPIView)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Concrete view for creating a model instance.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.create(request, *args, **kwargs)</span><br></pre></td></tr></tbody></table></figure><p><code>ListAPIView</code><br>实现get方法</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListAPIView</span><span class="params">(mixins.ListModelMixin,</span></span></span><br><span class="line"><span class="class"><span class="params">                  GenericAPIView)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Concrete view for listing a queryset.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.list(request, *args, **kwargs)</span><br></pre></td></tr></tbody></table></figure><p><code>RetrieveAPIView</code><br>实现get方法，它与ListAPIView的不同是它获取单个对象，类似于django中的DetailView</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RetrieveAPIView</span><span class="params">(mixins.RetrieveModelMixin,</span></span></span><br><span class="line"><span class="class"><span class="params">                      GenericAPIView)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Concrete view for retrieving a model instance.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.retrieve(request, *args, **kwargs)</span><br></pre></td></tr></tbody></table></figure><p><code>DestroyAPIView</code><br>实现delete方法</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DestroyAPIView</span><span class="params">(mixins.DestroyModelMixin,</span></span></span><br><span class="line"><span class="class"><span class="params">                     GenericAPIView)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Concrete view for deleting a model instance.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.destroy(request, *args, **kwargs)</span><br></pre></td></tr></tbody></table></figure><p><code>UpdateAPIView</code><br>实现了put,patch两个方法，分别对应全局和局部更新。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UpdateAPIView</span><span class="params">(mixins.UpdateModelMixin,</span></span></span><br><span class="line"><span class="class"><span class="params">                    GenericAPIView)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Concrete view for updating a model instance.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">put</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.update(request, *args, **kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">patch</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.partial_update(request, *args, **kwargs)</span><br></pre></td></tr></tbody></table></figure><p>下面则是一些组合的视图类<br>… 详情参考： <a href="https://www.cnblogs.com/Andy963/p/12357927.html" target="_blank" rel="noopener">这篇文章</a></p><h2 id="ViewSet">ViewSet</h2><p>ViewSet 继承了APIView 之外，还加入了 <code>.as_view()</code> 和 <code>.initialize_request()</code>，并可以结合 router 映射路由</p><h2 id="三者的不同">三者的不同</h2><p>三者之间最重要的不同在于 mixin</p><h2 id="APIView-和-View">APIView 和 View</h2><p>在APIView中仍以常规的类视图定义方法来实现get() 、post() 或者其他请求方式的方法<br>新增的自定义属性</p><ul><li>authentication_classes 列表或元祖，身份认证类</li><li>permissoin_classes 列表或元祖，权限检查类</li><li>throttle_classes 列表或元祖，流量控制类</li></ul><blockquote><p>请求和返回使用的 DRF 的Request Response而不是django的HttpRequest HttpResponse<br>请求传入时进行身份验证，并在传给处理方法前进行权限检验<br>任何APIException都会被捕捉并放入合适的想要中<br>response返回的内容需是序列化的json</p></blockquote><h2 id="GenericAPIView-和-APIView">GenericAPIView 和 APIView</h2><p><code>GenericAPIView</code> 继承于 <code>APIView</code></p><h3 id="GenericAPIView新加的配置项">GenericAPIView新加的配置项</h3><ul><li><p>【列表视图】与【详情视图】通用</p><ul><li>queryset 指定作用的 model 数据范围【如果设置了 get_queryset() 这个配置则不生效】</li><li>serializer_class 设置视图使用的 serializer</li></ul></li><li><p>【列表视图】使用</p><ul><li>pagination_class 设置分页</li><li>filter_backends 设置过滤</li></ul></li><li><p>【详情页视图】使用</p><ul><li>lookup_field 查询单一数据库对象时使用的条件字段，默认为’pk’</li><li>lookup_url_kwarg 查询单一数据时URL中的参数关键字名称，默认与look_field相同</li></ul></li></ul><h3 id="GenericAPIView新加的方法">GenericAPIView新加的方法</h3><ul><li>get_queryset()<br>【列表视图与详情视图通用】<br>返回视图使用的查询集，是列表视图与详情视图获取数据的基础，默认返回queryset属性，可以重写，例如：</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_queryset</span><span class="params">(self)</span>:</span></span><br><span class="line">    user = self.request.user</span><br><span class="line">    <span class="keyword">return</span> user.accounts.all()</span><br></pre></td></tr></tbody></table></figure><ul><li>get_serializer_class()<br>【列表视图与详情视图通用】<br>返回序列化器类，默认返回serializer_class，可以重写，例如：</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_serializer_class</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> self.request.user.is_staff:</span><br><span class="line">        <span class="keyword">return</span> FullAccountSerializer</span><br><span class="line">    <span class="keyword">return</span> BasicAccountSerializer</span><br></pre></td></tr></tbody></table></figure><ul><li><p>get_serializer(self, args, *kwargs)<br>【列表视图与详情视图通用】<br>返回序列化器对象，被其他视图或扩展类使用，如果我们在视图中想要获取序列化器对象，可以直接调用此方法。<br>注意，在提供序列化器对象的时候，REST framework会向对象的context属性补充三个数据：request、format、view，这三个数据对象可以在定义序列化器时使用。</p></li><li><p>get_object()<br>【详情视图使用】<br>返回详情视图所需的模型类数据对象，默认使用lookup_field参数来过滤queryset。<br>在试图中可以调用该方法获取详情信息的模型类对象。<br>若详情访问的模型类对象不存在，会返回404。<br>该方法会默认使用APIView提供的check_object_permissions方法检查当前对象是否有权限被访问。</p></li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># url(r'^books/(?P&lt;pk&gt;\d+)/$', views.BookDetailView.as_view()),</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookDetailView</span><span class="params">(GenericAPIView)</span>:</span></span><br><span class="line">    queryset = BookInfo.objects.all()</span><br><span class="line">    serializer_class = BookInfoSerializer</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request, pk)</span>:</span></span><br><span class="line">        book = self.get_object()</span><br><span class="line">        serializer = self.get_serializer(book)</span><br><span class="line">        <span class="keyword">return</span> Response(serializer.data)</span><br></pre></td></tr></tbody></table></figure><ul><li>get_serializer_context()</li><li>filter_queryset()</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">GenericAPIView 可组合的 mixin</span><br><span class="line">    mixins.CreateModelMixin</span><br><span class="line">    mixins.ListModelMixin</span><br><span class="line">    mixins.RetrieveModelMixin</span><br><span class="line">    mixins.UpdateModelMixin</span><br><span class="line">    mixins.DestroyModelMixin</span><br><span class="line"></span><br><span class="line">GenericAPIView 已经组合的 mixin （与GenericAPIView放在同一目录）</span><br><span class="line">    CreateAPIView = GenericAPIView + mixins.CreateModelMixin （POST 有 create 方法）</span><br><span class="line">    ListAPIView = GenericAPIView + mixins.ListModelMixin （GET 有 list 方法）</span><br><span class="line">    RetrieveAPIView = GenericAPIView + mixins.RetrieveModelMixin （GET 有 retrieve 方法）</span><br><span class="line">    DestroyAPIView = GenericAPIView + mixins.DestroyModelMixin</span><br><span class="line">    UpdateAPIView = GenericAPIView + mixins.UpdateModelMixin</span><br><span class="line">    ListCreateAPIView = GenericAPIView + mixins.ListModelMixin + mixins.CreateModelMixin</span><br><span class="line">    RetrieveUpdateAPIView = GenericAPIView + mixins.RetrieveModelMixin + mixins.UpdateModelMixin</span><br><span class="line">    RetrieveDestroyAPIView = GenericAPIView + mixins.RetrieveModelMixin + mixins.DestroyModelMixin</span><br><span class="line">    RetrieveUpdateDestroyAPIView = GenericAPIView + mixins.RetrieveModelMixin + mixins.DestroyModelMixin + mixins.DestroyModelMixin</span><br></pre></td></tr></tbody></table></figure><h2 id="ViewSet-和-APIView">ViewSet 和 APIView</h2><p>ViewSet 和 APIView 的区别：</p><blockquote><p>ViewSet 继承于 APIView 的同时，多了一个 ViewSetMixin<br>ViewSetMixin 多了一个 .as_view() 方法，可将 get、post 等绑定到指定方法上<br>ViewSet 需要借助 router 实现配置 url<br>ViewSetMixin 还多了一个 .initialize_request()<br>initialize_request 给 request 绑定了很多的 action，主要用于动态的 serializers</p></blockquote><h3 id="GenericViewSet-和-ViewSet">GenericViewSet 和 ViewSet</h3><p>ViewSet 继承于 APIView<br>GenericViewSet 继承于 GenericAPIView</p><p>GenericViewSet 已经组合的 mixin （与 GenericViewSet 放在同一目录）</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ReadOnlyModelViewSet = GenericViewSet + mixins.RetrieveModelMixin + mixins.ListModelMixin</span><br><span class="line">ModelViewSet = GenericViewSet + mixins.CreateModelMixin + mixins.RetrieveModelMixin + UpdateModelMixin + mixins.DestroyModelMixin + mixins.ListModelMixin</span><br></pre></td></tr></tbody></table></figure><h3 id="Viewsets包含的Class-常用的">Viewsets包含的Class(常用的)</h3><p>0.ViewSetMixin<br>简介：Viewset的基类，它重写了原来 django view 中 .as_view() 方法，使得注册Url变得更加简单，原生 Django View 通过重写 get 和 post 方法的具体视图来达到实现逻辑<br>在 Viewset 中则可通过:</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">view = MyViewSet.as_view({<span class="string">'get'</span>: <span class="string">'list'</span>, <span class="string">'post'</span>: <span class="string">'create'</span>})</span><br></pre></td></tr></tbody></table></figure><h3 id="参考">参考</h3><p><a href="https://www.cnblogs.com/Andy963/p/12357927.html" target="_blank" rel="noopener">View 介绍</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> DRF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> Django </tag>
            
            <tag> DRF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DRF Serializers序列化</title>
      <link href="/posts/6d0d581e.html"/>
      <url>/posts/6d0d581e.html</url>
      
        <content type="html"><![CDATA[<h2 id="序列化和反序列化">序列化和反序列化</h2><p>序列化，是指将复杂的QuerySet和Model类型转换成Python基本数据类型，从而将这些基本数据类型以JSON的形式响应给客户端。</p><p>反序列化则和序列化相反，是指将Http请求中传入的JSON数据转换成复杂的数据类型，从而保存在数据库中。</p><p>在REST Framework中，提供了多个用于序列化操作的类，但常用的也就如下两个：</p><p>Serializer:进行序列化基本的类；<br>ModelSerializer:继承于Serializer，内部实现了通用的序列化逻辑，其中包含了与Model字段对应的字段，可以快速对Model进行序列化。<br>使用时需要导入对应模块：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br></pre></td></tr></tbody></table></figure><h3 id="Serializers-序列化组件">Serializers 序列化组件</h3><ul><li>Serializer 组件</li><li>ModelSerializer组件</li><li>HyperlinkedIdentityField组件 - 用于链接的拼接</li></ul><h4 id="serializer">serializer</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView</span><br><span class="line"><span class="keyword">from</span> rest_framework.serializers <span class="keyword">import</span> Serializer</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 写一个与modles内表类对应的Serializer类，用于获取需求序列化的字段</span></span><br><span class="line"><span class="comment"># 字段必须在modles对应表内进行定义</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookSerializer</span><span class="params">(Serializer)</span>:</span></span><br><span class="line">    name = serializers.CharField()</span><br><span class="line">    <span class="comment"># price=serializers.CharField()</span></span><br><span class="line">    <span class="comment"># date=serializers.CharField()</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Books</span><span class="params">(APIView)</span>:</span></span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request)</span>:</span></span><br><span class="line"> </span><br><span class="line">        <span class="comment"># 序列化多个对象（many=True）</span></span><br><span class="line">        books = models.Book.objects.all()</span><br><span class="line">        <span class="comment"># instance=books要序列化的queryset对象,many=True,表示序列化多条</span></span><br><span class="line">        ser = BookSerializer(instance=books, many=<span class="literal">True</span>)</span><br><span class="line">        print(ser.data)</span><br><span class="line">        <span class="comment"># [OrderedDict([('name', 'name')]), OrderedDict([('name', '水')]), OrderedDict([('name', '水都是')])]</span></span><br><span class="line"> </span><br><span class="line">        <span class="comment"># instance:可以不写,按位置传 - instance位于位置传参的第一位</span></span><br><span class="line">        <span class="comment"># ser=BookSerializer(books,many=True)</span></span><br><span class="line"> </span><br><span class="line">        <span class="comment"># 序列化单个对象 many=False</span></span><br><span class="line">        book = models.Book.objects.all().first()</span><br><span class="line">        ser=BookSerializer(book,many=<span class="literal">False</span>)</span><br><span class="line"> </span><br><span class="line">        <span class="comment"># ser.data 拿到的是序列化之后的字典,字典里可能套了列表,所以safe=False</span></span><br><span class="line">        <span class="keyword">return</span> JsonResponse(ser.data, safe=<span class="literal">False</span>)</span><br></pre></td></tr></tbody></table></figure><h4 id="ModelSerializer">ModelSerializer</h4><ul><li>ModelSerializer组件必须配合Meta使用，对指定的字段进行序列化处理和返回</li><li>Meta内注意事项：<ul><li>model需导入models内对应处理表类</li><li>fields - 用于获取需处理的表内字段</li><li>fields=‘<strong>all</strong>’ - 获取所有字段进行序列化处理；后续可用常规方式重写属性，覆盖all序列的操作</li><li>fields = [‘nid’,‘name’] - 获取指定字段进行序列化处理并返回</li><li>exclude=[‘publish’,‘authors’] - 用于去除字段，不序列化并且不返回</li><li>depth = 2 - 关系表的深度指定（不建议使用，对数据库的频繁操作降低效率）</li></ul></li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> ap01.models <span class="keyword">import</span> Book</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AuthorSerializer</span><span class="params">(serializers.Serializer)</span>:</span></span><br><span class="line">    nid = serializers.CharField()</span><br><span class="line">    name = serializers.CharField()</span><br><span class="line">    age = serializers.CharField()</span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookSerializer</span><span class="params">(serializers.ModelSerializer)</span>:</span></span><br><span class="line">    <span class="comment"># 必须写一个Meta内部类</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        <span class="comment"># 序列化的对象，models内的对应表类</span></span><br><span class="line">        <span class="comment"># 需导入from ap01.models import Book</span></span><br><span class="line">        model = Book</span><br><span class="line">        <span class="comment"># 对表内所有字段进行序列化处理</span></span><br><span class="line">        fields = <span class="string">'__all__'</span></span><br><span class="line">        <span class="comment"># 指定只取这两个字段</span></span><br><span class="line">        <span class="comment"># fields = ['nid','name']</span></span><br><span class="line">        <span class="comment"># 去掉指定的字段，选入字段不进行序列化且不返回</span></span><br><span class="line">        <span class="comment"># exclude=['publish','authors']</span></span><br><span class="line">        <span class="comment"># fields,跟exclude不能连用</span></span><br><span class="line">        <span class="comment"># 指定深度(官方建议小于10,我给你的建议小于3)，和关联表的深度 - 不建议使用</span></span><br><span class="line">        <span class="comment"># depth = 2</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 重写属性，覆盖Meta内初始化操作</span></span><br><span class="line">    publish = serializers.CharField(source=<span class="string">'publish.name'</span>)</span><br><span class="line">    authors = serializers.SerializerMethodField()</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_authors</span><span class="params">(self, book)</span>:</span></span><br><span class="line">        <span class="comment"># 拿到这本书的所有作者</span></span><br><span class="line">        aus = book.authors.all()</span><br><span class="line">        <span class="comment"># 可以继续用序列化类,来处理</span></span><br><span class="line">        auth_ser = AuthorSerializer(aus, many=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">return</span> auth_ser.data</span><br></pre></td></tr></tbody></table></figure><h4 id="HyperlinkedIdentityField-用于链接的拼接">HyperlinkedIdentityField - 用于链接的拼接</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">mySer.py</span></span><br><span class="line"><span class="string">  HyperlinkedIdentityField 必传参数：</span></span><br><span class="line"><span class="string">    - view_name：urls.py路由文件内反向解析名</span></span><br><span class="line"><span class="string">    - lookup_field：models内对应路由传入的参数</span></span><br><span class="line"><span class="string">    - lookup_url_kwarg：urls.py路由文件内对应有名参数名</span></span><br><span class="line"><span class="string">        - 注意：可以传入跨表字段，必须是联系表</span></span><br><span class="line"><span class="string">            例如：假设publish表类内存在外联关系表book - 'book_id'</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PublishSerializer</span><span class="params">(serializers.Serializer)</span>:</span></span><br><span class="line">    name = serializers.CharField()</span><br><span class="line">    city = serializers.CharField()</span><br><span class="line">    publish_url = serializers.HyperlinkedIdentityField(view_name=<span class="string">'urls_publish'</span>,lookup_field=<span class="string">'nid'</span>,lookup_url_kwarg=<span class="string">'id'</span>)</span><br><span class="line"> </span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">urls.py</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">url(<span class="string">r'^publish/(?P&lt;id&gt;\d+)'</span>, views.Publish.as_view(),name=<span class="string">'urls_publish'</span>),</span><br><span class="line"> </span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">views.py</span></span><br><span class="line"><span class="string">   PublishSerializer 必传参数：</span></span><br><span class="line"><span class="string">    - instance：序列化对象</span></span><br><span class="line"><span class="string">    - mangy：序列化对象的单复数</span></span><br><span class="line"><span class="string">    - context：获取链接中的域名，即 http://127.0.0.1:8000</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Publish</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        ret = models.Publish.objects.all()</span><br><span class="line">        publish_ser = PublishSerializer(ret, many=<span class="literal">True</span>,context={<span class="string">'request'</span>: request})</span><br><span class="line">        <span class="keyword">return</span> JsonResponse(publish_ser.data, safe=<span class="literal">False</span>)</span><br></pre></td></tr></tbody></table></figure><h1>参考</h1><p><a href="https://blog.csdn.net/qq_33961117/article/details/84955113" target="_blank" rel="noopener">https://blog.csdn.net/qq_33961117/article/details/84955113</a></p><p><a href="https://www.cnblogs.com/xiugeng/p/11460855.html#_label2" target="_blank" rel="noopener">serializers 详解</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> DRF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> Django </tag>
            
            <tag> DRF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习Docker，看这一篇就够了。</title>
      <link href="/posts/72391c0f.html"/>
      <url>/posts/72391c0f.html</url>
      
        <content type="html"><![CDATA[<h2 id="什么是容器">什么是容器</h2><p>依托于linux内核的虚拟化技术</p><h2 id="什么是Docker">什么是Docker</h2><p>能够把应用程序自动部署到容器的开源引擎</p><h2 id="Docker的基本组成">Docker的基本组成</h2><p><img src="/img/loading.gif" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200701133312330.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5OTEwMw==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"></p><h3 id="Docker-Client客户端">Docker Client客户端</h3><h3 id="Docker-Daemon守护进程">Docker Daemon守护进程</h3><h3 id="Docker-Image镜像">Docker Image镜像</h3><p>容器的基石</p><p>层叠的只读文件系统</p><p>联合加载</p><h3 id="Docker-Container容器">Docker Container容器</h3><p>通过镜像启动</p><p>启动和执行阶段</p><p>写时复制</p><h3 id="Docker-Registry仓库">Docker Registry仓库</h3><h4 id="共有">共有</h4><p>Docker Hub</p><h4 id="私有">私有</h4><h3 id="Docker在线演示地址">Docker在线演示地址</h3><h2 id="Docker的C-S模式">Docker的C/S模式</h2><h3 id="Docker的守护进程">Docker的守护进程</h3><ol><li>查看守护进程<br><code> ps -ef | grep docker</code><br><code>systemctl status docker</code></li><li>使用service命令管理<br><code>sudo service docker start/stop/restart</code></li><li>Docker 的启动选项<br><code>docker -d [OPTIONS]</code></li></ol><ul><li>运行相关：<br>-D,–debug=false<br>-e,–exec-driver=‘native’<br>-g,–graph=’/var/lib/docker’<br>-icc=true<br>-l,–log-level=‘info’<br>–label=[]<br>-p,–pidfile=’/var/run/docker.pid</li><li>Docker服务器连接相关<br>-G,–group=‘docker’<br><font color="red"><strong>-H,–host=[]</strong></font><br>-tls=false<br>-tlsverify=false</li><li>Remote API相关<br>–api-enable-cors=false</li><li>存储相关<br>-s,–storage-driver=’’<br>–selinux-enabled=false<br>–storage-opt=[]</li><li>Registry 相关<br>–insecure-registry=[]<br>–registry-mirror=[]</li></ul><ol start="4"><li>启动配置文件<br><code>/etc/default/docker/</code></li></ol><h3 id="Docker的远程访问">Docker的远程访问</h3><h4 id="守护进程设置">守护进程设置</h4><p>修改配置文件 /etc/default/dcoker<br><code>DOCKER_OPTS=" --label name=docker_server_1 -H tcp://0.0.0.0:2375"</code><br>重启docker <code>service docker resart</code></p><h4 id="客户端配置">客户端配置</h4><ul><li>使用环境变量<br><code>export DOCKER_HOST='tcp://ip:端口'</code> （这里的ip是要连接的远程主机IP）</li></ul><h2 id="Dcoker的容器">Dcoker的容器</h2><h3 id="容器的基本操作">容器的基本操作</h3><ul><li>启动容器<br><code>docker run IMAGE [COMMAND][ARG...]</code><br>run 在新容器中执行命令<br>eg : <code>docker run centos echo 'hello world'</code></li><li>启动交互式容器<br><code>docker run -i -t IMAGE /bin/bash</code><br>要开启以下设置  为容器始终打开标准输入<br><code>-i --interactive=true|false 默认是false  </code><br>为创建的容器分配一个tty终端<br><code>-t --tty=true|false 默认是false    </code><br><img src="/img/loading.gif" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200701163229821.png"  alt="在这里插入图片描述"></li><li>查看容器<br><code>docker ps [-a] [-l]</code><br><img src="/img/loading.gif" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200701163149331.png"  alt="在这里插入图片描述"></li><li>查看容器的信息<br><code>docker inspect ID/NAMES</code><br>eg: <code>docker inspect 71f344799cfc</code></li><li>自定义容器名字<br><code>docker run --name=自定义名字 -i -t IMAGE /bin/bash</code><br><img src="/img/loading.gif" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200701163834632.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5OTEwMw==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"></li><li>重新启动已经停止的容器<br><code>docker start [-i] 容器名</code></li><li>删除容器<br><code>docker rm 容器名</code></li></ul><h3 id="Docker-守护式容器">Docker 守护式容器</h3><p>什么是守护式容器？</p><ul><li>能够长期运行</li><li>没有交互式会话</li><li>适合运行应用程序和服务</li></ul><h4 id="启动守护式容器">启动守护式容器</h4><p><strong>方法1</strong><br><code>docker run --name=容器名 -i -t /bin/bash</code><br><img src="/img/loading.gif" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200701165140243.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5OTEwMw==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"><br>使用<code>Ctrl + p   Q</code>退出，不使用<code>exit</code><br><img src="/img/loading.gif" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200701165613901.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5OTEwMw==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"><br>附加到运行中的容器：<br><code>docker attach 容器名</code></p><p><strong>方法2</strong><br><code>docker run -d 镜像名 [COMMAND] [ARG...]</code><br><img src="/img/loading.gif" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200702101109809.png"  alt="在这里插入图片描述"></p><h4 id="查看容器日志">查看容器日志</h4><p><code>docker logs [-f] [-t] [--tail] 容器名</code><br>-f --follows=true 默认为false<br>-t --timestamps=true 默认为false<br>–tail=“all”<br><img src="/img/loading.gif" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200702101615322.png"  alt="在这里插入图片描述"></p><h4 id="查看容器内进程">查看容器内进程</h4><p><code>docker top 容器名</code></p><h4 id="在运行中的容器中启动新进程">在运行中的容器中启动新进程</h4><p><code>docker  exec [-d] [-i] [-t] 容器名 [COMMAND] [ARG...]</code><br><img src="/img/loading.gif" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200702101947112.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5OTEwMw==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"></p><h4 id="停止守护式容器">停止守护式容器</h4><ul><li><code>docker stop 容器名</code><br>给运行中的容器发送一个停止信号，等待容器停止后，命令会返回容器的名字。</li><li><code>docker kill 容器名</code><br>立刻杀死</li></ul><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">可以使用man命令查看docker具体命令的详细介绍</span><br><span class="line">例如：`man docker exec`</span><br></pre></td></tr></tbody></table></figure><h2 id="在Dokcer中部署静态网站">在Dokcer中部署静态网站</h2><h3 id="设置容器的端口映射">设置容器的端口映射</h3><ul><li><code>docker run [-P]</code><br>大写P  为容器暴露的所有端口进行映射。端口映射命令：<br><code>docker run -P -i -t centos /bin/bash</code></li><li><code>docker run [-p]</code><br>指定映射哪些端口<ol><li>容器端口 containerePort<br><code>docker run -p 80 -i -t centos /bin/bash</code></li><li>宿主机端口：容器端口  HostPort:containerPort<br><code>docker run -p 8080:80 -i -t centos /bin/bash</code></li><li>IP::容器端口 IP:containerPort<br><code>docker run -p 0.0.0.0:80 -i -t centos /bin/bash</code></li><li>IP：宿主机端口：容器端口   ip:HostPort:containerPort<br><code>docker run -p 0.0.0.0:8080:80 -i -t centos /bin/bash</code></li></ol></li></ul><h3 id="Nginx-部署流程">Nginx 部署流程</h3><ul><li>创建映射80端口的交互式容器<br><code>docker run -p 80 --name web -i -t centos /bin/bash</code></li><li>安装Nginx<br><code>yum install nginx</code></li><li>安装文本编辑器Vim<br><code>yum install vim</code></li><li>创建静态页面</li><li>修改Nginx配置文件</li><li>运行Nginx</li><li>验证网站访问</li></ul><h2 id="Docker-镜像">Docker 镜像</h2><p>容器的基石</p><p>层叠的只读文件系统</p><p>联合加载技术</p><h3 id="列出镜像">列出镜像</h3><p><code>docker images [OPTIONS] [REPOSITORY]</code></p><p>-a ,–all=false 显示所有镜像<br>-f ,–filter=[]<br>–no-trunc=false 不使用截断的方式显示数据<br>-q, --quiet=false  只显示镜像的唯一ID<br><img src="/img/loading.gif" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200702142421212.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5OTEwMw==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"></p><ul><li>REPOSITORY  一系列镜像的集合<br><em>Registry 仓库 是docker镜像的存储服务</em></li><li>TAG<br>镜像的标签。<br>创建容器时可以指定 镜像标签，不指定默认使用latest</li></ul><h3 id="查看镜像">查看镜像</h3><p><code>docker inspect [OPTIONS] CONTAINER | IMAGE [CONTAINER | IMAGE]</code><br>既支持容器的查看，也支持镜像的查看。<br><img src="/img/loading.gif" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200702142650435.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5OTEwMw==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"><br><img src="/img/loading.gif" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200702142717317.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5OTEwMw==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"></p><h3 id="删除镜像">删除镜像</h3><p><code>docker rmi [OPTIONS] IMAGE [IMAGE] ...</code><br>-f, --force=false<br>–no-prune=false</p><h3 id="查找镜像">查找镜像</h3><ul><li>Docker Hub  官网<ul><li><a href="https://registry.hub.docker.com" target="_blank" rel="noopener">https://registry.hub.docker.com</a></li></ul></li><li><code>docker search [OPTIONS] TERM</code><ul><li>–automated=false</li><li>–no-trunc=false</li><li>-s,–stars=0 星级 最低几个星星</li></ul></li></ul><h3 id="拉取镜像">拉取镜像</h3><p><code>docker pull [OPTIONS] NAME [:TAG]</code><br>-a, --all-tags=false<br>如果慢的话可以使用国内的docker仓库镜像服务器拉取<br>使用 --registry-mirror 选项</p><ol><li>修改：/etc/default/docker</li><li>添加：DOCKER_OPTS="–registry-mirror=http://xxxx"  xxx从daocloud获取</li></ol><h3 id="推送镜像">推送镜像</h3><p><code>docker push [REPOSITORY NAME]</code></p><h3 id="如何在本地构建镜像？">如何在本地构建镜像？</h3><ul><li>保存对容器的修改，并再次使用</li><li>自定义镜像的能力</li><li>以软件的形式打包并分发服务及其运行环境</li></ul><ol><li><code>docker commit</code> 通过容器构建<br><code>docker commit [OPTINOS] CONTAINER [REPOSITORY[:TAG]]</code><br>-a,–author=""<br>-m,–message=""<br>-p,–pause=true<br><img src="/img/loading.gif" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200703170651257.png"  alt="在这里插入图片描述"></li><li><code>docker build</code> 通过Dockerfile文件构建<br>创建第一个Dockerfile <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#First Dockerfile</span></span><br><span class="line">FROM ubuntu:14.04</span><br><span class="line">MAINTAINER liunan <span class="string">"youremail@outlook.com"</span></span><br><span class="line">RUN apt-get update</span><br><span class="line">RUN apt-get install nginx</span><br><span class="line">EXPOSE 80</span><br></pre></td></tr></tbody></table></figure><ol><li>创建目录 <code>mkdir -p dockerfile/df_test</code></li><li>编写 dockerfile文件<br><img src="/img/loading.gif" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200703172220775.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5OTEwMw==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"></li><li>执行 <code>docker build</code> 命令<br><code>docker build [OPTIONS] PATH | URL | -</code><br>–force-rm=false<br>–no-cache=false<br>–pull=false<br>-q,–quiet=false<br>–rm=true<br>-t,–tag=""指定构建的镜像的名字<br><img src="/img/loading.gif" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200703172513240.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5OTEwMw==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"></li><li>使用刚才build 的镜像<br><code>docker run -d --name nginx_use_df -p 80 ln/df_test nginx -g "daemon off;"</code></li></ol></li></ol><h3 id="Dockerfile指令">Dockerfile指令</h3><p>注释   #<br>指令   命令大写</p><h4 id="FROM">FROM</h4><ul><li>已经存在的镜像</li><li>基础镜像</li><li>必须是第一条非注释的指令</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">FROM &lt;image&gt;</span><br><span class="line">FROM &lt;image&gt;:&lt;tag&gt;</span><br></pre></td></tr></tbody></table></figure><h4 id="MAINTAINER">MAINTAINER</h4><p>指定镜像的作者信息，包含镜像的所有者和联系信息</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MAINTAINER liunan <span class="string">"liunan@gmail.com"</span></span><br></pre></td></tr></tbody></table></figure><h4 id="RUN">RUN</h4><p>指定当前镜像中运行的命令</p><ul><li>RUN <command> (shell模式)</command></li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/bin/sh -c <span class="built_in">command</span></span><br><span class="line">RUN <span class="built_in">echo</span> hello</span><br></pre></td></tr></tbody></table></figure><ul><li>RUN [“executable” ,“param1”,“param2”] (exec模式)</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RUN [<span class="string">"/bin/bash"</span> , <span class="string">"-c"</span> ,<span class="string">"echo hello"</span>]</span><br></pre></td></tr></tbody></table></figure><h4 id="EXPOSE">EXPOSE</h4><p>指定运行该镜像的容器使用的端口</p> <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPOSE &lt;port&gt; [&lt;port&gt; ...]</span><br></pre></td></tr></tbody></table></figure><p>使用EXPOSE指定了端口，启动容器的时候 也要指定端口<br><code>docker run -p 80 -d youimages nginx -g "daemon off;"</code></p><h4 id="CMD">CMD</h4><p>指定在容器运行时执行的命令</p><h4 id="ENTERYPOINT">ENTERYPOINT</h4><p>指定在容器运行时执行的命令</p><h4 id="ADD">ADD</h4><p>设置镜像的目录文件<br>ADD包含类似tar的解压功能</p><h4 id="COPY">COPY</h4><p>设置镜像的目录文件<br>如果单纯的复制文件，Docker推荐使用COPY</p><h4 id="VOLUME">VOLUME</h4><p>设置镜像的目录文件<br>VOLUME["/data"]</p><h4 id="WORKDIR">WORKDIR</h4><p>镜像在构建 及 运行时的环境设置</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">WORKDIR /path/to/workdir</span><br></pre></td></tr></tbody></table></figure><h4 id="ENV">ENV</h4><p>镜像在构建 及 运行时的环境设置</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ENV&lt;key&gt;&lt;value&gt;</span><br><span class="line">ENV&lt;key&gt;=&lt;value&gt;....</span><br></pre></td></tr></tbody></table></figure><h4 id="USER">USER</h4><p>镜像以什么样的用户运行</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">USER daemon</span><br><span class="line">USER nginx (使用哪个用户启动docker）</span><br><span class="line">USER user:group </span><br><span class="line">USER user:gid</span><br></pre></td></tr></tbody></table></figure><h4 id="ONBUILD">ONBUILD</h4><p>镜像触发器<br>当一个镜像被其他镜像作为基础镜像时执行<br>会在构建过程中插入指令</p><h3 id="Dockerfile的构建过程">Dockerfile的构建过程</h3><h4 id="Dockerfile的执行过程">Dockerfile的执行过程</h4><ul><li>从基础镜像运行一个容器</li><li>执行一条指令，对容器作出修改</li><li>执行类似 docker commit 的操作，提交一个新的镜像层</li><li>再基于刚提交的镜像运行一个新容器</li><li>执行 Dockerfile 中的下一条指令，直至所有指令执行完毕</li></ul><h4 id="构建镜像的中间层调试">构建镜像的中间层调试</h4><p>以上步骤中，中间层容器会在执行完后删除，但中间层镜像不会被删除。<br><font color="red">中间层镜像的优点：</font></p><font color="red"><ul><li>使用中间层镜像进行调试</li><li>查找错误</li></ul><h4 id="Dockerfile-的镜像缓存">Dockerfile 的镜像缓存</h4><p>Dockerfile构建过程中可以 构建缓存</p><ul><li>构建缓存    <code>use cache</code></li><li>不使用缓存  <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker build --no-cache</span><br></pre></td></tr></tbody></table></figure>  <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在 dockerfile 文件中 添加</span></span><br><span class="line">ENV REFRESH_DATE 2015-04-01</span><br><span class="line"><span class="comment"># 利用环境变量标记  缓存刷新的时间  这句命令后面的语句不会使用缓存</span></span><br></pre></td></tr></tbody></table></figure></li></ul><h4 id="查看镜像的构建过程">查看镜像的构建过程</h4><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker <span class="built_in">history</span> [image]</span><br></pre></td></tr></tbody></table></figure><p><img src="/img/loading.gif" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200707114914991.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5OTEwMw==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"></p><h2 id="Docker容器的网络基础">Docker容器的网络基础</h2><ul><li>Liunx 虚拟网桥特点<ul><li>可以设置IP地址</li><li>相当于拥有一个隐藏的虚拟网卡<br><img src="/img/loading.gif" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200707131707525.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5OTEwMw==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"></li></ul></li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装网桥管理工具</span></span><br><span class="line">sudo yum install bridge-utils</span><br><span class="line">sudo brctl show</span><br></pre></td></tr></tbody></table></figure></font><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python工具-获取当前路径下所有文件信息</title>
      <link href="/posts/9ce9a3de.html"/>
      <url>/posts/9ce9a3de.html</url>
      
        <content type="html"><![CDATA[<h2 id="输入路径获取当前路径下所有文件信息">输入路径获取当前路径下所有文件信息</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 筛查数据目录下所有文件</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">TestPath</span><span class="params">(path, l)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> file <span class="keyword">in</span> os.listdir(path):</span><br><span class="line">        file_path = path + <span class="string">'/'</span> + file</span><br><span class="line">        <span class="keyword">if</span> os.path.isdir(file_path):</span><br><span class="line">            TestPath(file_path, l)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            l.append(file_path)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取文件的md5</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_file_md5</span><span class="params">(filepath)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.isfile(filepath):</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    myhash = hashlib.md5()</span><br><span class="line">    f = open(filepath, <span class="string">"rb"</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        b = f.read(<span class="number">8096</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> b:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        myhash.update(b)</span><br><span class="line">    f.close()</span><br><span class="line">    <span class="keyword">return</span> myhash.hexdigest()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果输出到excel</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write_excel</span><span class="params">(all_file)</span>:</span></span><br><span class="line">    content = []</span><br><span class="line">    content.append([<span class="string">'文件'</span>, <span class="string">'类型'</span>, <span class="string">'大小'</span>, <span class="string">'md5值'</span>])</span><br><span class="line">    <span class="keyword">for</span> file <span class="keyword">in</span> all_file:</span><br><span class="line">        tmp = []</span><br><span class="line">        file_name = file.split(<span class="string">'/'</span>)[<span class="number">-1</span>]</span><br><span class="line">        file_type = file.split(<span class="string">'.'</span>)[<span class="number">-1</span>]</span><br><span class="line">        file_size = os.path.getsize(file) / float(<span class="number">1024</span> * <span class="number">1024</span>) <span class="comment"># getsize读取的是字节数</span></span><br><span class="line">        file_size_str = <span class="string">"%.2f MB"</span> % (file_size)</span><br><span class="line">        file_md5 = get_file_md5(file)</span><br><span class="line">        tmp = [file_name, file_type, file_size_str, file_md5]</span><br><span class="line">        content.append(tmp)</span><br><span class="line">    A = np.array(content)</span><br><span class="line">    data = pd.DataFrame(A)</span><br><span class="line">    writer = pd.ExcelWriter(<span class="string">'file_infos.xls'</span>)</span><br><span class="line">    data.to_excel(writer, <span class="string">'sheet_files_infos'</span>, float_format=<span class="string">'%.5f'</span>)</span><br><span class="line">    writer.save()</span><br><span class="line">    writer.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    path = input(<span class="string">"Please enter the data path:"</span>)</span><br><span class="line">    all_file = []</span><br><span class="line">    <span class="keyword">if</span> os.path.isdir(path):</span><br><span class="line">        TestPath(path, all_file)</span><br><span class="line">        write_excel(all_file)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">"PATH  ERROR!"</span>)</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux下导入自己开发的包报错 解决</title>
      <link href="/posts/6d7ba1cc.html"/>
      <url>/posts/6d7ba1cc.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.path.append(<span class="string">r'/root/'</span>) </span><br><span class="line"><span class="comment"># 这里我把 Test_dir 文件夹放在root根目录下了. 所以这里将/root/放入sys.path 中</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Test_dir.smt <span class="keyword">import</span> func1</span><br></pre></td></tr></tbody></table></figure><p>还可以永久修改环境变量, 永久生效</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/profile</span><br><span class="line"><span class="comment"># 最后一行加入</span></span><br><span class="line"><span class="built_in">export</span> PYTHONPATH=<span class="variable">$PYTHONPATH</span>:/root/</span><br><span class="line"><span class="comment"># wq! 或者 ZZ 保存</span></span><br><span class="line"><span class="comment"># 执行生效</span></span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Celery异步消息队列</title>
      <link href="/posts/9753bdb9.html"/>
      <url>/posts/9753bdb9.html</url>
      
        <content type="html"><![CDATA[<h2 id="什么是Celery">什么是Celery</h2><p>celery是一个异步任务队列/基于分布式消息传递的作业队列，分布式队列服务。它侧重于实时操作，但对调度支持也很好。</p><p>celery用于生产系统每天处理数以百万计的任务。</p><p>celery是用Python编写的，但该协议可以在任何语言实现。它也可以与其他语言通过webhooks实现。</p><p>建议的消息代理RabbitMQ的，但提供有限支持Redis, Beanstalk, MongoDB, CouchDB, ，和数据库（使用SQLAlchemy的或Django的 ORM） 。</p><p>celery是易于集成Django, Pylons and Flask，使用 django-celery, celery-pylons and Flask-Celery 附加包即可。</p><h2 id="应用场景">应用场景</h2><ul><li>异步任务<br>一些耗时较长的操作，如果用户等待后台数据返回，将会极大影响用户体验时，我们使用 异步消息队列，就可以解决这个问题啦。前端可以迅速响应用户请求，而一些异步操作则交给消息队列去执行啦。比如发送短信/邮件、消息推送、音视频处理等等。。</li><li>定时任务：<br>定时执行某件事情，比如每天数据统计<br>优惠券定期删除<br>等等。。</li></ul><h2 id="Celery架构图">Celery架构图</h2><p><img src="/img/loading.gif" class="lazyload" data-src="https://img-blog.csdnimg.cn/2020052219213493.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5OTEwMw==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"></p><ul><li>Producer：调用了Celery提供的API、函数或者装饰器而产生任务并交给任务队列处理的都是任务生产者。</li><li>Celery Beat：任务调度器，Beat进程会读取配置文件的内容，周期性地将配置中到期需要执行的任务发送给任务队列。</li><li>Broker：消息代理，又称消息中间件，Celery本身不提供消息服务，但是可以方便的和第三方提供的消息中间件集成。 接受任务生产者发送过来的任务消息，存进队列再按序分发给任务消费方（通常是消息队列或者数据库）。Celery目前支持RabbitMQ、Redis、MongoDB、Beanstalk、SQLAlchemy、Zookeeper等作为消息代理，但适用于生产环境的只有RabbitMQ和Redis, 官方推荐 RabbitMQ。</li><li>Celery Worker：执行任务的消费者，通常会在多台服务器运行多个消费者来提高执行效率。</li><li>Result Backend：任务处理完后保存状态信息和结果，以供查询。Celery默认已支持Redis、RabbitMQ、MongoDB、Django ORM、SQLAlchemy等方式。</li></ul><h2 id="实现">实现</h2><ol><li>准备一个项目，结构如下。<br><img src="/img/loading.gif" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200525105514759.png"  alt=""></li></ol><ul><li><a href="http://app.py" target="_blank" rel="noopener">app.py</a> :  实例化 Celery。</li><li><a href="http://config.py" target="_blank" rel="noopener">config.py</a> : Celery 相关配置。</li><li><a href="http://task.py" target="_blank" rel="noopener">task.py</a> : 任务函数文件。</li><li><a href="http://worker.py" target="_blank" rel="noopener">worker.py</a> : 执行调用任务工作。</li></ul><p>接下来依次看一下代码。</p><h3 id="app-py"><a href="http://app.py" target="_blank" rel="noopener">app.py</a></h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line">__author__ = <span class="string">'LiuNan'</span></span><br><span class="line">__date__ = <span class="string">'2020/5/22 19:52'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> Celery</span><br><span class="line"></span><br><span class="line"><span class="comment"># app是Celery类的实例，创建的时候添加了proj.tasks这个模块，也就是包含了proj/tasks.py这个文件。</span></span><br><span class="line">app = Celery(<span class="string">'Celery_project'</span>, include=[<span class="string">'Celery_project.task'</span>])</span><br><span class="line"></span><br><span class="line">app.config_from_object(<span class="string">'Celery_project.config'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.start()</span><br></pre></td></tr></tbody></table></figure><h3 id="config-py"><a href="http://config.py" target="_blank" rel="noopener">config.py</a></h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line">__author__ = <span class="string">'LiuNan'</span></span><br><span class="line">__date__ = <span class="string">'2020/5/22 19:53'</span></span><br><span class="line"></span><br><span class="line">BROKER_URL = <span class="string">'redis://:yourpasswd@localhost'</span> <span class="comment"># 使用Redis作为消息代理</span></span><br><span class="line"></span><br><span class="line">CELERY_RESULT_BACKEND = <span class="string">'redis://:yourpasswd@localhost:6379/0'</span> <span class="comment"># 把任务结果存在了Redis</span></span><br><span class="line"></span><br><span class="line">CELERY_TASK_SERIALIZER = <span class="string">'msgpack'</span> <span class="comment"># 任务序列化和反序列化使用msgpack方案</span></span><br><span class="line"></span><br><span class="line">CELERY_RESULT_SERIALIZER = <span class="string">'json'</span> <span class="comment"># 读取任务结果一般性能要求不高，所以使用了可读性更好的JSON</span></span><br><span class="line"></span><br><span class="line">CELERY_TASK_RESULT_EXPIRES = <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> <span class="comment"># 任务过期时间</span></span><br><span class="line"></span><br><span class="line">CELERY_ACCEPT_CONTENT = [<span class="string">'json'</span>, <span class="string">'msgpack'</span>] <span class="comment"># 指定接受的内容类型</span></span><br></pre></td></tr></tbody></table></figure><h3 id="task-py"><a href="http://task.py" target="_blank" rel="noopener">task.py</a></h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line">__author__ = <span class="string">'LiuNan'</span></span><br><span class="line">__date__ = <span class="string">'2020/5/22 19:50'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> Celery_project.app <span class="keyword">import</span> app</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.task</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    time.sleep(<span class="number">5</span>) <span class="comment"># 模拟执行时间5秒</span></span><br><span class="line">    <span class="keyword">return</span> x + y</span><br></pre></td></tr></tbody></table></figure><h3 id="worker-py"><a href="http://worker.py" target="_blank" rel="noopener">worker.py</a></h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line">__author__ = <span class="string">'LiuNan'</span></span><br><span class="line">__date__ = <span class="string">'2020/5/22 19:56'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="comment"># from Celery_project.task import add</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.path.append(<span class="string">r'/root/'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Celery_project.task <span class="keyword">import</span> add</span><br><span class="line"></span><br><span class="line">t1 = time.time()</span><br><span class="line"><span class="comment"># 用 delay() 方法来调用任务</span></span><br><span class="line"><span class="comment"># 调用任务会返回一个 AsyncResult 实例，可用于检查任务的状态，等待任务完成或获取返回值（如果任务失败，则为异常和回溯）。</span></span><br><span class="line">r1 = add.delay(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">r2 = add.delay(<span class="number">3</span>, <span class="number">2</span>)</span><br><span class="line">r3 = add.delay(<span class="number">7</span>, <span class="number">2</span>)</span><br><span class="line">r4 = add.delay(<span class="number">8</span>, <span class="number">2</span>)</span><br><span class="line">r5 = add.delay(<span class="number">10</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">r_list = [r1, r2, r3, r4, r5]</span><br><span class="line"><span class="keyword">for</span> r <span class="keyword">in</span> r_list:</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> r.ready():</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    print(r.result)</span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># print(add(1,2))</span></span><br><span class="line"><span class="comment"># print(add(3,2))</span></span><br><span class="line"><span class="comment"># print(add(7,2))</span></span><br><span class="line"><span class="comment"># print(add(8,2))</span></span><br><span class="line"><span class="comment"># print(add(10,2))</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line">t2 = time.time()</span><br><span class="line">print(<span class="string">'耗时%s'</span> % str(t2 - t1))</span><br></pre></td></tr></tbody></table></figure><h2 id="运行">运行</h2><ol><li><p>启动redis</p></li><li><p>切换至所在目录，执行 <code>celery -A Celery_project.app worker -l info</code><br>运行结果图，如下。<br><img src="/img/loading.gif" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200525135616926.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5OTEwMw==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"></p></li><li><p>运行调用任务文件 <a href="http://worker.py" target="_blank" rel="noopener">worker.py</a></p><p><img src="/img/loading.gif" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200525135651212.png"  alt="在这里插入图片描述"><br><img src="/img/loading.gif" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200525135709485.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5OTEwMw==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"><br>可以看出, 程序总共执行了 5 秒.<br>我定义任务执行时间 是5秒, 如果是同步执行, 我执行了5次, 那么最少需要 25 秒.<br>所以可以看出celery 的作用.</p></li></ol><h2 id="参考文档">参考文档</h2><p><a href="http://docs.jinkan.org/docs/celery/" target="_blank" rel="noopener"><strong>Celery - 分布式任务队列 官方文档</strong> </a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python的GIL是什么东西？</title>
      <link href="/posts/a3a30c9.html"/>
      <url>/posts/a3a30c9.html</url>
      
        <content type="html"><![CDATA[<h2 id="GIL是什么？">GIL是什么？</h2><p>首先需要明确的一点是<code>GIL</code>并不是Python的特性，它是在实现Python解析器(CPython)时所引入的一个概念。就好比C<ins>是一套语言（语法）标准，但是可以用不同的编译器来编译成可执行代码。有名的编译器例如GCC，INTEL C</ins>，Visual C++等。Python也一样，同样一段代码可以通过CPython，PyPy，Psyco等不同的Python执行环境来执行。像其中的JPython就没有GIL。然而因为CPython是大部分环境下默认的Python执行环境。所以在很多人的概念里CPython就是Python，也就想当然的把<code>GIL</code>归结为Python语言的缺陷。所以这里要先明确一点：GIL并不是Python的特性，Python完全可以不依赖于GIL</p><p>那么CPython实现中的GIL又是什么呢？GIL全称<code>Global Interpreter Lock</code>为了避免误导，我们还是来看一下官方给出的解释：</p><blockquote><p><em>In CPython, the global interpreter lock, or GIL, is a mutex that prevents multiple native threads from executing Python bytecodes at once. This lock is necessary mainly because CPython’s memory management is not thread-safe. (However, since the GIL exists, other features have grown to depend on the guarantees that it enforces.)</em></p></blockquote><p>好吧，是不是看上去很糟糕？</p><p>即全局解释器锁，每个线程在执行时候都需要先获取GIL，保证同一时刻只有一个线程可以执行代码，即同一时刻只有一个线程使用CPU，也就是说多线程并不是真正意义上的同时执行。</p><h2 id="为什么会有GIL">为什么会有GIL</h2><p>由于物理上得限制，各CPU厂商在核心频率上的比赛已经被多核所取代。为了更有效的利用多核处理器的性能，就出现了多线程的编程方式，而随之带来的就是线程间数据一致性和状态同步的困难。<a href="http://cenalulu.github.io/python/gil-in-python/linux/all-about-cpu-cache/" target="_blank" rel="noopener">即使在CPU内部的Cache也不例外</a>，为了有效解决多份缓存之间的数据同步时各厂商花费了不少心思，也不可避免的带来了一定的性能损失。</p><p>Python当然也逃不开，为了利用多核，Python开始支持多线程。<em>而解决多线程之间数据完整性和状态同步的最简单方法自然就是加锁。</em> 于是有了GIL这把超级大锁，而当越来越多的代码库开发者接受了这种设定后，他们开始大量依赖这种特性（即默认python内部对象是thread-safe的，无需在实现时考虑额外的内存锁和同步操作）。</p><p>为了直观的理解GIL对于多线程带来的性能影响，这里直接借用的一张测试结果图（见下图）。图中表示的是两个线程在双核CPU上得执行情况。两个线程均为CPU密集型运算线程。绿色部分表示该线程在运行，且在执行有用的计算，红色部分为线程被调度唤醒，但是无法获取GIL导致无法进行有效运算等待的时间。<br><img src="/img/loading.gif" class="lazyload" data-src="https://img-blog.csdnimg.cn/2020052115103316.png"  alt="在这里插入图片描述"></p><p>由图可见，GIL的存在导致多线程无法很好的立即多核CPU的并发处理能力。</p><p>那么Python的IO密集型线程能否从多线程中受益呢？我们来看下面这张测试结果。颜色代表的含义和上图一致。白色部分表示IO线程处于等待。可见，当IO线程收到数据包引起终端切换后，仍然由于一个CPU密集型线程的存在，导致无法获取GIL锁，从而进行无尽的循环等待。<br><img src="/img/loading.gif" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200521151046702.png"  alt="在这里插入图片描述"><br>简单的总结下就是：Python的多线程在多核CPU上，只对于IO密集型计算产生正面效果；而当有至少有一个CPU密集型线程存在，那么多线程效率会由于GIL而大幅下降。</p><h2 id="如何改进GIL带来的影响">如何改进GIL带来的影响</h2><ul><li>更换cpython为jpython(不建议)</li><li>使用多进程完成多线程的任务</li><li>在使用多线程可以使用c语言去实现</li></ul><h3 id="用multiprocessing替代Thread">用multiprocessing替代Thread</h3><p>multiprocessing库的出现很大程度上是为了弥补thread库因为GIL而低效的缺陷。它完整的复制了一套thread所提供的接口方便迁移。唯一的不同就是它使用了多进程而不是多线程。每个进程有自己的独立的GIL，因此也不会出现进程之间的GIL争抢。</p><p>当然multiprocessing也不是万能良药。它的引入会增加程序实现时线程间数据通讯和同步的困难。就拿计数器来举例子，如果我们要多个线程累加同一个变量，对于thread来说，申明一个global变量，用thread.Lock的context包裹住三行就搞定了。而multiprocessing由于进程之间无法看到对方的数据，只能通过在主线程申明一个Queue，put再get或者用share memory的方法。这个额外的实现成本使得本来就非常痛苦的多线程程序编码，变得更加痛苦了。具体难点在哪有兴趣的读者可以扩展阅读<a href="http://www.jeffknupp.com/blog/2013/06/30/pythons-hardest-problem-revisited/" target="_blank" rel="noopener">这篇文章</a></p><h3 id="多进程通信">多进程通信</h3><h4 id="Queue">Queue</h4><blockquote><p>多个进程间实现通信</p></blockquote><p>Queue有两个方法</p><ol><li><p>Put</p><p>以插入数据到队列中，他还有两个可选参数：blocked和timeout。</p></li><li><p>Get</p><p>从队列读取并且删除一个元素。同样，他还有两个可选参数：blocked和timeout。</p></li></ol><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process, Queue</span><br><span class="line"><span class="keyword">import</span> os,time,random</span><br><span class="line"></span><br><span class="line"><span class="comment">#写数据进程执行的代码</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">proc_write</span><span class="params">(q,urls)</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'Process is write....'</span></span><br><span class="line">    <span class="keyword">for</span> url <span class="keyword">in</span> urls:</span><br><span class="line">        q.put(url)</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'put %s to queue... '</span> %url</span><br><span class="line">        time.sleep(random.random())</span><br><span class="line"></span><br><span class="line"><span class="comment">#读数据进程的代码</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">proc_read</span><span class="params">(q)</span>:</span></span><br><span class="line">    print(<span class="string">'Process is reading...'</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        url = q.get(<span class="literal">True</span>)</span><br><span class="line">        print(<span class="string">'Get %s from queue'</span> %url)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment">#父进程创建Queue，并传给各个子进程</span></span><br><span class="line">    q = Queue()</span><br><span class="line">    proc_write1 = Process(target=proc_write,args=(q,[<span class="string">'url_1'</span>,<span class="string">'url_2'</span>,<span class="string">'url_3'</span>]))</span><br><span class="line">    proc_write2 = Process(target=proc_write,args=(q,[<span class="string">'url_4'</span>,<span class="string">'url_5'</span>,<span class="string">'url_6'</span>]))</span><br><span class="line">    proc_reader = Process(target=proc_read,args=(q,))</span><br><span class="line">    <span class="comment">#启动子进程，写入</span></span><br><span class="line">    proc_write1.start()</span><br><span class="line">    proc_write2.start()</span><br><span class="line"></span><br><span class="line">    proc_reader.start()</span><br><span class="line">    <span class="comment">#等待proc_write1结束</span></span><br><span class="line">    proc_write1.join()</span><br><span class="line">    proc_write2.join()</span><br><span class="line">    <span class="comment">#proc_raader进程是死循环，强制结束</span></span><br><span class="line">    proc_reader.terminate()</span><br></pre></td></tr></tbody></table></figure><p>运行结果图：<br><img src="/img/loading.gif" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200521151118287.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5OTEwMw==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"></p><h4 id="Pipe">Pipe</h4><blockquote><p>两个进程间的通信</p></blockquote><ul><li>Pipe常用于两个进程，两个进程分别位于管道的两端</li><li>Pipe方法返回（conn1,conn2）代表一个管道的两个端，Pipe方法有duplex参数，默认为True，即全双工模式，若为FALSE，conn1只负责接收信息，conn2负责发送，</li><li>send和recv方法分别为发送和接收信息。</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!coding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"><span class="keyword">import</span> os,time,random</span><br><span class="line"></span><br><span class="line"><span class="comment">#写数据进程执行的代码</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">proc_send</span><span class="params">(pipe,urls)</span>:</span></span><br><span class="line">    <span class="comment">#print 'Process is write....'</span></span><br><span class="line">    <span class="keyword">for</span> url <span class="keyword">in</span> urls:</span><br><span class="line"></span><br><span class="line">        <span class="keyword">print</span> <span class="string">'Process is send :%s'</span> %url</span><br><span class="line">        pipe.send(url)</span><br><span class="line">        time.sleep(random.random())</span><br><span class="line"></span><br><span class="line"><span class="comment">#读数据进程的代码</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">proc_recv</span><span class="params">(pipe)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        print(<span class="string">'Process rev:%s'</span> %pipe.recv())</span><br><span class="line">        time.sleep(random.random())</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment">#父进程创建pipe，并传给各个子进程</span></span><br><span class="line">    pipe = multiprocessing.Pipe()</span><br><span class="line">    p1 = multiprocessing.Process(target=proc_send,args=(pipe[<span class="number">0</span>],[<span class="string">'url_'</span>+str(i) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>) ]))</span><br><span class="line">    p2 = multiprocessing.Process(target=proc_recv,args=(pipe[<span class="number">1</span>],))</span><br><span class="line">    <span class="comment">#启动子进程，写入</span></span><br><span class="line">    p1.start()</span><br><span class="line">    p2.start()</span><br><span class="line"></span><br><span class="line">    p1.join()</span><br><span class="line">    p2.terminate()</span><br></pre></td></tr></tbody></table></figure><p>运行结果图：<br><img src="/img/loading.gif" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200521151319279.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5OTEwMw==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"></p><h2 id="GIL相关问题">GIL相关问题</h2><h3 id="什么时候会释放Gil锁">什么时候会释放Gil锁</h3><ul><li>遇到像 i/o操作这种 会有时间空闲情况 造成cpu闲置的情况会释放Gil</li><li>会有一个专门ticks进行计数 一旦ticks数值达到100 这个时候释放Gil锁 线程之间开始竞争Gil锁(说明:ticks这个数值可以进行设置来延长或者缩减获得Gil锁的线程使用cpu的时间)</li></ul><h3 id="互斥锁和Gil锁的关系">互斥锁和Gil锁的关系</h3><p><code>Gil锁</code>  : 保证同一时刻只有一个线程能使用到cpu<br><code>互斥锁 </code>: 多线程时,保证修改共享数据时有序的修改,不会产生数据修改混乱</p><p>首先假设只有一个进程,这个进程中有两个线程 <code>Thread1</code>,<code>Thread2</code>, 要修改共享的数据<code>data</code>, 并且有互斥锁</p><p>执行以下步骤:</p><ol><li>多线程运行，假设<code>Thread1</code>获得<code>GIL</code>可以使用<code>cpu</code>，这时<code>Thread1</code>获得 互斥锁<code>lock</code>,<code>Thread1</code>可以改<code>data</code>数据(但并<br>没有开始修改数据)</li><li><code>Thread1</code>线程在修改<code>data</code>数据前发生了 <code>i/o</code>操作 或者<code> ticks</code>计数满100 (注意就是没有运行到修改<code>data</code>数据),这个<br>时候 <code>Thread1 </code>让出了<code>GIL</code>,<code>GIL</code>锁可以被竞争</li><li><code>Thread1</code> 和 <code>Thread2</code> 开始竞争 <code>Gil</code> (注意:如果<code>Thread1</code>是因为 i/o 阻塞 让出的<code>Gil</code> <code>Thread2</code>必定拿到<code>Gil</code>,如果<br><code>Thread1</code>是因为<code>ticks</code>计数满100让出<code>Gil</code> 这个时候 <code>Thread1</code> 和 <code>Thread2</code> 公平竞争)</li><li>假设 <code>Thread2</code>正好获得了GIL, 运行代码去修改共享数据 <code>data</code>,由于<code>Thread1</code>有互斥锁<code>lock</code>，所以<code>Thread2</code>无法更改共享数据<code>data</code>,这时<code>Thread2</code>让出<code>GIL</code>锁 ,<code> GIL</code>锁再次发生竞争<br>公平竞争)</li><li>假设 <code>Thread2</code>正好获得了GIL, 运行代码去修改共享数据 <code>data</code>,由于<code>Thread1</code>有互斥锁<code>lock</code>，所以<code>Thread2</code>无法更改共享数据<code>data</code>,这时<code>Thread2</code>让出<code>GIL</code>锁 ,<code> GIL</code>锁再次发生竞争</li><li>假设<code>Thread1</code>又抢到<code>GIL</code>，由于其有互斥锁<code>Lock</code>所以其可以继续修改共享数据<code>data</code>,当<code>Thread1</code>修改完数据释放互斥锁<code>lock</code>,<code>Thread2</code>在获得<code>GIL</code>与<code>lock</code>后才可对<code>data</code>进行修改</li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>elasticsearch建议器</title>
      <link href="/posts/9bd4ee27.html"/>
      <url>/posts/9bd4ee27.html</url>
      
        <content type="html"><![CDATA[<h2 id="什么是建议器">什么是建议器</h2><p>目前为止，浏览器都已经具备<code>Suggest as you type</code>功能，即在我们输入搜索的过程中，进行自动的补全或者纠错功能，协助用户输入更精确的关键词，提高搜索阶段的文档匹配程度。例如我们在百度或谷歌浏览器输入搜索关键词时，虽然我们输入的有误，但是浏览器依然能够提示出我们想要的正确结果。<br><img src="/img/loading.gif" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200506185947444.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5OTEwMw==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"></p><p><img src="/img/loading.gif" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200506190050554.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5OTEwMw==,size_16,color_FFFFFF,t_70"  alt="![在这里插入图片描述](https://img-blog.csdnimg.cn/2020050619002368.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5OTEwMw==,size_16,color_FFFFFF,t_70"><br><strong>在elasticsearch中，建议功能通过使用建议器基于提供的文本建议类似的词</strong><br>目前<code>_suggest</code>已经弃用，我们可以通过<code>_search</code>来做建议器的查询。<br>在5.0版本中，<code>_search</code>经过优化，变得非常的方便。</p><h2 id="建议器如何使用">建议器如何使用</h2><h3 id="query与suggest结合">query与suggest结合</h3><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">PUT s1</span><br><span class="line">{</span><br><span class="line">  "mappings": {</span><br><span class="line">    "doc": {</span><br><span class="line">      "properties": {</span><br><span class="line">        "title": {</span><br><span class="line">          "type": "text",</span><br><span class="line">          "analyzer": "standard"</span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">PUT s1/doc/1</span><br><span class="line">{</span><br><span class="line">  "title": "Lucene is cool"</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">PUT s1/doc/2</span><br><span class="line">{</span><br><span class="line">  "title":"Elasticsearch builds on top of lucene"</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">GET s1/doc/_search</span><br><span class="line">{</span><br><span class="line">  "query": {</span><br><span class="line">    "match": {</span><br><span class="line">      "title": "Lucene"</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  "suggest": {</span><br><span class="line">    "my_suggest": {</span><br><span class="line">      "text": "Elasticsear lucen",</span><br><span class="line">      "term": {</span><br><span class="line">        "field": "title"</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="/img/loading.gif" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200506192346470.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5OTEwMw==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"></p><p>上例是一个包含建议的查询请求，查询<code>query</code>我们已经了然。<br>让我们注意<code>suggest</code>，每个建议器都有自己名称<code>my-suggestion</code>，es根据text字段返回建议结果。建议类型是<code>term</code>。从<code>field</code>字段生成建议。</p><h3 id="直接使用-suggest">直接使用 suggest</h3><p>如果我们仅需要建议而不需要查询功能，我们可以忽略<code>query</code>而直接使用<code>suggest</code>对象返回建议。</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET s1/doc/_search</span><br><span class="line">{</span><br><span class="line">  "suggest": {</span><br><span class="line">    "my_sugget": {</span><br><span class="line">      "text": "Elasticsear lucen",</span><br><span class="line">      "term": {</span><br><span class="line">        "field": "title"</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>可以根据需要指定几组建议器，每组建议器都有自己的名称。如下例的<code>my_suggest1</code>和<code>my_suggest2</code>。</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">GET s1/doc/_search</span><br><span class="line">{</span><br><span class="line">  "suggest": {</span><br><span class="line">    "my_sugget1": {</span><br><span class="line">      "text": "Elasticsear",</span><br><span class="line">      "term": {</span><br><span class="line">        "field": "title"</span><br><span class="line">      }</span><br><span class="line">    },</span><br><span class="line">    "my_suggest2": {</span><br><span class="line">      "text": "lucen",</span><br><span class="line">      "term": {</span><br><span class="line">        "field": "title"</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>在多个建议器中，如果输入的<code>text</code>字段值一致，可以单独写出来，以适用于<code>my_suggest1</code>和<code>my_suggest2</code>两个建议器。</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">GET s1/doc/_search</span><br><span class="line">{</span><br><span class="line">  "suggest": {</span><br><span class="line">    "text": "Elasticsear lucen",</span><br><span class="line">    "my_sugget1": {</span><br><span class="line">      "term": {</span><br><span class="line">        "field": "title"</span><br><span class="line">      }</span><br><span class="line">    },</span><br><span class="line">    "my_suggest2": {</span><br><span class="line">      "term": {</span><br><span class="line">        "field": "title"</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="建议器种类">建议器种类</h2><p>根据需求不同<code>elasticsearch</code>设计了4种<code>suggester</code>，分别是：</p><ul><li>词条建议器（<code>term suggester</code>）：主要做<strong>纠正</strong>。对于给定文本的每个词条，该键议器从索引中抽取要建议的关键词，这对于短字段（如分类标签）很有效。</li><li>词组建议器（<code>phrase suggester</code>）：主要做<strong>纠正</strong>。我们可以认为它是词条建议器的扩展，为整个文本（而不是单个词条）提供了替代方案，它考虑了各词条彼此临近出现的频率，使得该建议器更适合较长的字段，比如商品的描述。</li><li>完成建议器（<code>completion suggester</code>）：该建议器根据词条的前缀，提供自动完成的功能（智能提示，有点最左前缀查询的意思），为了实现这种实时的建议功能，它得到了优化，工作在内存中。所以，速度要比之前说的<code>match_phrase_prefix</code>快的多！</li><li>上下文建议器（<code>context suggester</code>）：它是完成建议器的扩展，允许我们根据词条或分类亦或是地理位置对结果进行过滤。</li></ul><h3 id="词条建议器（term-suggester）">词条建议器（<code>term suggester</code>）</h3><p>词条建议器接收输入的文本，对其进行分析并且分为词条，然后为每个词条提供一系列的建议。</p><p><strong>测试数据：创建索引，创建文档。</strong></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">PUT s2</span><br><span class="line">{</span><br><span class="line">  "mappings": {</span><br><span class="line">    "doc": {</span><br><span class="line">      "properties": {</span><br><span class="line">        "title": {</span><br><span class="line">          "type": "text",</span><br><span class="line">          "analyzer": "standard"</span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">PUT s2/doc/1</span><br><span class="line">{</span><br><span class="line">  "title": "Lucene is cool"</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">PUT s2/doc/2</span><br><span class="line">{</span><br><span class="line">  "title": "Elasticsearch builds on top of lucene"</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">PUT s2/doc/3</span><br><span class="line">{</span><br><span class="line">  "title": "Elasticsearch rocks"</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">PUT s2/doc/4</span><br><span class="line">{</span><br><span class="line">  "title": "Elastic is the company behind ELK stack"</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">PUT s2/doc/5</span><br><span class="line">{</span><br><span class="line">  "title": "elk rocks"</span><br><span class="line">}</span><br><span class="line">PUT s2/doc/6</span><br><span class="line">{</span><br><span class="line">  "title": "elasticsearch is rock solid"</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>查询：</strong></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET s2/doc/_search</span><br><span class="line">{</span><br><span class="line">  "suggest": {</span><br><span class="line">    "my_suggest": {</span><br><span class="line">      "text": "luenc",</span><br><span class="line">      "term": {</span><br><span class="line">        "field": "title"</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>返回结果：</strong></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">  "took" : 3,</span><br><span class="line">  "timed_out" : false,</span><br><span class="line">  "_shards" : {</span><br><span class="line">    "total" : 5,</span><br><span class="line">    "successful" : 5,</span><br><span class="line">    "skipped" : 0,</span><br><span class="line">    "failed" : 0</span><br><span class="line">  },</span><br><span class="line">  "hits" : {</span><br><span class="line">    "total" : 0,</span><br><span class="line">    "max_score" : 0.0,</span><br><span class="line">    "hits" : [ ]</span><br><span class="line">  },</span><br><span class="line">  "suggest" : {</span><br><span class="line">    "my_suggest" : [</span><br><span class="line">      {</span><br><span class="line">        "text" : "luenc",</span><br><span class="line">        "offset" : 0,</span><br><span class="line">        "length" : 5,</span><br><span class="line">        "options" : [</span><br><span class="line">          {</span><br><span class="line">            "text" : "lucene",</span><br><span class="line">            "score" : 0.6,</span><br><span class="line">            "freq" : 2</span><br><span class="line">          }</span><br><span class="line">        ]</span><br><span class="line">      }</span><br><span class="line">    ]</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>上例中，在<code>options</code>字段中，建议结果是<code>lucene</code>。我们来看看，在建议器中，都有哪些字段。</p><p><code>text</code>：建议文本，建议文本是必需的选项，可以通过全局（多个建议器中查询相同的内容）或者按照单个建议器的格式来。<br><code>field</code>：从<code>field</code>字段中获取候选建议的字段。这是一个必需的选项，需要全局设置或根据建议设置。<br><code>analyzer</code>：用于分析建议文本的分析器。默认为建议字段的搜索分析器。<br><code>size</code>：个建议文本标记返回的最大条目。<br><code>sort</code>：定义如何根据建议文本术语对建议进行排序。它有两个可能的值。<br><code>score</code>，先按分数排序，然后按文档频率排序，再按术语本身排序。<br><code>frequency</code>，首先按文档频率排序，然后按相似性分数排序，然后按术语本身排序。也可以理解为按照流行度排序。<br><code>suggest_mode</code>：控制建议的模式，有3个模式可选择。</p><ul><li><code>missing</code>，仅为不在索引中的建议文本术语提供建议。这是默认值。</li><li><code>popular</code>，仅建议在比原始建议文本术语更多的文档中出现的建议。也就是说提供比原有输入词频更高的词条</li><li><code>always</code>，根据建议文本中的条款建议任何匹配的建议。说白了就是无论如何都会提供建议。</li></ul><p><code>lowercase_terms</code>：在文本分析之后降低建议文本术语的大小写。<br><code>min_word_length</code>：建议文本术语必须具有的最小长度才能包含在内。默认为4.（旧名称<code>min_word_len</code>已弃用）。<br><code>shard_size</code>：设置从每个单独分片中检索的最大建议数。在减少阶段，仅根据<code>size</code>选项返回前N个建议。默认为该 <code>size</code>选项。将此值设置为高于该值的值<code>size</code>可能非常有用，以便以性能为代价获得更准确的拼写更正文档频率。由于术语在分片之间被划分，因此拼写校正频率的分片级文档可能不准确。增加这些将使这些文档频率更精确。<br><code>max_inspections</code>：用于乘以的因子， <code>shards_size</code>以便在碎片级别上检查更多候选拼写更正。可以以性能为代价提高准确性。默认为5。<br><code>string_distance</code>：用于比较类似建议术语的字符串距离实现。<br><code>internal</code>，默认值基于<code>damerau_levenshtein</code>，但高度优化用于比较索引中术语的字符串距离。<br><code>damerau_levenshtein</code>，基于<code>Damerau-Levenshtein</code>算法的字符串距离算法。<br><code>levenshtein</code>，基于<code>Levenshtein</code>编辑距离算法的字符串距离算法。<br><code>jaro_winkler</code>，基于<code>Jaro-Winkler</code>算法的字符串距离算法。<br><code>ngram</code>，基于字符<code>n-gram</code>的字符串距离算法。</p><p>了解了各字段的大致含义，我们来探讨一下，词条建议器是如何运作的。以便理解如何确定哪些建议将成为第一名。</p><h4 id="选择哪些词条被建议">选择哪些词条被建议</h4><p>词条建议器使用了<code>Lucene</code>的错拼检查器模块，该模块会根据给定词条的<strong>编辑距离</strong>（es使用了叫做Levenstein edit distance的算法，其核心思想就是一个词改动多少字符就可以和另外一个词一致），从索引中返回最大编辑距离不超过某个值的那些词条。比如说为了从<code>mik</code>得到<code>mick</code>，需要加入一个字母（也就是说需要至少要改动一次），所以这两个词的编辑距离就是1。我们可以通过配置一系列的选项，来均衡灵活和性能：</p><ul><li>max_edits：最大编辑距离候选建议可以具有以便被视为建议。只能是介于1和2之间的值。任何其他值都会导致抛出错误的请求错误。默认为2。</li><li>prefix_length：必须匹配的最小前缀字符的数量才是候选建议。默认为1.增加此数字可提高拼写检查性能。通常拼写错误不会出现在术语的开头。（旧名<code>prefix_len</code>已弃用）。</li><li>min_doc_freq：建议应出现的文档数量的最小阈值。可以指定为绝对数字或文档数量的相对百分比。这可以仅通过建议高频项来提高质量。默认为0f且未启用。如果指定的值大于1，则该数字不能是小数。分片级文档频率用于此选项。</li><li>max_term_freq：建议文本令牌可以存在的文档数量的最大阈值，以便包括在内。可以是表示文档频率的相对百分比数（例如0.4）或绝对数。如果指定的值大于1，则不能指定小数。默认为0.01f。这可用于排除高频术语的拼写检查。高频术语通常拼写正确，这也提高了拼写检查的性能。分片级文档频率用于此选项。</li></ul><p>小结，<code>term suggester</code>首先将输入文本经过分析器（所以，分析结果由于采用的分析器不同而有所不同）分析，处理为单个词条，然后根据单个词条去提供建议，并不会考虑多个词条之间的关系。然后将每个词条的建议结果（有或没有）封装到<code>options</code>列表中。最后由建议器统一返回。</p><h3 id="词组建议器（phrase-suggester）">词组建议器（<code>phrase suggester</code>）</h3><p>词组建议器和词条建议器一样，不过它不再为单个词条提供建议，而是为整个文本提供建议。</p><p><strong>测试数据：创建索引，创建文档。</strong></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">PUT s4</span><br><span class="line">{</span><br><span class="line">  "mappings": {</span><br><span class="line">    "doc": {</span><br><span class="line">      "properties": {</span><br><span class="line">        "title": {</span><br><span class="line">          "type": "text",</span><br><span class="line">          "analyzer": "standard"</span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">PUT s4/doc/1</span><br><span class="line">{</span><br><span class="line">  "title": "Lucene is cool"</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">PUT s4/doc/2</span><br><span class="line">{</span><br><span class="line">  "title": "Elasticsearch builds on top of lucene"</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">PUT s4/doc/3</span><br><span class="line">{</span><br><span class="line">  "title": "Elasticsearch rocks"</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">PUT s4/doc/4</span><br><span class="line">{</span><br><span class="line">  "title": "Elastic is the company behind ELK stack"</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">PUT s4/doc/5</span><br><span class="line">{</span><br><span class="line">  "title": "elk rocks"</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">PUT s4/doc/6</span><br><span class="line">{</span><br><span class="line">  "title": "elasticsearch is rock solid"</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>查询</strong></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET s4/doc/_search</span><br><span class="line">{</span><br><span class="line">  "suggest": {</span><br><span class="line">    "my_s4": {</span><br><span class="line">      "text": "lucne and elasticsear rock",</span><br><span class="line">      "phrase": {</span><br><span class="line">        "field": "title"</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><code>text</code>是输入带有拼错的文本。而建议类型则换成了<code>phrase</code>。来看查询结果：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">  "took" : 6,</span><br><span class="line">  "timed_out" : false,</span><br><span class="line">  "_shards" : {</span><br><span class="line">    "total" : 5,</span><br><span class="line">    "successful" : 5,</span><br><span class="line">    "skipped" : 0,</span><br><span class="line">    "failed" : 0</span><br><span class="line">  },</span><br><span class="line">  "hits" : {</span><br><span class="line">    "total" : 0,</span><br><span class="line">    "max_score" : 0.0,</span><br><span class="line">    "hits" : [ ]</span><br><span class="line">  },</span><br><span class="line">  "suggest" : {</span><br><span class="line">    "my_s4" : [</span><br><span class="line">      {</span><br><span class="line">        "text" : "lucne and elasticsear rock",</span><br><span class="line">        "offset" : 0,</span><br><span class="line">        "length" : 26,</span><br><span class="line">        "options" : [</span><br><span class="line">          {</span><br><span class="line">            "text" : "lucne and elasticsearch rocks",</span><br><span class="line">            "score" : 0.12709484</span><br><span class="line">          },</span><br><span class="line">          {</span><br><span class="line">            "text" : "lucne and elasticsearch rock",</span><br><span class="line">            "score" : 0.10422645</span><br><span class="line">          },</span><br><span class="line">          {</span><br><span class="line">            "text" : "lucne and elasticsear rocks",</span><br><span class="line">            "score" : 0.10036137</span><br><span class="line">          }</span><br><span class="line">        ]</span><br><span class="line">      }</span><br><span class="line">    ]</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>可以看到<code>options</code>直接返回了相关短语列表。虽然<code>lucene</code>建议的并不好。但<code>elasticserch</code>和<code>rock</code>很不错。除此之外，我们还可以使用高亮来向用户展示哪些原有的词条被纠正了。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">GET s4/doc/_search</span><br><span class="line">{</span><br><span class="line">  "suggest": {</span><br><span class="line">    "my_s4": {</span><br><span class="line">      "text": "lucne and elasticsear rock",</span><br><span class="line">      "phrase": {</span><br><span class="line">        "field": "title",</span><br><span class="line">        "highlight":{</span><br><span class="line">          "pre_tag":"&lt;em&gt;",</span><br><span class="line">          "post_tag":"&lt;/em&gt;"</span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>除了默认的，还可以自定义高亮显示：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">GET s4/doc/_search</span><br><span class="line">{</span><br><span class="line">  "suggest": {</span><br><span class="line">    "my_s4": {</span><br><span class="line">      "text": "lucne and elasticsear rock",</span><br><span class="line">      "phrase": {</span><br><span class="line">        "field": "title",</span><br><span class="line">        "highlight":{</span><br><span class="line">          "pre_tag":"&lt;b id='d1' class='t1' style='color:red;font-size:18px;'&gt;",</span><br><span class="line">          "post_tag":"&lt;/b&gt;"</span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>需要注意的是，建议器结果的高亮显示和查询结果高亮显示有些许区别，比如说，这里的自定义标签是<code>pre_tag</code>和<code>post_tag</code>而不是之前如这样的：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">GET s4/doc/_search</span><br><span class="line">{</span><br><span class="line">  "query": {</span><br><span class="line">    "match": {</span><br><span class="line">      "title": "rock"</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  "highlight": {</span><br><span class="line">    "pre_tags": "&lt;b style='color:red'&gt;",</span><br><span class="line">    "post_tags": "&lt;/b&gt;",</span><br><span class="line">    "fields": {</span><br><span class="line">      "title": {}</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><code>phrase suggester</code>在<code>term suggester</code>的基础上，会考虑多个<code>term</code>之间的关系，比如是否同时出现索引的原文中，临近程度，词频等。</p><h3 id="完成建议器（completion-suggester）">完成建议器（<code>completion suggester</code>）</h3><h4 id="前言">前言</h4><p>我们来看一下自动完成的建议器——是一个导航功能，提供自动完成、搜索功能，可以在用户输入时引导用户查看相关结果，从而提高搜索精度。<br>但并不适用于拼接检查或者像<code>term</code>和<code>phrase</code>建议那样的功能。<br>如果说在2000年左右，自动完成还是很炫酷的功能，那么现在它是必备的了——任何没有自动完成功能的搜索引擎都是很古老的。用户期望一个良好的自动完成来帮助用户实现更快的（特别是移动端）以及更好的（比如输入<code>e</code>，搜索引擎就应该知道用户想要查找的是<code>elasticsearch</code>）搜索。<br>一个优秀的自动完成将降低搜索引擎的负载，特别是在用户有一些快速搜索可用时，也就是直接跳转到主流的搜索结果而无须执行完整的搜索。<br>除此之外，一个优秀的自动完成必须是和快速的、相关的：</p><ul><li>快速是因为它必须在用户不断输入的时候产生建议。</li><li>相关则是用户并不希望建议一个没有搜索结果或者没有用处的结果。<br>那我们依靠之前学过的<code>match_phrase_prefix</code>最左前缀查询来完成该功能，但是这样的查询可能不够快，因为理想的情况下，搜索引擎需要在用户输入下一个字符前返回建议结果。<br>完成建议器和后面的上下文建议器可以帮助用户构建更快的自动完成，它们是基于<code>Lucene</code>的<code>suggest</code>建议模块而构建的，将数据保存在内存中的有限状态转移机中（FST）。FST实际上是一种图。它可以将词条以压缩和易于检索的方式来存储。<br><img src="/img/loading.gif" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200508152415865.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5OTEwMw==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"><br>上图展示了词条<code>index</code>、<code>search</code>、<code>suggest</code>是如何存储的。当然实际中的实现更加复杂，比如它允许我们添加权重。<br>FST（Finite StateTransducers），通常中文译作有限状态传感器，FST目前在语音识别和自然语言搜索、处理等方向被广泛应用。<br>FST的功能更类似于字典，Lucene4.0在查找Term时使用了FST算法，用来快速定位Term的位置。FST的数据结构可以理解成（<code>key:value</code>）的形式。<br>在同义词过滤器（SynonymFilter）的实现中甚至可以用<code>HashMap</code>代替，不过相比较于<code>HashMap</code>，它的优点是：<ul><li>以O(1)的时间复杂度找到key对应的value。</li><li>以字节的方式来存储所有的Term，重复利用Term Index的前缀和后缀，使Term - Index小到可以放进内存，减少存储空间，不过相对的也会占用更多的cpu资源。</li><li>FST还可以用来快速确定term是否在系统中。</li></ul></li></ul><p><strong>测试数据：创建索引，创建文档。</strong><br>为了告诉elasticsearch我们准备将建议存储在自动完成的FST中，需要在映射中定义一个字段并将其type类型设置为completion：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">PUT s5</span><br><span class="line">{</span><br><span class="line">  "mappings":{</span><br><span class="line">    "doc":{</span><br><span class="line">      "properties": {</span><br><span class="line">        "title": {</span><br><span class="line">          "type": "completion",</span><br><span class="line">          "analyzer": "standard"</span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">PUT s5/doc/1</span><br><span class="line">{</span><br><span class="line">  "title":"Lucene is cool"</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">PUT s5/doc/2</span><br><span class="line">{</span><br><span class="line">  "title":"Elasticsearch builds on top of lucene"</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">PUT s5/doc/3</span><br><span class="line">{</span><br><span class="line">  "title":"Elasticsearch rocks"</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">PUT s5/doc/4</span><br><span class="line">{</span><br><span class="line">  "title":"Elastic is the company behind ELK stack"</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">PUT s5/doc/5</span><br><span class="line">{</span><br><span class="line">  "title":"the elk stack rocks"</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">PUT s5/doc/6</span><br><span class="line">{</span><br><span class="line">  "title":"elasticsearch is rock solid"</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">GET s5/doc/_search</span><br><span class="line">{</span><br><span class="line">  "suggest": {</span><br><span class="line">    "my_s5": {</span><br><span class="line">      "text": "elas",</span><br><span class="line">      "completion": {</span><br><span class="line">        "field": "title"</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>建议结果不展示了！<br>上例的特殊映射中，支持以下参数：</p><ul><li>analyzer，要使用的索引分析器，默认为simple。</li><li>search_analyzer，要使用的搜索分析器，默认值为analyzer。</li><li>preserve_separators，保留分隔符，默认为true。 如果您禁用，您可以找到以Foo Fighters开头的字段，如果您建议使用foof。</li><li>preserve_position_increments，启用位置增量，默认为true。如果禁用并使用停用词分析器The Beatles，如果您建议，可以从一个字段开始b。注意：您还可以通过索引两个输入来实现此目的，Beatles并且 The Beatles，如果您能够丰富数据，则无需更改简单的分析器。</li><li>max_input_length，限制单个输入的长度，默认为50UTF-16代码点。此限制仅在索引时使用，以减少每个输入字符串的字符总数，以防止大量输入膨胀基础数据结构。大多数用例不受默认值的影响，因为前缀完成很少超过前缀长于少数几个字符。<br>除此之外，该建议映射还可以定义在已存在索引字段的多字段：</li></ul><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">PUT s6</span><br><span class="line">{</span><br><span class="line">  "mappings": {</span><br><span class="line">    "doc": {</span><br><span class="line">      "properties": {</span><br><span class="line">        "name": {</span><br><span class="line">          "type": "text",</span><br><span class="line">          "fields": {</span><br><span class="line">            "suggest": {</span><br><span class="line">              "type": "completion"</span><br><span class="line">            }</span><br><span class="line">          }</span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">PUT s6/doc/1</span><br><span class="line">{</span><br><span class="line">  "name":"KFC"</span><br><span class="line">}</span><br><span class="line">PUT s6/doc/2</span><br><span class="line">{</span><br><span class="line">  "name":"kfc"</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">GET s6/doc/_search</span><br><span class="line">{</span><br><span class="line">  "suggest": {</span><br><span class="line">    "my_s6": {</span><br><span class="line">      "text": "K",</span><br><span class="line">      "completion": {</span><br><span class="line">        "field": "name.suggest"</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>如上示例中，我们需要索引餐厅这样的地点，而且每个地点的<code>name</code>名称字段添加<code>suggest</code>子字段。<br>上例的查询将肯德基（KFC）和开封菜（kfc）都返回。</p><h4 id="在索引阶段提升相关性">在索引阶段提升相关性</h4><p>在进行普通的索引时，输入的文本在索引和搜索阶段都会被分析，这就是为什么上面的示例会将<code>KFC</code>和<code>kfc</code>都返回了。我们也可以通过<code>analyzer</code>和<code>search_analyzer</code>选项来进一步控制分析过程。如上例我们可以只匹配<code>KFC</code>而不匹配<code>kfc</code>：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">PUT s7</span><br><span class="line">{</span><br><span class="line">  "mappings": {</span><br><span class="line">    "doc": {</span><br><span class="line">      "properties": {</span><br><span class="line">        "name": {</span><br><span class="line">          "type": "text",</span><br><span class="line">          "fields": {</span><br><span class="line">            "suggest": {</span><br><span class="line">              "type": "completion",</span><br><span class="line">              "analyzer":"keyword",</span><br><span class="line">              "search_analyzer":"keyword"</span><br><span class="line">            }</span><br><span class="line">          }</span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">PUT s7/doc/1</span><br><span class="line">{</span><br><span class="line">  "name":"KFC"</span><br><span class="line">}</span><br><span class="line">PUT s7/doc/2</span><br><span class="line">{</span><br><span class="line">  "name":"kfc"</span><br><span class="line">}</span><br><span class="line">GET s7/doc/_search</span><br><span class="line">{</span><br><span class="line">  "suggest": {</span><br><span class="line">    "my_s7": {</span><br><span class="line">      "text": "K",</span><br><span class="line">      "completion": {</span><br><span class="line">        "field": "name.suggest"</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>建议结果如下：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">  "took" : 0,</span><br><span class="line">  "timed_out" : false,</span><br><span class="line">  "_shards" : {</span><br><span class="line">    "total" : 5,</span><br><span class="line">    "successful" : 5,</span><br><span class="line">    "skipped" : 0,</span><br><span class="line">    "failed" : 0</span><br><span class="line">  },</span><br><span class="line">  "hits" : {</span><br><span class="line">    "total" : 0,</span><br><span class="line">    "max_score" : 0.0,</span><br><span class="line">    "hits" : [ ]</span><br><span class="line">  },</span><br><span class="line">  "suggest" : {</span><br><span class="line">    "my_s7" : [</span><br><span class="line">      {</span><br><span class="line">        "text" : "K",</span><br><span class="line">        "offset" : 0,</span><br><span class="line">        "length" : 1,</span><br><span class="line">        "options" : [</span><br><span class="line">          {</span><br><span class="line">            "text" : "KFC",</span><br><span class="line">            "_index" : "s7",</span><br><span class="line">            "_type" : "doc",</span><br><span class="line">            "_id" : "1",</span><br><span class="line">            "_score" : 1.0,</span><br><span class="line">            "_source" : {</span><br><span class="line">              "name" : "KFC"</span><br><span class="line">            }</span><br><span class="line">          }</span><br><span class="line">        ]</span><br><span class="line">      }</span><br><span class="line">    ]</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>上述的建议结果中，只有<code>KFC</code>被返回。更多的细节控制可以搭配不同的分析器来完成。<br>多数的情况下，我们将在单独的字段中、单独的索引中甚至是单独的集群中保存建议。这对于主搜索引擎的性能提升和扩展建议器都是非常有利的。</p><p>除此之外，还可以使用<code>input</code>和可选的<code>weight</code>属性，<code>input</code>是建议查询匹配的预期文本，<code>weight</code>是建议评分方式（也就是权重）。例如：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">PUT s8</span><br><span class="line">{</span><br><span class="line">  "mappings": {</span><br><span class="line">    "doc":{</span><br><span class="line">      "properties":{</span><br><span class="line">        "title":{</span><br><span class="line">          "type": "completion"</span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>添加数据的几种形式：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">PUT s8/doc/1</span><br><span class="line">{</span><br><span class="line">  "title":{</span><br><span class="line">    "input":"blow",</span><br><span class="line">    "weight": 2</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line">PUT s8/doc/2</span><br><span class="line">{</span><br><span class="line">  "title":{</span><br><span class="line">    "input":"block",</span><br><span class="line">    "weight": 3</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>上例分别添加两个建议并设置各自的权重值。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">PUT s8/doc/3</span><br><span class="line">{</span><br><span class="line">  "title": [  </span><br><span class="line">    {</span><br><span class="line">      "input":"appel",</span><br><span class="line">      "weight": 2</span><br><span class="line">    },</span><br><span class="line">    {</span><br><span class="line">      "input":"apple",</span><br><span class="line">      "weight": 3</span><br><span class="line">    }</span><br><span class="line">  ]</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>上例以列表的形式添加建议，设置不同的权重。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">PUT s8/doc/4</span><br><span class="line">{</span><br><span class="line">  "title": ["apple", "appel", "block", "blow"],</span><br><span class="line">  "weght": 32</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>上例是为多个建议设置相同的权重。<br>查询的结果由权重决定：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET s8/doc/_search</span><br><span class="line">{</span><br><span class="line">  "suggest": {</span><br><span class="line">    "my_s8": {</span><br><span class="line">      "text": "app",</span><br><span class="line">      "completion": {</span><br><span class="line">        "field": "title"</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>比如，我们在设置建议的时候，将<code>apple</code>建议的权重<code>weight</code>设置的更高，那么在如上例的查询中，<code>apple</code>将会排在建议的首位。</p><h4 id="在搜索阶段提升相关性">在搜索阶段提升相关性</h4><p>当在运行建议的请求时，可以决定出现哪些建议，就像其他建议器一样，<code>size</code>参数控制返回多少项建议（默认为5项）；还可以通过<code>fuzzy</code>参数设置模糊建议，以对拼写进行容错。当开启模糊建议之后，可以设置下列参数来完成建议：</p><ul><li>fuzziness，可以指定所允许的最大编辑距离。</li><li>min_length，指定什么长度的输入文本可以开启模糊查询。</li><li>prefix_length，假设若干开始的字符是正确的（比如block，如果输入blaw，该字段也认为之前输入的是对的），这样可以通过牺牲灵活性提升性能。<br>这些参数都是在建议的<code>completion</code>对象的下面：</li></ul><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">GET s8/doc/_search</span><br><span class="line">{</span><br><span class="line">  "suggest": {</span><br><span class="line">    "my_s9": {</span><br><span class="line">      "text": "blaw",</span><br><span class="line">      "completion": {</span><br><span class="line">        "field": "title",</span><br><span class="line">        "size": 2,</span><br><span class="line">        "fuzzy": {</span><br><span class="line">          "fuzziness": 2,</span><br><span class="line">          "min_length": 3,</span><br><span class="line">          "prefix_length": 2</span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>结果如下：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">  "took" : 0,</span><br><span class="line">  "timed_out" : false,</span><br><span class="line">  "_shards" : {</span><br><span class="line">    "total" : 5,</span><br><span class="line">    "successful" : 5,</span><br><span class="line">    "skipped" : 0,</span><br><span class="line">    "failed" : 0</span><br><span class="line">  },</span><br><span class="line">  "hits" : {</span><br><span class="line">    "total" : 0,</span><br><span class="line">    "max_score" : 0.0,</span><br><span class="line">    "hits" : [ ]</span><br><span class="line">  },</span><br><span class="line">  "suggest" : {</span><br><span class="line">    "my_s9" : [</span><br><span class="line">      {</span><br><span class="line">        "text" : "blow",</span><br><span class="line">        "offset" : 0,</span><br><span class="line">        "length" : 4,</span><br><span class="line">        "options" : [</span><br><span class="line">          {</span><br><span class="line">            "text" : "block",</span><br><span class="line">            "_index" : "s8",</span><br><span class="line">            "_type" : "doc",</span><br><span class="line">            "_id" : "3",</span><br><span class="line">            "_score" : 6.0,</span><br><span class="line">            "_source" : {</span><br><span class="line">              "title" : {</span><br><span class="line">                "input" : "block",</span><br><span class="line">                "weight" : 3</span><br><span class="line">              }</span><br><span class="line">            }</span><br><span class="line">          },</span><br><span class="line">          {</span><br><span class="line">            "text" : "blow",</span><br><span class="line">            "_index" : "s8",</span><br><span class="line">            "_type" : "doc",</span><br><span class="line">            "_id" : "2",</span><br><span class="line">            "_score" : 4.0,</span><br><span class="line">            "_source" : {</span><br><span class="line">              "title" : {</span><br><span class="line">                "input" : "blow",</span><br><span class="line">                "weight" : 2</span><br><span class="line">              }</span><br><span class="line">            }</span><br><span class="line">          }</span><br><span class="line">        ]</span><br><span class="line">      }</span><br><span class="line">    ]</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="其他">其他</h4><p><code>_source</code><br>为了减少不必要的响应，我们可以对建议结果做一些过滤，比如加上<code>_source</code>：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">GET s8/doc/_search</span><br><span class="line">{</span><br><span class="line">  "suggest": {</span><br><span class="line">    "completion_suggest": {</span><br><span class="line">      "text": "appl",</span><br><span class="line">      "completion": {</span><br><span class="line">        "field": "title"</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  "_source": "title"</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>好吧，虽然我们只有一个字段！</p><p><code>size</code><br>除了<code>_source</code>，我们还可以指定<code>size</code>参数：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">GET s8/doc/_search</span><br><span class="line">{</span><br><span class="line">  "suggest": {</span><br><span class="line">    "completion_suggest": {</span><br><span class="line">      "prefix": "app",</span><br><span class="line">      "completion": {</span><br><span class="line">        "field": "title",</span><br><span class="line">        "size": 1</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  "_source": "title"</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><code>size</code>参数指定返回建议数（默认为5），需要注意的是，<code>size must be positive</code>，也就是说<code>size</code>参数必须是积极的——非0非负数！</p><p><strong>skip_duplicates</strong><br>我们的建议可能是来自不同的文档，这其中就会有一些重复建议项，我们可以通过设置<code>skip_duplicates:true</code>来修改此行为，如果为<code>true</code>则会过滤掉结果中的重复建议文档：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">GET s8/doc/_search</span><br><span class="line">{</span><br><span class="line">  "suggest": {</span><br><span class="line">    "completion_suggest": {</span><br><span class="line">      "prefix": "app",</span><br><span class="line">      "completion": {</span><br><span class="line">        "field": "title",</span><br><span class="line">        "size": 5,</span><br><span class="line">        "skip_duplicates":true</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  "_source": "title"</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>但需要注意的是，该参数设置为<code>true</code>的话，可能会降低搜索速度，因为需要访问更多的建议结果项，才能过滤出来前N个。<br>最后，完成建议器还支持正则表达式查询，这意味着我们可以将前缀表示为正则表达式：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET s5/doc/_search</span><br><span class="line">{</span><br><span class="line">  "suggest": {</span><br><span class="line">    "completion_suggest": {</span><br><span class="line">      "regex": "e[l|e]a",</span><br><span class="line">      "completion": {</span><br><span class="line">        "field": "title"</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> ElasticSearch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ElasticSearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分页器封装</title>
      <link href="/posts/5dd0a337.html"/>
      <url>/posts/5dd0a337.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line">__author__ = <span class="string">'LiuNan'</span></span><br><span class="line">__date__ = <span class="string">'2020/5/5 17:12'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.utils.safestring <span class="keyword">import</span> mark_safe</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 分页器</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pagination</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, request, all_count, per_num=<span class="number">20</span>, max_show=<span class="number">11</span>)</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :param request:跳转需要</span></span><br><span class="line"><span class="string">        :param all_count:数据的总条数</span></span><br><span class="line"><span class="string">        :param per_num:每一个展示多少条</span></span><br><span class="line"><span class="string">        :param max_show:显示的分页按钮个数</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        <span class="comment"># 基本的URL</span></span><br><span class="line">        self.base_url = request.path_info</span><br><span class="line">        <span class="comment"># 当前页码</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.current_page = int(request.GET.get(<span class="string">'page'</span>, <span class="number">1</span>))</span><br><span class="line">            <span class="keyword">if</span> self.current_page &lt;= <span class="number">0</span>:</span><br><span class="line">                self.current_page = <span class="number">1</span></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            self.current_page = <span class="number">1</span></span><br><span class="line">        <span class="comment"># 最多显示的页码数</span></span><br><span class="line">        self.max_show = max_show</span><br><span class="line">        half_show = max_show // <span class="number">2</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 每页显示的数据条数</span></span><br><span class="line">        self.per_num = per_num</span><br><span class="line">        <span class="comment"># 总数据量</span></span><br><span class="line">        self.all_count = all_count</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 总页码数  divmod求商余，下面的total_num是商，more是余数</span></span><br><span class="line">        self.total_num, more = divmod(all_count, per_num)</span><br><span class="line">        <span class="keyword">if</span> more:</span><br><span class="line">            self.total_num += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 总页码数小于最大显示数：显示总页码数</span></span><br><span class="line">        <span class="keyword">if</span> self.total_num &lt;= max_show:</span><br><span class="line">            self.page_start = <span class="number">1</span></span><br><span class="line">            self.page_end = self.total_num</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 总页码数大于最大显示数：最多显示11个</span></span><br><span class="line">            <span class="keyword">if</span> self.current_page &lt;= half_show:</span><br><span class="line">                self.page_start = <span class="number">1</span></span><br><span class="line">                self.page_end = max_show</span><br><span class="line">            <span class="keyword">elif</span> self.current_page + half_show &gt;= self.total_num:</span><br><span class="line">                self.page_end = self.total_num</span><br><span class="line">                self.page_start = self.total_num - max_show + <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                self.page_start = self.current_page - half_show</span><br><span class="line">                self.page_end = self.current_page + half_show</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        :return: 数据的开始索引</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        <span class="keyword">return</span> (self.current_page - <span class="number">1</span>) * self.per_num</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">end</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        :return: 数据的结束索引</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        <span class="keyword">return</span> self.current_page * self.per_num</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show_li</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 存放li标签的列表</span></span><br><span class="line">        html_list = []</span><br><span class="line"></span><br><span class="line">        first_li = <span class="string">'&lt;li&gt;&lt;a href="{}?page=1"&gt;首页&lt;/a&gt;&lt;/li&gt;'</span>.format(self.base_url)  <span class="comment"># get请求</span></span><br><span class="line">        html_list.append(first_li)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.current_page == <span class="number">1</span>:</span><br><span class="line">            prev_li = <span class="string">'&lt;li class="disabled"&gt;&lt;a&gt;上一页&lt;/a&gt;&lt;/li&gt;'</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            prev_li = <span class="string">'&lt;li&gt;&lt;a href="{1}?page={0}"&gt;上一页&lt;/a&gt;&lt;/li&gt;'</span>.format(self.current_page - <span class="number">1</span>, self.base_url)</span><br><span class="line">        html_list.append(prev_li)</span><br><span class="line">        <span class="keyword">for</span> num <span class="keyword">in</span> range(self.page_start, self.page_end + <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> self.current_page == num:</span><br><span class="line">                li_html = <span class="string">'&lt;li class="active"&gt;&lt;a href="{1}?page={0}"&gt;{0}&lt;/a&gt;&lt;/li&gt;'</span>.format(num, self.base_url)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                li_html = <span class="string">'&lt;li&gt;&lt;a href="{1}?page={0}"&gt;{0}&lt;/a&gt;&lt;/li&gt;'</span>.format(num, self.base_url)</span><br><span class="line">            html_list.append(li_html)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.current_page == self.total_num:</span><br><span class="line">            next_li = <span class="string">'&lt;li class="disabled"&gt;&lt;a&gt;下一页&lt;/a&gt;&lt;/li&gt;'</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            next_li = <span class="string">'&lt;li&gt;&lt;a href="{1}?page={0}"&gt;下一页&lt;/a&gt;&lt;/li&gt;'</span>.format(self.current_page + <span class="number">1</span>, self.base_url)</span><br><span class="line">        html_list.append(next_li)</span><br><span class="line"></span><br><span class="line">        last_li = <span class="string">'&lt;li&gt;&lt;a href="{1}?page={0}&gt;尾页&lt;/a&gt;&lt;/li&gt;'</span>.format(self.total_num, self.base_url)</span><br><span class="line">        html_list.append(last_li)</span><br><span class="line">        <span class="keyword">return</span> mark_safe(<span class="string">''</span>.join(html_list))</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>elasticsearch使用Python批量写入数据</title>
      <link href="/posts/201d68ba.html"/>
      <url>/posts/201d68ba.html</url>
      
        <content type="html"><![CDATA[<h2 id="顺序写入100条">顺序写入100条</h2><p>现在我们如果有大量的文档（例如10000000万条文档）需要写入es的某条索引中，该怎么办呢？之前学过的一次插入一条肯定不行：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> elasticsearch <span class="keyword">import</span> Elasticsearch</span><br><span class="line"></span><br><span class="line">es = Elasticsearch()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">timer</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">        start = time.time()</span><br><span class="line">        res = func(*args, **kwargs)</span><br><span class="line">        print(<span class="string">'共耗时约 {:.2f} 秒'</span>.format(time.time() - start))</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@timer</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_data</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">""" 写入数据 """</span></span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> range(<span class="number">100</span>):</span><br><span class="line">        es.index(index=<span class="string">'s2'</span>, doc_type=<span class="string">'doc'</span>, body={<span class="string">'title'</span>: line})</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    create_data()   <span class="comment"># 执行结果大约耗时 7.79 秒</span></span><br></pre></td></tr></tbody></table></figure><p>上例为顺序向es的<code>s2</code>索引（该索引已存在）写入100条文档，而且值也仅是数字。却花费了大约7秒左右，这种速度在大量数据的时候，肯定不行。那怎么办呢？</p><h2 id="批量写入100条">批量写入100条</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> elasticsearch <span class="keyword">import</span> Elasticsearch</span><br><span class="line"><span class="keyword">from</span> elasticsearch <span class="keyword">import</span> helpers</span><br><span class="line"></span><br><span class="line">es = Elasticsearch()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">timer</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">        start = time.time()</span><br><span class="line">        res = func(*args, **kwargs)</span><br><span class="line">        print(<span class="string">'共耗时约 {:.2f} 秒'</span>.format(time.time() - start))</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@timer</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">batch_data</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">""" 批量写入数据 """</span></span><br><span class="line">    action = [{</span><br><span class="line">        <span class="string">"_index"</span>: <span class="string">"s2"</span>,</span><br><span class="line">        <span class="string">"_type"</span>: <span class="string">"doc"</span>,</span><br><span class="line">        <span class="string">"_source"</span>: {</span><br><span class="line">            <span class="string">"title"</span>: i</span><br><span class="line">        }</span><br><span class="line">    } <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10000000</span>)]</span><br><span class="line">    helpers.bulk(es, action)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment"># create_data()</span></span><br><span class="line">    batch_data()  <span class="comment"># MemoryError</span></span><br></pre></td></tr></tbody></table></figure><p>我们通过elasticsearch模块导入<code>helper</code>，通过<code>helper.bulk</code>来批量处理大量的数据。首先我们将所有的数据定义成字典形式，各字段含义如下：</p><ul><li><code>_index</code>对应索引名称，并且该索引必须存在。</li><li><code>_type</code>对应类型名称。</li><li><code>_source</code>对应的字典内，每一篇文档的字段和值，可有有多个字段。</li></ul><p>首先将每一篇文档（组成的字典）都整理成一个大的列表，然后，通过<code>helper.bulk(es, action)</code>将这个列表写入到es对象中。<br>然后，这个程序要执行的话——你就要考虑，这个一千万个元素的列表，是否会把你的内存撑爆（<code>MemoryError</code>）！很可能还没到没到写入es那一步，却因为列表过大导致内存错误而使写入程序崩溃！很不幸，我的程序报错了。此时Python消耗了大量的系统资源，而运行es实例的Java虚拟机却没什么变动。</p><p>解决办法是什么呢？我们可以分批写入，比如我们一次生成长度为一万的列表，再循环着去把一千万的任务完成。这样， Python和Java虚拟机达到负载均衡。<br>下面的示例测试10万条数据分批写入的速度：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> elasticsearch <span class="keyword">import</span> Elasticsearch</span><br><span class="line"><span class="keyword">from</span> elasticsearch <span class="keyword">import</span> helpers</span><br><span class="line"></span><br><span class="line">es = Elasticsearch()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">timer</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">        start = time.time()</span><br><span class="line">        res = func(*args, **kwargs)</span><br><span class="line">        print(<span class="string">'共耗时约 {:.2f} 秒'</span>.format(time.time() - start))</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"><span class="meta">@timer</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">batch_data</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">""" 批量写入数据 """</span></span><br><span class="line">    <span class="comment"># 分批写</span></span><br><span class="line">    <span class="comment"># for i in range(1, 10000001, 10000):</span></span><br><span class="line">    <span class="comment">#     action = [{</span></span><br><span class="line">    <span class="comment">#         "_index": "s2",</span></span><br><span class="line">    <span class="comment">#         "_type": "doc",</span></span><br><span class="line">    <span class="comment">#         "_source": {</span></span><br><span class="line">    <span class="comment">#             "title": k</span></span><br><span class="line">    <span class="comment">#         }</span></span><br><span class="line">    <span class="comment">#     } for k in range(i, i + 10000)]</span></span><br><span class="line">    <span class="comment">#     helpers.bulk(es, action)</span></span><br><span class="line">    <span class="comment"># 使用生成器</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">100001</span>, <span class="number">1000</span>):</span><br><span class="line">        action = ({</span><br><span class="line">            <span class="string">"_index"</span>: <span class="string">"s2"</span>,</span><br><span class="line">            <span class="string">"_type"</span>: <span class="string">"doc"</span>,</span><br><span class="line">            <span class="string">"_source"</span>: {</span><br><span class="line">                <span class="string">"title"</span>: k</span><br><span class="line">            }</span><br><span class="line">        } <span class="keyword">for</span> k <span class="keyword">in</span> range(i, i + <span class="number">1000</span>))</span><br><span class="line">        helpers.bulk(es, action)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment"># create_data()</span></span><br><span class="line">    batch_data()</span><br></pre></td></tr></tbody></table></figure><p>注释的内容是使用列表完成，然后使用生成器完成。结果耗时约93.53 秒。</p><h2 id="一次性写入一千万条">一次性写入一千万条</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> elasticsearch <span class="keyword">import</span> Elasticsearch</span><br><span class="line"><span class="keyword">from</span> elasticsearch <span class="keyword">import</span> helpers</span><br><span class="line"></span><br><span class="line">es = Elasticsearch()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">timer</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">        start = time.time()</span><br><span class="line">        res = func(*args, **kwargs)</span><br><span class="line">        print(<span class="string">'共耗时约 {:.2f} 秒'</span>.format(time.time() - start))</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"><span class="meta">@timer</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gen</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">""" 使用生成器批量写入数据 """</span></span><br><span class="line">    action = ({</span><br><span class="line">        <span class="string">"_index"</span>: <span class="string">"s2"</span>,</span><br><span class="line">        <span class="string">"_type"</span>: <span class="string">"doc"</span>,</span><br><span class="line">        <span class="string">"_source"</span>: {</span><br><span class="line">            <span class="string">"title"</span>: i</span><br><span class="line">        }</span><br><span class="line">    } <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100000</span>))</span><br><span class="line">    helpers.bulk(es, action)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    gen()</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> ElasticSearch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> ElasticSearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python操作es</title>
      <link href="/posts/51d13a3a.html"/>
      <url>/posts/51d13a3a.html</url>
      
        <content type="html"><![CDATA[<h2 id="python连接-es">python连接 es</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># pip install elasticsearch</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> elasticsearch <span class="keyword">import</span> Elasticsearch</span><br><span class="line">es = Elasticsearch() <span class="comment"># 默认连接本地</span></span><br><span class="line">es = Elasticsearch([<span class="string">'127.0.0.1:9200'</span>])  <span class="comment"># 连接本地9200端口</span></span><br><span class="line">es = Elasticsearch(</span><br><span class="line">    [<span class="string">"192.168.1.10"</span>, <span class="string">"192.168.1.11"</span>, <span class="string">"192.168.1.12"</span>], <span class="comment"># 连接集群，以列表的形式存放各节点的IP地址</span></span><br><span class="line">    sniff_on_start=<span class="literal">True</span>,    <span class="comment"># 连接前测试</span></span><br><span class="line">    sniff_on_connection_fail=<span class="literal">True</span>,  <span class="comment"># 节点无响应时刷新节点</span></span><br><span class="line">    sniff_timeout=<span class="number">60</span>    <span class="comment"># 设置超时时间</span></span><br><span class="line">)</span><br><span class="line"><span class="comment"># print(es.ping())</span></span><br></pre></td></tr></tbody></table></figure><h2 id="python操作es">python操作es</h2><h3 id="结果过滤">结果过滤</h3><blockquote><p>对于返回结果做过滤，主要是优化返回内容。</p></blockquote><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查询</span></span><br><span class="line">body = {</span><br><span class="line">    <span class="string">"query"</span>:{</span><br><span class="line">        <span class="string">"match"</span>:{</span><br><span class="line">            <span class="string">"name"</span>:<span class="string">"liunan1"</span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="comment"># 结果过滤</span></span><br><span class="line">print(es.search(index=<span class="string">'l1'</span>,body=body))</span><br><span class="line">print(es.search(index=<span class="string">'l1'</span>,body=body,filter_path=[<span class="string">'hits.hits'</span>])) <span class="comment"># 可对结果进行过滤，挑选自己需要的数据</span></span><br><span class="line">print(es.search(index=<span class="string">'l1'</span>,body=body,filter_path=[<span class="string">'hits.hits._source'</span>,<span class="string">'hits.total'</span>]))</span><br><span class="line">print(es.search(index=<span class="string">'l1'</span>,body=body,filter_path=[<span class="string">'hits.*'</span>]))</span><br></pre></td></tr></tbody></table></figure><p><kbd>filter_path</kbd> 参数用于减少elasticsearch返回的响应，<strong>比如仅返回<code>hits.total</code>和<code>hits.hits._source</code>内容</strong></p><h3 id="es对象">es对象</h3><h4 id="es-index"><strong>es.index</strong></h4><ul><li><strong>向指定索引添加或更新文档，如果索引不存在，首先会创建该索引，然后再执行添加或者更新操作。</strong></li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># print(es.index(index='w2', doc_type='doc', id='4', body={"name":"可可", "age": 18}))    # 正常</span></span><br><span class="line"><span class="comment"># print(es.index(index='w2', doc_type='doc', id=5, body={"name":"卡卡西", "age":22}))     # 正常</span></span><br><span class="line"><span class="comment"># print(es.index(index='w2', id=6, body={"name": "鸣人", "age": 22}))  # 会报错，TypeError: index() missing 1 required positional argument: 'doc_type'</span></span><br><span class="line">print(es.index(index=<span class="string">'w2'</span>, doc_type=<span class="string">'doc'</span>, body={<span class="string">"name"</span>: <span class="string">"鸣人"</span>, <span class="string">"age"</span>: <span class="number">22</span>}))  <span class="comment"># 可以不指定id，默认生成一个id</span></span><br></pre></td></tr></tbody></table></figure><h4 id="es-get">es.get</h4><ul><li><strong>查询索引中指定文档。</strong></li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(es.get(index=<span class="string">'w2'</span>, doc_type=<span class="string">'doc'</span>, id=<span class="number">5</span>))  <span class="comment"># 正常</span></span><br><span class="line">print(es.get(index=<span class="string">'w2'</span>, doc_type=<span class="string">'doc'</span>))  <span class="comment"># TypeError: get() missing 1 required positional argument: 'id'</span></span><br><span class="line">print(es.get(index=<span class="string">'w2'</span>,  id=<span class="number">5</span>))  <span class="comment"># TypeError: get() missing 1 required positional argument: 'doc_type'</span></span><br></pre></td></tr></tbody></table></figure><h4 id="es-search">es.search</h4><ul><li><strong>执行搜索查询并获取与查询匹配的搜索匹配。这个用的最多，可以跟复杂的查询条件。</strong><ul><li><code>index</code>要搜索的以逗号分隔的索引名称列表; 使用_all 或空字符串对所有索引执行操作。</li><li><code>doc_type</code> 要搜索的以逗号分隔的文档类型列表; 留空以对所有类型执行操作。</li><li><code>body</code> 使用Query DSL（QueryDomain Specific Language查询表达式）的搜索定义。</li><li><code>_source</code> 返回<code>_source</code>字段的true或false，或返回的字段列表，返回指定字段。</li><li><code>_source_exclude</code>要从返回的<code>_source</code>字段中排除的字段列表，返回的所有字段中，排除哪些字段。</li><li><code>_source_include</code>从<code>_source</code>字段中提取和返回的字段列表，跟<code>_source</code>差不多。</li></ul></li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">print(es.search(index=<span class="string">'py3'</span>, doc_type=<span class="string">'doc'</span>, body={<span class="string">"query"</span>: {<span class="string">"match"</span>:{<span class="string">"age"</span>: <span class="number">20</span>}}}))  <span class="comment"># 一般查询</span></span><br><span class="line">print(es.search(index=<span class="string">'py3'</span>, doc_type=<span class="string">'doc'</span>, body={<span class="string">"query"</span>: {<span class="string">"match"</span>:{<span class="string">"age"</span>: <span class="number">19</span>}}},_source=[<span class="string">'name'</span>, <span class="string">'age'</span>]))  <span class="comment"># 结果字段过滤</span></span><br><span class="line">print(es.search(index=<span class="string">'py3'</span>, doc_type=<span class="string">'doc'</span>, body={<span class="string">"query"</span>: {<span class="string">"match"</span>:{<span class="string">"age"</span>: <span class="number">19</span>}}},_source_exclude  =[ <span class="string">'age'</span>]))</span><br><span class="line">print(es.search(index=<span class="string">'py3'</span>, doc_type=<span class="string">'doc'</span>, body={<span class="string">"query"</span>: {<span class="string">"match"</span>:{<span class="string">"age"</span>: <span class="number">19</span>}}},_source_include =[ <span class="string">'age'</span>]))</span><br></pre></td></tr></tbody></table></figure><h4 id="es-get-source">es.get_source</h4><ul><li><strong>通过索引、类型和ID获取文档的来源，直接返回想要的字典。</strong></li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(es.get_source(index=<span class="string">'py3'</span>, doc_type=<span class="string">'doc'</span>, id=<span class="string">'1'</span>))  <span class="comment"># {'name': '王五', 'age': 19}</span></span><br></pre></td></tr></tbody></table></figure><h4 id="es-count">es.count</h4><ul><li><strong>执行查询并获取该查询的匹配数。比如查询年龄是18的文档。</strong></li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">body = {</span><br><span class="line">    <span class="string">"query"</span>: {</span><br><span class="line">        <span class="string">"match"</span>: {</span><br><span class="line">            <span class="string">"age"</span>: <span class="number">18</span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line">print(es.count(index=<span class="string">'py2'</span>, doc_type=<span class="string">'doc'</span>, body=body))  <span class="comment"># {'count': 1, '_shards': {'total': 5, 'successful': 5, 'skipped': 0, 'failed': 0}}</span></span><br><span class="line">print(es.count(index=<span class="string">'py2'</span>, doc_type=<span class="string">'doc'</span>, body=body)[<span class="string">'count'</span>])  <span class="comment"># 1</span></span><br><span class="line">print(es.count(index=<span class="string">'w2'</span>))  <span class="comment"># {'count': 6, '_shards': {'total': 5, 'successful': 5, 'skipped': 0, 'failed': 0}}</span></span><br><span class="line">print(es.count(index=<span class="string">'w2'</span>, doc_type=<span class="string">'doc'</span>))  <span class="comment"># {'count': 6, '_shards': {'total': 5, 'successful': 5, 'skipped': 0, 'failed': 0}}</span></span><br></pre></td></tr></tbody></table></figure><h4 id="es-create"><strong>es.create</strong></h4><ul><li><strong>创建索引（索引不存在的话）并新增一条数据，索引存在仅新增（只能新增，重复执行会报错）。</strong></li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(es.create(index=<span class="string">'py3'</span>, doc_type=<span class="string">'doc'</span>, id=<span class="string">'1'</span>, body={<span class="string">"name"</span>: <span class="string">'王五'</span>, <span class="string">"age"</span>: <span class="number">20</span>}))</span><br><span class="line">print(es.get(index=<span class="string">'py3'</span>, doc_type=<span class="string">'doc'</span>, id=<span class="string">'3'</span>))</span><br></pre></td></tr></tbody></table></figure><p>在内部，调用了index，等价于：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(es.index(index=<span class="string">'py3'</span>, doc_type=<span class="string">'doc'</span>, id=<span class="string">'4'</span>, body={<span class="string">"name"</span>: <span class="string">"麻子"</span>, <span class="string">"age"</span>: <span class="number">21</span>}))</span><br></pre></td></tr></tbody></table></figure><p>但个人觉得没有index好用！</p><h4 id="es-delete"><strong>es.delete</strong></h4><ul><li><strong>删除指定的文档。比如删除文章id为<code>4</code>的文档，但不能删除索引，如果想要删除索引，还需要es.indices.delete来处理</strong></li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(es.delete(index=<span class="string">'py3'</span>, doc_type=<span class="string">'doc'</span>, id=<span class="string">'4'</span>))</span><br></pre></td></tr></tbody></table></figure><h4 id="es-delete-by-query"><strong>es.delete_by_query</strong></h4><ul><li><strong>删除与查询匹配的所有文档。</strong><ul><li><code>index</code> 要搜索的以逗号分隔的索引名称列表; 使用_all 或空字符串对所有索引执行操作。</li><li><code>doc_type</code> 要搜索的以逗号分隔的文档类型列表; 留空以对所有类型执行操作。</li><li><code>body</code>使用Query DSL的搜索定义。</li></ul></li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(es.delete_by_query(index=<span class="string">'py3'</span>, doc_type=<span class="string">'doc'</span>, body={<span class="string">"query"</span>: {<span class="string">"match"</span>:{<span class="string">"age"</span>: <span class="number">20</span>}}}))</span><br></pre></td></tr></tbody></table></figure><h4 id="es-exists">es.exists</h4><ul><li><strong>查询elasticsearch中是否存在指定的文档，返回一个布尔值。</strong></li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(es.exists(index=<span class="string">'py3'</span>, doc_type=<span class="string">'doc'</span>, id=<span class="string">'1'</span>))</span><br></pre></td></tr></tbody></table></figure><h4 id="es-info"><a href="http://es.info" target="_blank" rel="noopener">es.info</a></h4><ul><li><strong>获取当前集群的基本信息。</strong></li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(es.info())</span><br></pre></td></tr></tbody></table></figure><h4 id="es-ping">es.ping</h4><ul><li><strong>如果群集已启动，则返回True，否则返回False。</strong></li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(es.ping())</span><br></pre></td></tr></tbody></table></figure><h3 id="Indices-索引相关">Indices   (<strong>索引相关</strong>)</h3><h4 id="es-indices-create"><strong>es.indices.create</strong></h4><ul><li>**在Elasticsearch中创建索引，用的最多。**比如创建一个严格模式、有4个字段、并为<code>title</code>字段指定<code>ik_max_word</code>查询粒度的<code>mappings</code>。并应用到<code>py4</code>索引中。这也是常用的创建自定义索引的方式。</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">body = {</span><br><span class="line">    <span class="string">"mappings"</span>: {</span><br><span class="line">        <span class="string">"doc"</span>: {</span><br><span class="line">            <span class="string">"dynamic"</span>: <span class="string">"strict"</span>,</span><br><span class="line">            <span class="string">"properties"</span>: {</span><br><span class="line">                <span class="string">"title"</span>: {</span><br><span class="line">                    <span class="string">"type"</span>: <span class="string">"text"</span>,</span><br><span class="line">                    <span class="string">"analyzer"</span>: <span class="string">"ik_max_word"</span></span><br><span class="line">                },</span><br><span class="line">                <span class="string">"url"</span>: {</span><br><span class="line">                    <span class="string">"type"</span>: <span class="string">"text"</span></span><br><span class="line">                },</span><br><span class="line">                <span class="string">"action_type"</span>: {</span><br><span class="line">                    <span class="string">"type"</span>: <span class="string">"text"</span></span><br><span class="line">                },</span><br><span class="line">                <span class="string">"content"</span>: {</span><br><span class="line">                    <span class="string">"type"</span>: <span class="string">"text"</span></span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line">es.indices.create(<span class="string">'py4'</span>, body=body)</span><br></pre></td></tr></tbody></table></figure><h4 id="es-indices-analyze"><strong>es.indices.analyze</strong></h4><ul><li><strong>返回分词结果。</strong></li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">es.indices.analyze(body={<span class="string">'analyzer'</span>: <span class="string">"ik_max_word"</span>, <span class="string">"text"</span>: <span class="string">"这是一段乱七八糟的测试文本 嘻嘻哈哈  this This is a word “yeah” "</span>})</span><br></pre></td></tr></tbody></table></figure><h4 id="es-indices-delete"><strong>es.indices.delete</strong></h4><ul><li><strong>在Elasticsearch中删除索引</strong></li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(es.indices.delete(index=<span class="string">'py4'</span>))</span><br><span class="line">print(es.indices.delete(index=<span class="string">'w3'</span>))    <span class="comment"># {'acknowledged': True}</span></span><br></pre></td></tr></tbody></table></figure><h4 id="es-indices-put-alias"><strong>es.indices.put_alias</strong></h4><ul><li><strong>为一个或多个索引创建别名，查询多个索引的时候，可以使用这个别名。</strong><ul><li><code>index</code> 别名应指向的逗号分隔的索引名称列表（支持通配符），使用_all对所有索引执行操作。</li><li><code>name</code>要创建或更新的别名的名称。</li><li><code>body</code>别名的设置，例如路由或过滤器。</li></ul></li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(es.indices.put_alias(index=<span class="string">'py4'</span>, name=<span class="string">'py4_alias'</span>))  <span class="comment"># 为单个索引创建别名</span></span><br><span class="line">print(es.indices.put_alias(index=[<span class="string">'py3'</span>, <span class="string">'py2'</span>], name=<span class="string">'py23_alias'</span>))  <span class="comment"># 为多个索引创建同一个别名，联查用</span></span><br></pre></td></tr></tbody></table></figure><h4 id="es-indices-delete-alias"><strong>es.indices.delete_alias</strong></h4><ul><li><strong>删除一个或多个别名</strong></li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(es.indices.delete_alias(index=<span class="string">'alias1'</span>))</span><br><span class="line">print(es.indices.delete_alias(index=[<span class="string">'alias1, alias2'</span>]))</span><br></pre></td></tr></tbody></table></figure><h4 id="es-indices-get-mapping"><strong>es.indices.get_mapping</strong></h4><ul><li><strong>检索索引或索引/类型的映射定义</strong></li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(es.indices.get_mapping(index=<span class="string">'py4'</span>))</span><br></pre></td></tr></tbody></table></figure><h4 id="es-indices-get-settings"><strong>es.indices.get_settings</strong></h4><ul><li><strong>检索一个或多个（或所有）索引的设置</strong></li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(es.indices.get_settings(index=<span class="string">'py4'</span>))</span><br></pre></td></tr></tbody></table></figure><h4 id="es-indices-get"><strong>es.indices.get</strong></h4><ul><li><strong>允许检索有关一个或多个索引的信息。</strong></li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(es.indices.get(index=<span class="string">'py2'</span>))    <span class="comment"># 查询指定索引是否存在</span></span><br><span class="line">print(es.indices.get(index=[<span class="string">'py2'</span>, <span class="string">'py3'</span>]))</span><br></pre></td></tr></tbody></table></figure><h4 id="es-indices-get-alias"><strong>es.indices.get_alias</strong></h4><ul><li><strong>检索一个或多个别名</strong></li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(es.indices.get_alias(index=<span class="string">'py2'</span>))</span><br><span class="line">print(es.indices.get_alias(index=[<span class="string">'py2'</span>, <span class="string">'py3'</span>]))</span><br></pre></td></tr></tbody></table></figure><h4 id="es-indices-get-field-mapping">es.indices.get_field_mapping</h4><ul><li><strong>检索特定字段的映射信息</strong></li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(es.indices.get_field_mapping(fields=<span class="string">'url'</span>, index=<span class="string">'py4'</span>, doc_type=<span class="string">'doc'</span>))</span><br><span class="line">print(es.indices.get_field_mapping(fields=[<span class="string">'url'</span>, <span class="string">'title'</span>], index=<span class="string">'py4'</span>, doc_type=<span class="string">'doc'</span>))</span><br></pre></td></tr></tbody></table></figure><h4 id="小结">小结</h4><ul><li>es.indices.delete_alias，删除特定别名。</li><li>es.indices.exists，返回一个布尔值，指示给定的索引是否存在。</li><li>es.indices.flus，明确的刷新一个或多个索引。</li><li>es.indices.get_field_mapping，检索特定字段的映射。</li><li>es.indices.get_template，按名称检索索引模板。</li><li>es.indices.open，打开一个封闭的索引以使其可用于搜索。</li><li>es.indices.close，关闭索引以从群集中删除它的开销。封闭索引被阻止进行读/写操作。</li><li>es.indices.clear_cache，清除与一个或多个索引关联的所有缓存或特定缓存。</li><li>es.indices.put_alias，为特定索引/索引创建别名。</li><li>es.indices.get_uprade，监控一个或多个索引的升级程度。</li><li>es.indices.put_mapping，注册特定类型的特定映射定义。</li><li>es.indices.put_settings，实时更改特定索引级别设置。</li><li>es.indices.put_template，创建一个索引模板，该模板将自动应用于创建的新索引。</li><li>es.indices.rollove，当现有索引被认为太大或太旧时，翻转索引API将别名转移到新索引。API接受单个别名和条件列表。别名必须仅指向单个索引。如果索引满足指定条件，则创建新索引并切换别名以指向新别名。</li><li>es.indices.segments，提供构建Lucene索引（分片级别）的低级别段信息。</li></ul><h3 id="Cluster-集群相关">Cluster(集群相关)</h3><h4 id="es-cluster-get-settigns">es.cluster.get_settigns</h4><ul><li>获取集群设置</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(es.cluster.get_settings())</span><br></pre></td></tr></tbody></table></figure><h4 id="es-cluster-health">es.cluster.health</h4><ul><li>获取有关群集运行状况的非常简单的状态。</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(es.cluster.health())</span><br></pre></td></tr></tbody></table></figure><h4 id="es-cluster-state">es.cluster.state</h4><ul><li>获取整个集群的综合状态信息。</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(es.cluster.state())</span><br></pre></td></tr></tbody></table></figure><h4 id="es-cluster-stats">es.cluster.stats</h4><ul><li>返回群集的当前节点的信息。</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(es.cluster.stats())</span><br></pre></td></tr></tbody></table></figure><h3 id="Node-节点相关">Node (节点相关)</h3><h4 id="es-nodes-info"><a href="http://es.nodes.info" target="_blank" rel="noopener">es.nodes.info</a></h4><ul><li>返回集群中节点的信息</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(es.nodes.info())  <span class="comment"># 返回所节点</span></span><br><span class="line">print(es.nodes.info(node_id=<span class="string">'node1'</span>))   <span class="comment"># 指定一个节点</span></span><br><span class="line">print(es.nodes.info(node_id=[<span class="string">'node1'</span>, <span class="string">'node2'</span>]))   <span class="comment"># 指定多个节点列表</span></span><br></pre></td></tr></tbody></table></figure><h4 id="es-nodes-stats">es.nodes.stats</h4><ul><li>获取集群中节点统计信息</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(es.nodes.stats())</span><br><span class="line">print(es.nodes.stats(node_id=<span class="string">'node1'</span>))</span><br><span class="line">print(es.nodes.stats(node_id=[<span class="string">'node1'</span>, <span class="string">'node2'</span>]))</span><br></pre></td></tr></tbody></table></figure><h4 id="es-nodes-hot-threads">es.nodes.hot_threads</h4><ul><li>获取指定节点的线程信息</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(es.nodes.hot_threads(node_id=<span class="string">'node1'</span>))</span><br><span class="line">print(es.nodes.hot_threads(node_id=[<span class="string">'node1'</span>, <span class="string">'node2'</span>]))</span><br></pre></td></tr></tbody></table></figure><h4 id="es-nodes-usage">es.nodes.usage</h4><ul><li>获取集群中节点的功能使用信息</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(es.nodes.usage())</span><br><span class="line">print(es.nodes.usage(node_id=<span class="string">'node1'</span>))</span><br><span class="line">print(es.nodes.usage(node_id=[<span class="string">'node1'</span>, <span class="string">'node2'</span>]))</span><br></pre></td></tr></tbody></table></figure><h3 id="Cat-一种查询方式">Cat (一种查询方式)</h3><h4 id="es-cat-aliases">es.cat.aliases</h4><ul><li>返回别名信息。<ul><li><code>name</code>要返回的以逗号分隔的别名列表。</li><li><code>format</code>Accept标头的简短版本，例如json，yaml</li></ul></li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(es.cat.aliases(name=<span class="string">'py23_alias'</span>))</span><br><span class="line">print(es.cat.aliases(name=<span class="string">'py23_alias'</span>, format=<span class="string">'json'</span>))</span><br></pre></td></tr></tbody></table></figure><h4 id="es-cat-allocation">es.cat.allocation</h4><ul><li>返回分片使用情况。</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(es.cat.allocation())</span><br><span class="line">print(es.cat.allocation(node_id=[<span class="string">'node1'</span>]))</span><br><span class="line">print(es.cat.allocation(node_id=[<span class="string">'node1'</span>, <span class="string">'node2'</span>], format=<span class="string">'json'</span>))</span><br></pre></td></tr></tbody></table></figure><h4 id="es-cat-count">es.cat.count</h4><ul><li>Count提供对整个群集或单个索引的文档计数的快速访问。</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(es.cat.count())  <span class="comment"># 集群内的文档总数</span></span><br><span class="line">print(es.cat.count(index=<span class="string">'py3'</span>))  <span class="comment"># 指定索引文档总数</span></span><br><span class="line">print(es.cat.count(index=[<span class="string">'py3'</span>, <span class="string">'py2'</span>], format=<span class="string">'json'</span>))  <span class="comment"># 返回两个索引文档和</span></span><br></pre></td></tr></tbody></table></figure><h4 id="es-cat-fielddata">es.cat.fielddata</h4><ul><li>基于每个节点显示有关当前加载的fielddata的信息。有些数据为了查询效率，会放在内存中，fielddata用来控制哪些数据应该被放在内存中，而这个<code>es.cat.fielddata</code>则查询现在哪些数据在内存中，数据大小等信息。</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(es.cat.fielddata())</span><br><span class="line">print(es.cat.fielddata(format=<span class="string">'json'</span>, bytes=<span class="string">'b'</span>))</span><br></pre></td></tr></tbody></table></figure><p><code>bytes</code>显示字节值的单位，有效选项为：<code>'b'，'k'，'kb'，'m'，'mb'，'g'，'gb'，'t'，'tb' ，'p'，'pb'</code><br><code>format</code>Accept标头的简短版本，例如json，yaml</p><h4 id="es-cat-health">es.cat.health</h4><ul><li>从集群中<code>health</code>里面过滤出简洁的集群健康信息。</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(es.cat.health())</span><br><span class="line">print(es.cat.health(format=<span class="string">'json'</span>))</span><br></pre></td></tr></tbody></table></figure><h4 id="es-cat-help">es.cat.help</h4><ul><li>返回<code>es.cat</code>的帮助信息。</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(es.cat.help())</span><br></pre></td></tr></tbody></table></figure><h4 id="es-cat-indices">es.cat.indices</h4><ul><li>返回索引的信息；也可以使用此命令进行查询集群中有多少索引。</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">print(es.cat.indices())</span><br><span class="line">print(es.cat.indices(index=<span class="string">'py3'</span>))</span><br><span class="line">print(es.cat.indices(index=<span class="string">'py3'</span>, format=<span class="string">'json'</span>))</span><br><span class="line">print(len(es.cat.indices(format=<span class="string">'json'</span>)))  <span class="comment"># 查询集群中有多少索引</span></span><br></pre></td></tr></tbody></table></figure><h4 id="es-cat-master">es.cat.master</h4><ul><li>返回集群中主节点的IP，绑定IP和节点名称。</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(es.cat.master())</span><br><span class="line">print(es.cat.master(format=<span class="string">'json'</span>))</span><br></pre></td></tr></tbody></table></figure><h4 id="es-cat-nodeattrs">es.cat.nodeattrs</h4><ul><li>返回节点的自定义属性。</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(es.cat.nodeattrs())</span><br><span class="line">print(es.cat.nodeattrs(format=<span class="string">'json'</span>))</span><br></pre></td></tr></tbody></table></figure><h4 id="es-cat-nodes">es.cat.nodes</h4><ul><li>返回节点的拓扑，这些信息在查看整个集群时通常很有用，特别是大型集群。我有多少符合条件的节点？</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(es.cat.nodes())</span><br><span class="line">print(es.cat.nodes(format=<span class="string">'json'</span>))</span><br></pre></td></tr></tbody></table></figure><h4 id="es-cat-plugins">es.cat.plugins</h4><ul><li>返回节点的插件信息。</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(es.cat.plugins())</span><br><span class="line">print(es.cat.plugins(format=<span class="string">'json'</span>))</span><br></pre></td></tr></tbody></table></figure><h4 id="es-cat-segments">es.cat.segments</h4><ul><li>返回每个索引的Lucene有关的信息。</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(es.cat.segments())</span><br><span class="line">print(es.cat.segments(index=<span class="string">'py3'</span>))</span><br><span class="line">print(es.cat.segments(index=<span class="string">'py3'</span>, format=<span class="string">'json'</span>))</span><br></pre></td></tr></tbody></table></figure><h4 id="es-cat-shards">es.cat.shards</h4><ul><li>返回哪个节点包含哪些分片的信息。</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(es.cat.shards())</span><br><span class="line">print(es.cat.shards(index=<span class="string">'py3'</span>))</span><br><span class="line">print(es.cat.shards(index=<span class="string">'py3'</span>, format=<span class="string">'json'</span>))</span><br></pre></td></tr></tbody></table></figure><h4 id="es-cat-thread-pool">es.cat.thread_pool</h4><ul><li>获取有关线程池的信息。</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(es.cat.thread_pool())</span><br></pre></td></tr></tbody></table></figure><h3 id="Snapshot-快照相关">Snapshot (快照相关)</h3><ul><li>es.snapshot.create，在存储库中创建快照。<ul><li><code>repository</code> 存储库名称。</li><li><code>snapshot</code>快照名称。</li><li><code>body</code>快照定义。</li></ul></li><li>es.snapshot.delete，从存储库中删除快照。</li><li>es.snapshot.create_repository。注册共享文件系统存储库。</li><li>es.snapshot.delete_repository，删除共享文件系统存储库。</li><li>es.snapshot.get，检索有关快照的信息。</li><li>es.snapshot.get_repository，返回有关已注册存储库的信息。</li><li>es.snapshot.restore，恢复快照。</li><li>es.snapshot.status，返回有关所有当前运行快照的信息。通过指定存储库名称，可以将结果限制为特定存储库。</li><li>es.snapshot.verify_repository，返回成功验证存储库的节点列表，如果验证过程失败，则返回错误消息。</li></ul><h3 id="Task-任务相关">Task (任务相关)</h3><ul><li>es.tasks.get，检索特定任务的信息。</li><li>es.tasks.cancel，取消任务。</li><li>es.tasks.list，任务列表。</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> ElasticSearch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> ElasticSearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ElasticSearch的基本操作</title>
      <link href="/posts/5367c5d9.html"/>
      <url>/posts/5367c5d9.html</url>
      
        <content type="html"><![CDATA[<h2 id="增加">增加</h2><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">PUT index/type/1</span><br><span class="line">{</span><br><span class="line">"name":"your name",</span><br><span class="line">"age":100</span><br><span class="line">"tags":"帅"</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="删除">删除</h2><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">DELETE index # 删除整个索引 等于删除整个数据库</span><br><span class="line">DELETE index/type/1 # 删除某个文档</span><br><span class="line"></span><br><span class="line"># 还可以使用POST删除，不推荐</span><br><span class="line">POST index/type/_delete_by_query?q=name:'xxx'</span><br></pre></td></tr></tbody></table></figure><h2 id="更新">更新</h2><blockquote><p>如果使用 PUT 将会更新整个文档内容</p><p>更新个别字段 需要使用POST</p></blockquote><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">POST index/type/1</span><br><span class="line">{</span><br><span class="line">"name":"new name"</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="查询">查询</h2><blockquote><p>​两种查询方式：</p><ol><li>字符串 query string</li><li>DSL</li></ol></blockquote><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">GET index/type/_search #查询所有</span><br><span class="line">GET index/type/_search</span><br><span class="line">{</span><br><span class="line">"query":{</span><br><span class="line">"match_all":{}</span><br><span class="line">}</span><br><span class="line">}  #查询所有</span><br><span class="line"></span><br><span class="line">GET index/type/_search?q=name:"xxx" # query string 查询</span><br><span class="line"></span><br><span class="line">GET index/type/_search</span><br><span class="line">{</span><br><span class="line">"query":{</span><br><span class="line">"match":{</span><br><span class="line">"name":"xxx"</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">} # DSL查询</span><br></pre></td></tr></tbody></table></figure><h2 id="排序">排序</h2><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET index/type/_search</span><br><span class="line">{</span><br><span class="line">"query":{</span><br><span class="line">"match_all":{}</span><br><span class="line">},</span><br><span class="line">"sort":{</span><br><span class="line">"age":{</span><br><span class="line">"order":"desc" # 还可以是asc，与mysql一样。</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="分页">分页</h2><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">GET index/type/_search</span><br><span class="line">{</span><br><span class="line">"query":{</span><br><span class="line">"match_all":{}</span><br><span class="line">},</span><br><span class="line">"from":0, # 从第一条开始，包含第一条数据</span><br><span class="line">"size":2, # 返回两条</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">GET index/type/_search</span><br><span class="line">{</span><br><span class="line">"query":{</span><br><span class="line">"match_all":{}</span><br><span class="line">},</span><br><span class="line">"from":1, # 从第二条开始，包含第二条数据</span><br><span class="line">"size":2, # 返回两条</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="布尔查询">布尔查询</h2><blockquote><ul><li>should</li><li>must</li><li>must_not</li></ul></blockquote><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 布尔查询:should(or) must(and) must_not(not)</span><br><span class="line"># or</span><br><span class="line">GET index/type/_search</span><br><span class="line">{</span><br><span class="line">  "query": {</span><br><span class="line">    "bool": {</span><br><span class="line">      "should": [</span><br><span class="line">        {</span><br><span class="line">          "match": {</span><br><span class="line">            "name": "liunan5"</span><br><span class="line">          }</span><br><span class="line">        },</span><br><span class="line">        {</span><br><span class="line">          "match": {</span><br><span class="line">            "age": "11"</span><br><span class="line">          }  </span><br><span class="line">        }</span><br><span class="line">      ]</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"># 查询性别是男的，年龄是44的</span><br><span class="line"># and</span><br><span class="line">GET index/type/_search</span><br><span class="line">{</span><br><span class="line">  "query": {</span><br><span class="line">    "bool": {</span><br><span class="line">      "must": [</span><br><span class="line">        {</span><br><span class="line">          "match": {</span><br><span class="line">            "age": 44</span><br><span class="line">          }</span><br><span class="line">        },</span><br><span class="line">        {</span><br><span class="line">          "match": {</span><br><span class="line">            "sex": "男"</span><br><span class="line">          }</span><br><span class="line">        }</span><br><span class="line">      ]</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 查询性别不是男的，年龄也不是55的</span><br><span class="line"># not</span><br><span class="line">GET index/type/_search</span><br><span class="line">{</span><br><span class="line">  "query": {</span><br><span class="line">    "bool": {</span><br><span class="line">      "must_not": [</span><br><span class="line">        {</span><br><span class="line">          "match": {</span><br><span class="line">            "sex": "男"</span><br><span class="line">          }</span><br><span class="line">        },</span><br><span class="line">        {</span><br><span class="line">          "match": {</span><br><span class="line">            "age": 55</span><br><span class="line">          }</span><br><span class="line">        }</span><br><span class="line">      ]</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="比较运算">比较运算</h2><blockquote><p>gt 大于</p><p>gte 大于等于</p><p>lt 小于</p><p>lte 小于等于</p></blockquote><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"># 查询年龄大于20的男的文档</span><br><span class="line">GET index/type/_search</span><br><span class="line">{</span><br><span class="line">  "query": {</span><br><span class="line">    "bool": {</span><br><span class="line">      "must": [</span><br><span class="line">        {</span><br><span class="line">          "match": {</span><br><span class="line">            "sex": "男"</span><br><span class="line">          }</span><br><span class="line">        }</span><br><span class="line">      ],</span><br><span class="line">      "filter": {</span><br><span class="line">        "range": {</span><br><span class="line">          "age": {</span><br><span class="line">            "gt": 22</span><br><span class="line">          }</span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="高亮查询">高亮查询</h2><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"># 查询name是liunan1的文档，并高亮显示关键字</span><br><span class="line">GET index/type/_search</span><br><span class="line">{</span><br><span class="line">  "query": {</span><br><span class="line">    "match": {</span><br><span class="line">      "name": "liunan1"</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  "highlight": {</span><br><span class="line">    "fields": {</span><br><span class="line">      "name": {</span><br><span class="line">        </span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"># 自定义高亮样式</span><br><span class="line">GET index/type/_search</span><br><span class="line">{</span><br><span class="line">  "query": {</span><br><span class="line">    "match": {</span><br><span class="line">      "desc": "厉害"# 关键字查询</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  "highlight": {</span><br><span class="line">    "pre_tags": "<span class="tag">&lt;<span class="name">b</span> <span class="attr">style</span>=<span class="string">'color:red;font-size:20px;'</span>&gt;</span>", # 关键字前面的标签</span><br><span class="line">    "post_tags": "<span class="tag">&lt;/<span class="name">b</span>&gt;</span>", # 关键字后面的标签</span><br><span class="line">    "fields": {</span><br><span class="line">      "desc":{} # 需要高亮显示的字段</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="结果过滤">结果过滤</h2><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">GET index/type/_search</span><br><span class="line">{</span><br><span class="line">  "query": {</span><br><span class="line">    "match": {</span><br><span class="line">      "name": "liunan1"</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  "_source": ["name","age"]# 过滤</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="聚合查询">聚合查询</h2><blockquote><ul><li>SUM</li><li>MAX</li><li>MIN</li><li>AVG</li></ul></blockquote><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"># sum 查询所有的男生年龄和</span><br><span class="line">GET index/type/_search</span><br><span class="line">{</span><br><span class="line">  "query": {</span><br><span class="line">    "match": {</span><br><span class="line">      "sex": "男"</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  "aggs": {</span><br><span class="line">    "my_sum": {</span><br><span class="line">      "sum": {</span><br><span class="line">        "field": "age"</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># max 查询最大的男生的年龄 </span><br><span class="line">GET index/type/_search</span><br><span class="line">{</span><br><span class="line">  "query": {</span><br><span class="line">    "match": {</span><br><span class="line">      "sex": "男"</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  "aggs": {</span><br><span class="line">    "my_max": {</span><br><span class="line">      "max": {</span><br><span class="line">        "field": "age"</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># min 查询最小的男生的年龄 </span><br><span class="line">GET index/type/_search</span><br><span class="line">{</span><br><span class="line">  "query": {</span><br><span class="line">    "match": {</span><br><span class="line">      "sex": "男"</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  "aggs": {</span><br><span class="line">    "my_min": {</span><br><span class="line">      "min": {</span><br><span class="line">        "field": "age"</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># avg 查询所有人的平均年龄</span><br><span class="line">GET index/type/_search</span><br><span class="line">{</span><br><span class="line">  "aggs": {</span><br><span class="line">    "my_avg": {</span><br><span class="line">      "avg": {</span><br><span class="line">        "field": "age"</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="分组">分组</h2><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"># 年龄10-20，20-30,30-100分组</span><br><span class="line">GET index/type/_search</span><br><span class="line">{</span><br><span class="line">  "query": {</span><br><span class="line">    "match": {</span><br><span class="line">      "sex": "男"</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  "aggs": {</span><br><span class="line">    "my_group": {</span><br><span class="line">      "range": {</span><br><span class="line">        "field": "age",</span><br><span class="line">        "ranges": [</span><br><span class="line">          {</span><br><span class="line">            "from": 10,</span><br><span class="line">            "to": 20</span><br><span class="line">          },</span><br><span class="line">          {</span><br><span class="line">            "from": 20,</span><br><span class="line">            "to": 30</span><br><span class="line">          },</span><br><span class="line">          {</span><br><span class="line">            "from": 30,</span><br><span class="line">            "to": 100</span><br><span class="line">          }</span><br><span class="line">        ]</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="分组后聚合">分组后聚合</h2><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"># 分组，年龄10-20，20-30,30-100分组</span><br><span class="line"># 对每组年龄求和</span><br><span class="line">GET index/type/_search</span><br><span class="line">{</span><br><span class="line">  "aggs": {</span><br><span class="line">    "my_group": {</span><br><span class="line">      "range": {</span><br><span class="line">        "field": "age",</span><br><span class="line">        "ranges": [</span><br><span class="line">          {</span><br><span class="line">            "from": 10,</span><br><span class="line">            "to": 20</span><br><span class="line">          },</span><br><span class="line">          {</span><br><span class="line">            "from": 20,</span><br><span class="line">            "to": 30</span><br><span class="line">          },</span><br><span class="line">          {</span><br><span class="line">            "from": 30,</span><br><span class="line">            "to": 100</span><br><span class="line">          }</span><br><span class="line">        ]</span><br><span class="line">      },</span><br><span class="line">      "aggs": {</span><br><span class="line">        "my_sum": {</span><br><span class="line">          "sum": {</span><br><span class="line">            "field": "age"</span><br><span class="line">          }</span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="mapping映射">mapping映射</h2><blockquote><p>用 dynamic 来设置 . 有三种映射类型:</p><ul><li>dynamic : true</li><li>dynamic : false</li><li>dynamic : strict</li></ul><p>true : 默认的映射类型,不需要手动设置,  当向文档里添加了新字段时,会自动为该自动添加映射关系</p><p>false : 当 dynamic 设置为 false 时, <strong>可以</strong>向文档里添加新字段 , 但是不会为添加的新字段建立映射关系. 新字段无法作为查询条件进行查询(查询也没有结果) , 新增的字段只能当作伴随字段 随查询结果一起返回.</p><p>strict : 当 dynamic 设置为 strict 时 , <strong>不可以</strong> 向文档里添加新字段 , 添加会 <strong>报错</strong></p></blockquote><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">PUT s4</span><br><span class="line">{</span><br><span class="line">  "mappings": {</span><br><span class="line">    "doc":{</span><br><span class="line">      "dynamic":true,</span><br><span class="line">      "properties":{</span><br><span class="line">        "name":{</span><br><span class="line">          "type":"text"</span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line">GET s4/_mapping</span><br><span class="line"></span><br><span class="line">PUT s5</span><br><span class="line">{</span><br><span class="line">  "mappings": {</span><br><span class="line">    "doc":{</span><br><span class="line">      "dynamic":false,</span><br><span class="line">      "properties":{</span><br><span class="line">        "name":{</span><br><span class="line">          "type":"text"</span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line">GET s5/_mapping</span><br><span class="line"></span><br><span class="line">PUT s6</span><br><span class="line">{</span><br><span class="line">  "mappings": {</span><br><span class="line">    "doc":{</span><br><span class="line">      "dynamic":"strict",</span><br><span class="line">      "properties":{</span><br><span class="line">      "name":{</span><br><span class="line">        "type":"text"</span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line">GET s6/_mapping</span><br></pre></td></tr></tbody></table></figure><h3 id="ignore-above">ignore_above</h3><blockquote><p>超过 ignore_above 设置的字符串将不会被索引 或者 存储 , 对于字符串数组,  ignore_above 将分别应用于每一个数组元素 .</p></blockquote><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">PUT s7</span><br><span class="line">{</span><br><span class="line">  "mappings": {</span><br><span class="line">    "doc":{</span><br><span class="line">      "properties":{</span><br><span class="line">        "title":{</span><br><span class="line">          "type":"keyword",</span><br><span class="line">          "ignore_above":10 # 这里默认是256,可以自己设置</span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="index">index</h3><blockquote><p>index 默认为 true , 如果设置成 false , es则不会为该属性建立索引, 也就是说, 无法当作主查询条件</p></blockquote><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">PUT s8</span><br><span class="line">{</span><br><span class="line">  "mappings": {</span><br><span class="line">    "doc":{</span><br><span class="line">      "properties":{</span><br><span class="line">        "t1":{</span><br><span class="line">          "type":"text",</span><br><span class="line">          "index":true</span><br><span class="line">        },</span><br><span class="line">        "t2":{</span><br><span class="line">          "type":"text",</span><br><span class="line">          "index":false</span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">PUT s8/doc/1</span><br><span class="line">{</span><br><span class="line">  "t1":"好饿",</span><br><span class="line">  "t2":"不是很饿"</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">GET s8/doc/_search</span><br><span class="line">{</span><br><span class="line">  "query": {</span><br><span class="line">    "match": {</span><br><span class="line">      "t1": "饿"</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">GET s8/doc/_search</span><br><span class="line">{</span><br><span class="line">  "query": {</span><br><span class="line">    "match": {</span><br><span class="line">      "t2": "饿" # 报错!</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="copy-to">copy_to</h3><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">PUT s9</span><br><span class="line">{</span><br><span class="line">  "mappings": {</span><br><span class="line">    "doc":{</span><br><span class="line">      "properties":{</span><br><span class="line">        "t1":{</span><br><span class="line">          "type":"text",</span><br><span class="line">          "copy_to":"full_name" # 这里也可以是一个数组["full_name1","full_name2"]</span><br><span class="line">        },</span><br><span class="line">        "t2":{</span><br><span class="line">          "type":"text",</span><br><span class="line">          "copy_to":"full_name"</span><br><span class="line">        },</span><br><span class="line">        "full_name":{</span><br><span class="line">          "type":"text"</span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">PUT s9/doc/1</span><br><span class="line">{</span><br><span class="line">  "t1":"ooo",</span><br><span class="line">  "t2":"xxx"</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">PUT s9/doc/2</span><br><span class="line">{</span><br><span class="line">  "t1":"oooxxx",</span><br><span class="line">  "t2":"xxx"</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">GET s9/doc/_search</span><br><span class="line">{</span><br><span class="line">  "query": {</span><br><span class="line">    "match": {</span><br><span class="line">      "t1": "ooo"</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">GET s9/doc/_search</span><br><span class="line">{</span><br><span class="line">  "query": {</span><br><span class="line">    "match": {</span><br><span class="line">      "full_name": "xxx"</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="对象类型，嵌套">对象类型，嵌套</h3><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">PUT w1</span><br><span class="line">{</span><br><span class="line">  "mappings": {</span><br><span class="line">    "doc":{</span><br><span class="line">      "properties":{</span><br><span class="line">        "name":{</span><br><span class="line">          "type":"text"</span><br><span class="line">        },</span><br><span class="line">        "age":{</span><br><span class="line">          "type":"long"</span><br><span class="line">        },</span><br><span class="line">        "info":{</span><br><span class="line">          "properties":{</span><br><span class="line">            "addr":{</span><br><span class="line">              "type":"text"</span><br><span class="line">            },</span><br><span class="line">            "tel":{</span><br><span class="line">              "type":"long"</span><br><span class="line">            }</span><br><span class="line">          }</span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">PUT w1/doc/1</span><br><span class="line">{</span><br><span class="line">  "name":"liunan",</span><br><span class="line">  "age":19,</span><br><span class="line">  "info":{</span><br><span class="line">    "addr":"北京",</span><br><span class="line">    "tel":110</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">GET w1/doc/_search</span><br><span class="line">{</span><br><span class="line">  "query": {</span><br><span class="line">    "match": {</span><br><span class="line">      "info.addr": "北"</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="settings设置">settings设置</h3><h4 id="设置主，复制分片">设置主，复制分片</h4><blockquote><p>主分片默认是5</p><p>复制分片默认是1</p><p>主分片一经定义不可以修改，复制分片后期可以改。</p></blockquote><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">PUT w2</span><br><span class="line">{</span><br><span class="line">  "mappings": {</span><br><span class="line">    "doc":{</span><br><span class="line">      "properties":{</span><br><span class="line">        "title":{</span><br><span class="line">          "type":"text"</span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }, </span><br><span class="line">  "settings": {</span><br><span class="line">    "number_of_shards": 3,</span><br><span class="line">    "number_of_replicas": 3</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="一个mapping示例">一个mapping示例</h3><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">PUT w3</span><br><span class="line">{</span><br><span class="line">  "mappings": {</span><br><span class="line">    "doc":{</span><br><span class="line">      "properties":{</span><br><span class="line">        "name":{</span><br><span class="line">          "type":"text",</span><br><span class="line">          "index":true</span><br><span class="line">        },</span><br><span class="line">        "age":{</span><br><span class="line">          "type":"long",</span><br><span class="line">          "index":false</span><br><span class="line">        },</span><br><span class="line">        "desc":{</span><br><span class="line">          "type":"keyword",</span><br><span class="line">          "ignore_above":128,</span><br><span class="line">          "copy_to":["t1","t2"]</span><br><span class="line">        },</span><br><span class="line">        "tags":{</span><br><span class="line">          "type":"keyword",</span><br><span class="line">          "index":false,</span><br><span class="line">          "copy_to":["t1","t2"]</span><br><span class="line">        },</span><br><span class="line">        "info":{</span><br><span class="line">          "properties":{</span><br><span class="line">            "addr":{</span><br><span class="line">              "type":"text"</span><br><span class="line">            },</span><br><span class="line">            "tel":{</span><br><span class="line">              "type":"long"</span><br><span class="line">            }</span><br><span class="line">          }</span><br><span class="line">        },</span><br><span class="line">        "t1":{</span><br><span class="line">          "type":"text"</span><br><span class="line">        },</span><br><span class="line">        "t2":{</span><br><span class="line">          "type":"text"</span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  "settings": {</span><br><span class="line">    "number_of_shards": 3,</span><br><span class="line">    "number_of_replicas": 3</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="match-系列">match 系列</h2><h3 id="关键字查询-match">关键字查询 match</h3><ul><li>返回所有匹配的分词</li></ul><blockquote><p>match 查询的是散列映射，包含了我们希望搜索的字段和字符串。</p><p>也就是说，只要文档中 只要有 我们希望的那个关键字 ，就会返回结果。</p><p><strong>关键字会被分词</strong> 之后进行查询</p></blockquote><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET index/type/_search</span><br><span class="line">{</span><br><span class="line">"query":{</span><br><span class="line">"match":{</span><br><span class="line">"name":"xxx"</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">} # DSL查询</span><br></pre></td></tr></tbody></table></figure><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 标准的分析器</span><br><span class="line"># 查看对中国的分析过程</span><br><span class="line">GET _analyze</span><br><span class="line">{</span><br><span class="line">  "analyzer": "standard",</span><br><span class="line">  "text":"中国"</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># 分析结果，发现分析器将 “中国” 分词了</span><br><span class="line">{</span><br><span class="line">  "tokens" : [</span><br><span class="line">    {</span><br><span class="line">      "token" : "中",</span><br><span class="line">      "start_offset" : 0,</span><br><span class="line">      "end_offset" : 1,</span><br><span class="line">      "type" : "<span class="tag">&lt;<span class="name">IDEOGRAPHIC</span>&gt;</span>",</span><br><span class="line">      "position" : 0</span><br><span class="line">    },</span><br><span class="line">    {</span><br><span class="line">      "token" : "国",</span><br><span class="line">      "start_offset" : 1,</span><br><span class="line">      "end_offset" : 2,</span><br><span class="line">      "type" : "<span class="tag">&lt;<span class="name">IDEOGRAPHIC</span>&gt;</span>",</span><br><span class="line">      "position" : 1</span><br><span class="line">    }</span><br><span class="line">  ]</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="查询全部-match-all">查询全部 match_all</h3><ul><li>查询全部</li></ul><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">GET index/type/_search</span><br><span class="line">{</span><br><span class="line">"query":{</span><br><span class="line">"match_all":{}</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="短语查询-match-phrase">短语查询 match_phrase</h3><ul><li>短语查询，在match 的基础上进一步查询词组，可以指定slop分词间隔。</li></ul><blockquote><p>将关键字 作为 短语 进行查询，不会对关键字进行分词后查询。</p></blockquote><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">GET t1/doc/_search</span><br><span class="line">{</span><br><span class="line">  "query": {</span><br><span class="line">    "match_phrase": {</span><br><span class="line">      "title": "中国"</span><br><span class="line">    }</span><br><span class="line">  }  </span><br><span class="line">}</span><br><span class="line"># 这条查询只能查出 完整 包含 “中国” 关键字的结果。</span><br></pre></td></tr></tbody></table></figure><h3 id="短语分割">短语分割</h3><blockquote><p>用slop来分割 短语</p><p>以下语句表示 允许 中国 世界 之间有一个间隔。</p></blockquote><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET t1/doc/_search</span><br><span class="line">{</span><br><span class="line">  "query": {</span><br><span class="line">    "match_phrase": {</span><br><span class="line">      "title": {</span><br><span class="line">        "query": "中国世界",</span><br><span class="line">        "slop": 1</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="最左前缀查询-match-phrase-prefix">最左前缀查询 match_phrase_prefix</h3><ul><li>前缀查询，根据短语中最后一个词组做前缀匹配，可以应用于搜索提示</li></ul><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">PUT t2/doc/1</span><br><span class="line">{</span><br><span class="line">  "title":"beautiful girl"</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">PUT t2/doc/2</span><br><span class="line">{</span><br><span class="line">  "title":"beautiful so"</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">GET t2/doc/_search</span><br><span class="line">{</span><br><span class="line">  "query": {</span><br><span class="line">    "match_phrase_prefix": {</span><br><span class="line">      "title": "so"</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="多字段查询-multi-match">多字段查询 multi_match</h3><ul><li>多字段查询，使用相当灵活，可以完成 match_phrase 和 match_phrase_prefix 的工作。</li></ul><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 多字段联合查询</span><br><span class="line">GET t2/doc/_search</span><br><span class="line">{</span><br><span class="line">  "query": {</span><br><span class="line">    "multi_match": {</span><br><span class="line">      "query": "beautiful",</span><br><span class="line">      "fields": ["t1","t2"]</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">GET t2/doc/_search</span><br><span class="line">{</span><br><span class="line">  "query": {</span><br><span class="line">    "multi_match": {</span><br><span class="line">      "query": "beautiful",</span><br><span class="line">      "fields": ["t1","t2"],</span><br><span class="line">      "type":"phrase"  # 还可以phrase_prefix</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="term与match的区别">term与match的区别</h2><blockquote><p><code>term</code>查询的是没有经过分析的查询关键字，精确的查找倒排索引中指定的词条，不分词，直接查找，区分大小写！一般 <code>term </code>查询是和 <code>keyword</code> 类型的字段结合使用的。</p><p>使用<code>term</code>查询多个精确的值 用 <code>terms</code>，然后将值放在列表里。“terms”:{key": [“beautiful”, “sexy”]}</p></blockquote><blockquote><p><code>match</code>是经过 <code>analyer</code>分析，分词后，再去索引里查询。</p></blockquote><blockquote><p><strong>不要使用<code>term</code>对类型是<code>text</code>的字段进行查询</strong>，要查询<code>text</code>类型的字段，用<code>match</code>查询。如果你用 <code>term</code>查询，除非你记得住全部文本，否则是查询不到任何东西的。</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> ElasticSearch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ElasticSearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx 配置文件详解</title>
      <link href="/posts/a16163a8.html"/>
      <url>/posts/a16163a8.html</url>
      
        <content type="html"><![CDATA[<h2 id="先介绍一下-nginx-conf-文件的结构">先介绍一下 nginx.conf 文件的结构</h2><p><img src="/img/loading.gif" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200418130721538.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5OTEwMw==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"></p><ul><li>main块设置的指令将影响其他所有设置；</li><li>server块的指令主要用于指定主机和端口；</li><li>upstream指令主要用于负载均衡，设置一系列的后端服务器；</li><li>location块用于匹配网页位置。</li></ul><h2 id="这是来自-Nginx官方网站-的一个例子。">这是来自 <a href="http://nginx.org/ru/docs/example.html" target="_blank" rel="noopener">Nginx官方网站</a> 的一个例子。</h2><p><strong>可以先熟悉一下 文件结构，具体配置是干嘛的，下面会讲。</strong></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line">user  username usergroup;</span><br><span class="line"></span><br><span class="line">worker_processes  2;</span><br><span class="line"></span><br><span class="line">pid /var/run/nginx.pid;</span><br><span class="line"></span><br><span class="line"><span class="comment"># [ debug | info | notice | warn | error | crit ]</span></span><br><span class="line"></span><br><span class="line">error_log  /var/<span class="built_in">log</span>/nginx.error_log  info;</span><br><span class="line"></span><br><span class="line">events {</span><br><span class="line">    worker_connections   2000;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># use [ kqueue | epoll | /dev/poll | select | poll ];</span></span><br><span class="line">    use kqueue;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">http {</span><br><span class="line"></span><br><span class="line">    include       conf/mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    log_format main      <span class="string">'$remote_addr - $remote_user [$time_local] '</span></span><br><span class="line">                         <span class="string">'"$request" $status $bytes_sent '</span></span><br><span class="line">                         <span class="string">'"$http_referer" "$http_user_agent" '</span></span><br><span class="line">                         <span class="string">'"$gzip_ratio"'</span>;</span><br><span class="line"></span><br><span class="line">    log_format download  <span class="string">'$remote_addr - $remote_user [$time_local] '</span></span><br><span class="line">                         <span class="string">'"$request" $status $bytes_sent '</span></span><br><span class="line">                         <span class="string">'"$http_referer" "$http_user_agent" '</span></span><br><span class="line">                         <span class="string">'"$http_range" "$sent_http_content_range"'</span>;</span><br><span class="line"></span><br><span class="line">    client_header_timeout  3m;</span><br><span class="line">    client_body_timeout    3m;</span><br><span class="line">    send_timeout           3m;</span><br><span class="line"></span><br><span class="line">    client_header_buffer_size    1k;</span><br><span class="line">    large_client_header_buffers  4 4k;</span><br><span class="line"></span><br><span class="line">    gzip on;</span><br><span class="line">    gzip_min_length  1100;</span><br><span class="line">    gzip_buffers     4 8k;</span><br><span class="line">    gzip_types       text/plain;</span><br><span class="line"></span><br><span class="line">    output_buffers   1 32k;</span><br><span class="line">    postpone_output  1460;</span><br><span class="line"></span><br><span class="line">    sendfile         on;</span><br><span class="line">    tcp_nopush       on;</span><br><span class="line">    tcp_nodelay      on;</span><br><span class="line">    send_lowat       12000;</span><br><span class="line"></span><br><span class="line">    keepalive_timeout  75 20;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#lingering_time     30;</span></span><br><span class="line">    <span class="comment">#lingering_timeout  10;</span></span><br><span class="line">    <span class="comment">#reset_timedout_connection  on;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    server {</span><br><span class="line">        listen        one.example.com;</span><br><span class="line">        server_name   one.example.com  www.one.example.com;</span><br><span class="line"></span><br><span class="line">        access_log   /var/<span class="built_in">log</span>/nginx.access_log  main;</span><br><span class="line"></span><br><span class="line">        location / {</span><br><span class="line">            proxy_pass         http://127.0.0.1/;</span><br><span class="line">            proxy_redirect     off;</span><br><span class="line"></span><br><span class="line">            proxy_set_header   Host             <span class="variable">$host</span>;</span><br><span class="line">            proxy_set_header   X-Real-IP        <span class="variable">$remote_addr</span>;</span><br><span class="line">            <span class="comment">#proxy_set_header  X-Forwarded-For  $proxy_add_x_forwarded_for;</span></span><br><span class="line"></span><br><span class="line">            client_max_body_size       10m;</span><br><span class="line">            client_body_buffer_size    128k;</span><br><span class="line"></span><br><span class="line">            client_body_temp_path      /var/nginx/client_body_temp;</span><br><span class="line"></span><br><span class="line">            proxy_connect_timeout      70;</span><br><span class="line">            proxy_send_timeout         90;</span><br><span class="line">            proxy_read_timeout         90;</span><br><span class="line">            proxy_send_lowat           12000;</span><br><span class="line"></span><br><span class="line">            proxy_buffer_size          4k;</span><br><span class="line">            proxy_buffers              4 32k;</span><br><span class="line">            proxy_busy_buffers_size    64k;</span><br><span class="line">            proxy_temp_file_write_size 64k;</span><br><span class="line"></span><br><span class="line">            proxy_temp_path            /var/nginx/proxy_temp;</span><br><span class="line"></span><br><span class="line">            charset  koi8-r;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        error_page  404  /404.html;</span><br><span class="line"></span><br><span class="line">        location = /404.html {</span><br><span class="line">            root  /spool/www;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        location /old_stuff/ {</span><br><span class="line">            rewrite   ^/old_stuff/(.*)$  /new_stuff/<span class="variable">$1</span>  permanent;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        location /download/ {</span><br><span class="line"></span><br><span class="line">            valid_referers  none  blocked  server_names  *.example.com;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$invalid_referer</span>) {</span><br><span class="line">                <span class="comment">#rewrite   ^/   http://www.example.com/;</span></span><br><span class="line">                <span class="built_in">return</span>   403;</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            <span class="comment">#rewrite_log  on;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># rewrite /download/*/mp3/*.any_ext to /download/*/mp3/*.mp3</span></span><br><span class="line">            rewrite ^/(download/.*)/mp3/(.*)\..*$</span><br><span class="line">                    /<span class="variable">$1</span>/mp3/<span class="variable">$2</span>.mp3                   <span class="built_in">break</span>;</span><br><span class="line"></span><br><span class="line">            root         /spool/www;</span><br><span class="line">            <span class="comment">#autoindex    on;</span></span><br><span class="line">            access_log   /var/<span class="built_in">log</span>/nginx-download.access_log  download;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        location ~* \.(jpg|jpeg|gif)$ {</span><br><span class="line">            root         /spool/www;</span><br><span class="line">            access_log   off;</span><br><span class="line">            expires      30d;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1>配置文件各部分详解</h1><h2 id="main">main</h2><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">user  username usergroup;</span><br><span class="line"></span><br><span class="line">worker_processes  2;</span><br><span class="line"></span><br><span class="line">pid /var/run/nginx.pid;</span><br><span class="line"></span><br><span class="line"><span class="comment"># [ debug | info | notice | warn | error | crit ]</span></span><br><span class="line">error_log  /var/<span class="built_in">log</span>/nginx.error_log  info;</span><br><span class="line"></span><br><span class="line">worker_rlimit_nofile 65535</span><br></pre></td></tr></tbody></table></figure><ol><li>user username usergroup;<br>user是个主模块指令，指定<strong>Nginx Worker</strong>进程运行以及用户组。默认是 nobody 。</li><li>worker_processes<br>Nginx要开启的 <strong>worker</strong> 进程数。每个Nginx进程平均耗费10M~12M内存。建议指定和CPU的数量一致即可。查看你的linux服务器CPU数量 <code>top 然后 按 1</code><br>这里可以设置成具体的数字，也可以设置成 auto 。auto Nginx进程会自动检测你的服务器CPU数量。</li><li>error_log<br>错误日志输出路径，可以指定日志输出级别，debug 输出日志最详细。</li><li>pid<br>指定进程 pid 的存储文件位置。如果不指定，则默认置于路径 logs/nginx.pid。</li><li>worker_rlimit_nofile<br>指定进程可以打开的最多文件描述数目，理论值应该是最多打开文件数（ulimit -n ）与nginx进程数相除，但是Nginx分配请求并不是那么均匀，所以最好与ulimit -n 的值保持一致。<br>现在在Linux2.6 内核下开启文件打开数为65535，worker_rlimit_nofile 就相应应该填写65535.这是因为Nginx调度时请求到进程并不是那么均衡，所以假如填写10240，总并发量达到3-4万时就有进程超过10240了，这就会返回502。</li></ol><h2 id="events">events</h2><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">events {</span><br><span class="line"><span class="comment"># use [ kqueue | epoll | /dev/poll | select | poll ];</span></span><br><span class="line">    use epoll;</span><br><span class="line">    </span><br><span class="line">    worker_connections   2000;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ol><li>use<br>use是事件模块指令，用来指定nginx的工作模式。可选项 select、poll、kqueue、epoll、rtsig和/dev/poll 。其中select 和poll 都是标准的工作模式，kqueue和epoll是高效的工作模式，不同的是epoll用在Linux平台上，而kqueue用在BSD系统中。<strong>对于Linux系统，epoll工作模式是首选。</strong></li><li>worker_connections<br>worker_connections是事件模块指令，用来指定nginx进程的最大连接数，默认是1024.</li></ol><h2 id="http">http</h2><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">http {</span><br><span class="line"></span><br><span class="line">    include       conf/mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    log_format main      <span class="string">'$remote_addr - $remote_user [$time_local] '</span></span><br><span class="line">                         <span class="string">'"$request" $status $bytes_sent '</span></span><br><span class="line">                         <span class="string">'"$http_referer" "$http_user_agent" '</span></span><br><span class="line">                         <span class="string">'"$gzip_ratio"'</span>;</span><br><span class="line"></span><br><span class="line">    log_format download  <span class="string">'$remote_addr - $remote_user [$time_local] '</span></span><br><span class="line">                         <span class="string">'"$request" $status $bytes_sent '</span></span><br><span class="line">                         <span class="string">'"$http_referer" "$http_user_agent" '</span></span><br><span class="line">                         <span class="string">'"$http_range" "$sent_http_content_range"'</span>;</span><br></pre></td></tr></tbody></table></figure><ol><li>include       conf/mime.types;<br>定义MIMI-Type<br>这里需要讲一下 include 指令，主要用于<strong>将其他的Nginx配置或第三方模块的配置引用到当前的主配文件</strong>中，减少主配置文件的复杂度。<br>如果你的服务器上运行多个项目及端口。每一个都在主配文件中配置，会非常多，混乱。这时候，你只需要将每个项目分离出去，写各自项目的nginx配置文件，最后在主配文件中 include 你的配置文件 即可。<br>我在 <a href="https://blog.csdn.net/weixin_43199103/article/details/105565937" target="_blank" rel="noopener">nginx + uwsgi 搭建 Django web 服务</a> 采用了这种方式。</li><li>default_type<br>属于HTTP核心模块指令，这里设定默认类型为二进制流。也就是当文件类型未定义时使用这种方式。</li><li>log_format<br>是Nginx的HttpLog模块指令，用于指定Nginx日志的输出日志。具体可以参考 <a href="https://www.nginx.cn/doc/standard/httplog.html" target="_blank" rel="noopener">HttpLog模块</a></li></ol><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">client_header_timeout  3m;</span><br><span class="line">client_body_timeout    3m;</span><br><span class="line">send_timeout           3m;</span><br><span class="line"></span><br><span class="line">client_header_buffer_size    1k;</span><br><span class="line">large_client_header_buffers  32k;</span><br></pre></td></tr></tbody></table></figure><ol start="4"><li>client_header_timeout<br>设置客户端请求头读取超时时间。如果超过这个时间，客户端还没有发送任何数据，Nginx将返回“Request time out（408）”错误；</li><li>client_body_timeout<br>设置客户端请求主体读取超时时间。如果超过这个时间，客户端还没有发送任何数据，Nginx将返回“Request time out（408）”错误，默认值是60；</li><li>send_timeout<br>指定响应客户端的超时时间。这个超时仅限于两个连接活动之间的时间，如果超过这个时间，客户端没有任何活动，Nginx将会关闭连接。</li><li>client_max_body_size<br>用来设置允许客户端请求的最大的单个文件字节数；</li><li>client_header_buffer_size<br>用于指定来自客户端请求头的headerbuffer大小。对于大多数请求，1K的缓冲区大小已经足够，如果自定义了消息头或有更大的Cookie，可以增加缓冲区大小。这里设置为32K</li></ol><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">gzip on;</span><br><span class="line">gzip_min_length  1100;</span><br><span class="line">gzip_buffers     4 8k;</span><br><span class="line">gzip_types       text/plain;</span><br></pre></td></tr></tbody></table></figure><ol start="9"><li>gzip<br>Nginx的HttpGzip模块。这个模块支持在线实时压缩输出数据流。<br>需要自行安装，查看是否安装gzip模块。已安装的 会有 <code>configure arguments: --with-http_stub_status_module --with-http_gzip_static_module --prefix=/opt/nginx</code> 类似这样的输出。我这里是没有的，我在这里没有安装，我就不安装了。<br><img src="/img/loading.gif" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200418134445298.png"  alt="在这里插入图片描述"></li><li>gzip<br>用于设置开启或者关闭gzip模块，“gzip on”表示开启GZIP压缩，实时压缩输出数据流；</li><li>gzip_min_length<br>设置允许压缩的页面最小字节数，页面字节数从header头的Content-Length中获取。默认值是0，不管页面多大都进行压缩。建议设置成大于1K的字节数，小于1K可能会越压越大；</li><li>gzip_buffers<br>表示申请4个单位为16K的内存作为压缩结果流缓存，默认值是申请与原始数据大小相同的内存空间来存储gzip压缩结果；</li><li>gzip_http_version<br>用于设置识别HTTP协议版本，默认是1.1，目前大部分浏览器已经支持GZIP解压，使用默认即可；</li><li>gzip_comp_level<br>用来指定GZIP压缩比，1 压缩比最小，处理速度最快；9 压缩比最大，传输速度快，但处理最慢，也比较消耗cpu资源；</li><li>gzip_types<br>用来指定压缩的类型，无论是否指定，“text/html”类型总是会被压缩的；</li><li>gzip_vary<br>选项可以让前端的缓存服务器缓存经过GZIP压缩的页面，例如用Squid缓存经过Nginx压缩的数据。</li></ol><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">output_buffers   132k;</span><br><span class="line">postpone_output  1460;</span><br><span class="line"></span><br><span class="line">sendfile         on;</span><br><span class="line">tcp_nopush       on;</span><br><span class="line">tcp_nodelay      on;</span><br><span class="line">send_lowat       12000;</span><br><span class="line"></span><br><span class="line">keepalive_timeout  60;</span><br></pre></td></tr></tbody></table></figure><ol start="17"><li>output_buffers<br>设置从磁盘读取缓冲区响应的数量和大小。如果可能，客户端数据传输将被延迟，直到 Nginx 汇集到适合的数据大小。</li><li>postpone_output</li><li>sendfile    tcp_nopush       tcp_nodelay<br>sendfile 参数用于开启高效文件传输模式。将tcp_nopush和tcp_nodelay两个指令设置为on用于防止网络阻塞；</li><li>send_lowat</li><li>keepalive_timeout<br>置客户端连接保持活动的超时时间。在超过这个时间之后，服务器会关闭该连接；</li></ol><h3 id="upstream">upstream</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">upstream ProjectName{</span><br><span class="line">ip_hash;</span><br><span class="line">server 192.168.8.11:80;</span><br><span class="line">server 192.168.8.12:80 down;</span><br><span class="line">server 192.168.8.13:8009 max_fails=3 fail_timeout=20s;</span><br><span class="line">server 192.168.8.146:8080;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>upstream是Nginx的HTTP Upstream模块，这个模块通过一个简单的调度算法来实现客户端IP到后端服务器的<strong>负载均衡</strong>。<br>在上面的设定中，通过upstream指令指定了一个负载均衡器的名称ProjectName。这个名称可以任意指定，在后面需要的地方直接调用即可。</p><p>Nginx的负载均衡模块目前支持4种调度算法，其中后两项属于第三方的调度方法。</p><blockquote><ul><li><strong>轮询（默认）</strong>：每个请求按时间顺序逐一分配到不同的后端服务器，如果后端某台服务器宕机，故障系统被自动剔除，使用户访问不受影响；</li><li><strong>Weight</strong>：指定轮询权值，Weight值越大，分配到的访问机率越高，主要用于后端每个服务器性能不均的情况下；</li><li><strong>ip_hash</strong>：每个请求按访问IP的hash结果分配，这样来自同一个IP的访客固定访问一个后端服务器，有效解决了动态网页存在的session共享问题；</li><li><strong>fair</strong>：比上面两个更加智能的负载均衡算法。此种算法可以依据页面大小和加载时间长短智能地进行负载均衡，也就是根据后端服务器的响应时间来分配请求，响应时间短的优先分配。Nginx本身是不支持fair的，如果需要使用这种调度算法，必须下载Nginx的upstream_fair模块；</li><li><strong>url_hash</strong>：按访问url的hash结果来分配请求，使每个url定向到同一个后端服务器，可以进一步提高后端缓存服务器的效率。Nginx本身是不支持url_hash的，如果需要使用这种调度算法，必须安装Nginx 的hash软件包。</li></ul></blockquote><p>在HTTP Upstream模块中，可以通过server指令指定后端服务器的IP地址和端口，同时还可以设定每个后端服务器在负载均衡调度中的状态。常用的状态有：</p><blockquote><ul><li><strong>down</strong>：表示当前的server暂时不参与负载均衡；</li><li><strong>backup</strong>：预留的备份机器。当其他所有的非backup机器出现故障或者忙的时候，才会请求backup机器，因此这台机器的压力最轻；</li><li><strong>max_fails</strong>：允许请求失败的次数，默认为1。当超过最大次数时，返回proxy_next_upstream 模块定义的错误；</li><li><strong>fail_timeout</strong>：在经历了max_fails次失败后，暂停服务的时间。max_fails可以和fail_timeout一起使用。</li></ul></blockquote><p>注意，当负载调度算法为ip_hash时，后端服务器在负载均衡调度中的状态不能是weight和backup。</p><h3 id="server">server</h3><p>建议将对虚拟主机进行配置的内容写进另外一个文件，然后通过include指令包含进来，这样更便于维护和管理。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"> server {</span><br><span class="line">        listen        one.example.com;</span><br><span class="line">        server_name   123.4.5.7  www.one.example.com;</span><br><span class="line">        </span><br><span class="line">index index.html;</span><br><span class="line"></span><br><span class="line">root /wwwroot/www.baidu.com</span><br><span class="line"></span><br><span class="line">charset gb2312;</span><br><span class="line"></span><br><span class="line">        access_log   /var/<span class="built_in">log</span>/nginx.access_log  main;</span><br><span class="line">        </span><br><span class="line">        error_page 404 /404.html;</span><br><span class="line">        </span><br><span class="line">error_page 500 502 503 504 /50x.html;</span><br><span class="line"></span><br><span class="line">location = /50x.html {</span><br><span class="line">root html;</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ol><li>listen<br>用于指定虚拟主机的服务端口，</li><li>server_name<br>用来指定IP地址或域名，多个域名之间用空格分开。</li><li>index<br>用于设定访问的默认首页地址.。</li><li>root<br>指令用于指定虚拟主机的网页根目录，这个目录可以是相对路径，也可以是绝对路径。</li><li>charset<br>用于设置网页的默认编码格式。</li><li>access_log<br>用来指定虚拟主机的访问日志存放路径，最后的main 用于指定访问日志的输出格式。</li><li>error_page<br>设置了虚拟主机的错误信息返回页面，通过error_page指令可以定制各种错误信息的返回页面。在默认情况下，Nginx会在主目录的html目录中查找指定的返回页面，特别需要注意的是，这些错误信息的返回页面大小一定要超过512K，否者会被ie浏览器替换为ie默认的错误页面。</li></ol><h5 id="location">location</h5><p>URL地址匹配是进行Nginx配置中最灵活的部分。 location支持正则表达式匹配，也支持条件判断匹配，用户可以通过location指令实现Nginx对动、静态网页进行过滤处理。使用location URL匹配配置还可以实现反向代理，用于实现PHP动态解析或者负载负载均衡。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">location ~* \.(jpg|jpeg|gif)$ {</span><br><span class="line">            root         /spool/www;</span><br><span class="line">            access_log   off;</span><br><span class="line">            expires      30d;</span><br><span class="line">        }</span><br></pre></td></tr></tbody></table></figure><ul><li>所有扩展名以.gif、.jpg、.jpeg、.png、.bmp、.swf结尾的静态文件都交给nginx处理，而expires用来指定静态文件的过期时间，这里是30天。</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">location ~ ^/(upload|html)/ {</span><br><span class="line">root /web/wwwroot/www.baidu.com;</span><br><span class="line">expires 30d;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>将upload和html下的所有文件都交给nginx来处理，当然，upload和html目录包含在/web/wwwroot/www.baidu.com目录中。</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">location ~ .*.php$ {</span><br><span class="line">index index.php;</span><br><span class="line">proxy_pass http://localhost:8080;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>location是对此虚拟主机下动态网页的过滤处理，也就是将所有以.jsp为后缀的文件都交给本机的8080端口处理。</li></ul><p><strong>反向代理相关配置</strong></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">location / {</span><br><span class="line">    proxy_pass         http://127.0.0.1:8000/;</span><br><span class="line">    proxy_redirect     off;</span><br><span class="line"></span><br><span class="line">    proxy_set_header   Host             <span class="variable">$host</span>;</span><br><span class="line">    proxy_set_header   X-Real-IP        <span class="variable">$remote_addr</span>;</span><br><span class="line">    <span class="comment">#proxy_set_header  X-Forwarded-For  $proxy_add_x_forwarded_for;</span></span><br><span class="line"></span><br><span class="line">    client_max_body_size       10m;</span><br><span class="line">    client_body_buffer_size    128k;</span><br><span class="line"></span><br><span class="line">    client_body_temp_path      /var/nginx/client_body_temp;</span><br><span class="line"></span><br><span class="line">    proxy_connect_timeout      70;</span><br><span class="line">    proxy_send_timeout         90;</span><br><span class="line">    proxy_read_timeout         90;</span><br><span class="line">    proxy_send_lowat           12000;</span><br><span class="line"></span><br><span class="line">    proxy_buffer_size          4k;</span><br><span class="line">    proxy_buffers              4 32k;</span><br><span class="line">    proxy_busy_buffers_size    64k;</span><br><span class="line">    proxy_temp_file_write_size 64k;</span><br><span class="line"></span><br><span class="line">    proxy_temp_path            /var/nginx/proxy_temp;</span><br><span class="line"></span><br><span class="line">    charset  koi8-r;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1>参考文档</h1><p><a href="https://www.nginx.cn/doc/index.html" target="_blank" rel="noopener">Nginx中文文档</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>教你逛Github 嘻嘻</title>
      <link href="/posts/975af3ee.html"/>
      <url>/posts/975af3ee.html</url>
      
        <content type="html"><![CDATA[<p>学会以后 你会发现  Github 真的太香了 …<br>你现在怎么使用Github？只是单纯的作为代码托管网站用？那你简直太浪费了。<br>你是怎么在Github上搜索自己需要的项目的？<br>直接输入名字   然后 AllGithub 搜？那你不会瞎吗… 几万个项目出现在你面前  要怎么筛选自己需要的呢？</p><p><strong>精确查找！</strong><br>in:name 关键词</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">in</span>:name Django</span><br></pre></td></tr></tbody></table></figure><p>in:descripton 关键词</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">in</span>:descripton 博客</span><br></pre></td></tr></tbody></table></figure><p>in:readme 关键词</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">in</span>:readme redis</span><br></pre></td></tr></tbody></table></figure><p>stars: &gt; 数字  关键词</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stars:&gt; 100 Django</span><br></pre></td></tr></tbody></table></figure><p>stars: 10…20 关键词</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stars:10..20 Django</span><br></pre></td></tr></tbody></table></figure><p>fork 数同理，将上面的 stars 换成 fork，其它语法相同</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fork :10..20 Django</span><br></pre></td></tr></tbody></table></figure><p>size:&gt;=5000 关键词   这里注意下，这个数字代表 K, 5000 代表着5M。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">size:&gt;=5000 Flask</span><br></pre></td></tr></tbody></table></figure><p>pushed:&gt;date 关键词</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pushed:&gt;2020-01-01 Django</span><br></pre></td></tr></tbody></table></figure><p>language:关键词</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">language:python Flask</span><br></pre></td></tr></tbody></table></figure><p>user:关键词</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user:L1uNan</span><br></pre></td></tr></tbody></table></figure><p>org:关键词    就可以列出具体org 的仓库。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">org:Django</span><br></pre></td></tr></tbody></table></figure><p>多个条件之间空格分隔就行，  关键词里也可以有空格。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
          <category> github </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx + uwsgi 搭建 Django web 服务</title>
      <link href="/posts/c08ad25b.html"/>
      <url>/posts/c08ad25b.html</url>
      
        <content type="html"><![CDATA[<p>可以直接参考 <a href="https://uwsgi-docs-zh.readthedocs.io/zh_CN/latest/tutorials/Django_and_nginx.html?highlight=django" target="_blank" rel="noopener">uwsgi中文文档</a><br>以下内容也是我参考文档，自己实践的一些总结。</p><ol><li><p>创建 虚拟环境  不熟悉的可以参考 <a href="https://blog.csdn.net/weixin_43199103/article/details/105131270" target="_blank" rel="noopener">这篇文章</a></p></li><li><p>在虚拟环境内安装 uwsgi</p> <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install uwsgi</span><br></pre></td></tr></tbody></table></figure><p>pip install uwsgi 之后，运行uwsgi 报错：</p> <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[uwsgi: <span class="built_in">command</span> not found]</span><br></pre></td></tr></tbody></table></figure><p>解决方案：建立软链接  <code>ln -s /usr/local/python3/bin/uwsgi /usr/bin/uwsgi</code></p></li></ol><p><strong>在这一步 可以进行uwsgi的测试，查看是否连接成功，我在这就不做了。<br>需要的移步上面的文档。</strong></p><ol start="3"><li><p>在虚拟环境内 ，安装你的项目所需要的依赖包</p> <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></tbody></table></figure></li><li><p>使用 <code>python3 manage.py runserver 0.0.0.0:8000</code> 看项目是否可以正常启动</p><ol><li>云服务器用户 记得添加安全组 开放自定义端口8000</li><li><code>Invalid HTTP_HOST header: 'xxx.xx.xxx.xxx:8000'. You may need to add 'xxx.xx' to ALLOWED_HOSTS</code><br>如果出现以上错误，修改 django项目的 setting文件 <code>ALLOWED_HOSTS = []改为ALLOWED_HOSTS = ['*']</code></li><li>再次运行  项目应该是可以启动了。但此时  <strong>网页的静态文件并没有正常访问到</strong>。</li></ol></li><li><p>在 4 正常启动的情况下，我们就可以使用 uwsgi启动项目了<br><strong>请在事先 准备好的虚拟环境中运行！！！</strong></p>   <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uwsgi --<span class="built_in">chdir</span> /your/project/ --home /your/virtualenv/ --http :8000 --module mysite.wsgi:application</span><br></pre></td></tr></tbody></table></figure><p>此时 <strong>静态文件还是没有正常访问到</strong>， 稍等解决。</p></li></ol><p><strong>到这里  这个栈  <code>the web client &lt;-&gt; uWSGI &lt;-&gt; Django</code>   工作正常</strong></p><p>=======================================================================</p><ol start="7"><li><p>接下来 要安装 nginx  ，不熟悉的同学可以参考  <a href="https://blog.csdn.net/weixin_43199103/article/details/104250846" target="_blank" rel="noopener">这里</a></p></li><li><p>启动 nginx ，浏览器访问出现下面的画面。<br><img src="/img/loading.gif" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200417103052560.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5OTEwMw==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"></p></li><li><p>在nginx下创建 sites-available 和 sites-enabled 目录</p></li><li><p>在/nginx/nginx.conf配置文件中的http区块添加如下行：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">include ....../nginx/sites-enabled/*;</span><br></pre></td></tr></tbody></table></figure></li><li><p>所有的虚拟主机配置文件放在sites-available目录，然后你可以在sites-enabled目录创建软链接指向sites-available里的配置文件<br><code>ln -s ...nginx/sites-available/xxx.conf  .../nginx/sites-available/xxx.conf</code></p><blockquote><p><strong>使用软连接 要使用 绝对路径</strong></p></blockquote></li><li><p>在sites-available  中创建 mysite_nginx.conf 文件，内容如下：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#mysite_nginx.conf</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#the upstream component nginx needs to connect to</span></span><br><span class="line"><span class="comment">#upstream django {</span></span><br><span class="line">    <span class="comment"># server unix:///path/to/your/mysite/mysite.sock; # for a file socket</span></span><br><span class="line"><span class="comment">#server 127.0.0.1:8001; # for a web port socket (we'll use this first)</span></span><br><span class="line"><span class="comment">#}</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#configuration of the server</span></span><br><span class="line">server {</span><br><span class="line">    <span class="comment"># the port your site will be served on</span></span><br><span class="line">    listen      80;</span><br><span class="line">    <span class="comment"># the domain name it will serve for</span></span><br><span class="line">    server_name mxonline; <span class="comment"># substitute your machine's IP address or FQDN</span></span><br><span class="line">    charset     utf-8;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># max upload size</span></span><br><span class="line">    client_max_body_size 75M;   <span class="comment"># adjust to taste</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Django media</span></span><br><span class="line">    location /media  {</span><br><span class="line">        <span class="built_in">alias</span> /your/project/media;  <span class="comment"># your Django project's media files - amend as required</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    location /static {</span><br><span class="line">        <span class="built_in">alias</span> /your/project/static; <span class="comment"># your Django project's static files - amend as required</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Finally, send all non-media requests to the Django server.</span></span><br><span class="line">    location / {</span><br><span class="line">        uwsgi_pass  127.0.0.1:8001; **这是nginx与uwsgi通信的端口**</span><br><span class="line">        include     /your/project/uwsgi_params; <span class="comment"># the uwsgi_params file you installed</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>由于每次启动 uwsgi 都需要在命令行 指定参数 很麻烦，所以我们可以通过从 ini 文件读取配置启动 uwsgi。<br>在这里需要在 系统环境 安装 uwsgi 添加软连接 到 /usr/bin/  上面讲过了。<br>我在我的项目根目录下 新建了 mysite_uwsgi.ini<br>内容如下：</p></li></ol><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mysite_uwsgi.ini file</span></span><br><span class="line">[uwsgi]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Django-related settings</span></span><br><span class="line"><span class="comment"># the base directory (full path)</span></span><br><span class="line"><span class="built_in">chdir</span>           = /your/project</span><br><span class="line"><span class="comment"># Django's wsgi file</span></span><br><span class="line">module          = ProjectName.wsgi:application</span><br><span class="line"><span class="comment"># the virtualenv (full path)</span></span><br><span class="line">home            = /your/virtualenv</span><br><span class="line"></span><br><span class="line"><span class="comment"># process-related settings</span></span><br><span class="line"><span class="comment"># master</span></span><br><span class="line">master          = <span class="literal">true</span></span><br><span class="line"><span class="comment"># maximum number of worker processes</span></span><br><span class="line">processes       = 4</span><br><span class="line">max-requests    = 5000</span><br><span class="line">harakiri        = 60</span><br><span class="line"><span class="comment"># the socket (use the full path to be safe</span></span><br><span class="line"><span class="comment">#socket          = /your/project/ProjectName.sock</span></span><br><span class="line">socket          = 127.0.0.1:8001</span><br><span class="line">uid             = root</span><br><span class="line">gid             = root</span><br><span class="line"><span class="comment"># ... with appropriate permissions - may be needed</span></span><br><span class="line"><span class="comment"># chmod-socket    = 664</span></span><br><span class="line"><span class="comment"># clear environment on exit</span></span><br><span class="line">vacuum          = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">pidfile         = /your/project/master.pid</span><br><span class="line">daemonize       = /your/project/xxx.log</span><br></pre></td></tr></tbody></table></figure><ol start="14"><li><p>启动 uwsgi  <code>uwsgi --ini /your/project/mysite_uwsgi.ini</code><br><img src="/img/loading.gif" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200417143310577.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5OTEwMw==,size_16,color_FFFFFF,t_70"  alt="15."></p></li><li><p>启动nginx , 启动之前可以通过 -t 查看 nginx 状态<br><img src="/img/loading.gif" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200417143733989.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5OTEwMw==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"></p></li><li><p>到这里  nginx 和 uwsgi 全部启动了  . 在浏览器尝试 输入 ip:80 访问</p></li></ol><h2 id="可能出现的问题">可能出现的问题</h2><ol><li>403  错误<br><img src="/img/loading.gif" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200417144641960.png"  alt="在这里插入图片描述"><br>查看 nginx errors.log 日志 发现<br><img src="/img/loading.gif" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200417144905388.png"  alt="在这里插入图片描述"><br><strong>调查</strong><br><img src="/img/loading.gif" class="lazyload" data-src="https://img-blog.csdnimg.cn/2020041714511978.png"  alt="在这里插入图片描述"><br>1. 发现启动 nginx的用户是nobody<br>2. 修改 nginx.conf 文件 将用户 设置为 root<br><img src="/img/loading.gif" class="lazyload" data-src="https://img-blog.csdnimg.cn/2020041714530377.png"  alt="在这里插入图片描述"></li><li>重启 nginx   ./nginx -s reload</li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
            <tag> nginx </tag>
            
            <tag> uwsgi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ElasticSearch + Kibana 搭建kibana起不来！</title>
      <link href="/posts/9876eec9.html"/>
      <url>/posts/9876eec9.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>环境： 阿里云ecs<br>es 6.5.4<br>kibana 6.5.4</p></blockquote><p>es启动顺利 阿里云开启端口 外网也可以访问到<br><img src="/img/loading.gif" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200416155925592.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5OTEwMw==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"><br><img src="/img/loading.gif" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200416155913605.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5OTEwMw==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"></p><p>！！！！！<br>kibana就是起不来  各种配置文件改  就是起不来！<br>而且没有输出任何信息！就卡在这里<br><img src="/img/loading.gif" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200416160041252.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5OTEwMw==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"><br>在我匪夷所思的处理了三个小时之后！！！！</p><p>我忽然意识到。。。<br><img src="/img/loading.gif" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200416160240711.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5OTEwMw==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"><br>好吧… 贫穷的我 不配在服务器上搞es… 内存几乎满了！<br>kibana当然起不来了，没有容身之地…</p><p>虚拟机搞起…</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> ElasticSearch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ElasticSearch </tag>
            
            <tag> Kibana </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux 下安装 多版本python</title>
      <link href="/posts/703b245.html"/>
      <url>/posts/703b245.html</url>
      
        <content type="html"><![CDATA[<p>阿里云服务器自带的是python2.7<br>想安装其他版本的python该怎么办呢?<br>那么开始吧</p><ol><li><p>安装依赖包</p><p>1）首先安装gcc编译器，gcc有些系统版本已经默认安装，通过  <code>gcc --version</code>  查看，没安装的先安装gcc，<code>yum -y install gcc</code></p><p>2）安装其它依赖包，（注：不要缺少，否则有可能安装python出错，python3.7.0以下的版本可不装 libffi-devel ）</p> <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel libffi-devel</span><br></pre></td></tr></tbody></table></figure></li><li><p>下载源码<br><a href="https://www.python.org/ftp/python/" target="_blank" rel="noopener">https://www.python.org/ftp/python/</a><br><a href="https://www.python.org" target="_blank" rel="noopener">https://www.python.org</a><br>我在这里使用下面命令安装的：</p> <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://www.python.org/ftp/python/3.8.0/Python-3.8.0.tgz</span><br></pre></td></tr></tbody></table></figure><p>(可以把 3.8.0 换成你需要的版本)</p></li><li><p>解压</p> <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf Python-3.8.0.tgz</span><br></pre></td></tr></tbody></table></figure></li><li><p>建立一个空文件夹，用于存放python3程序</p> <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir /usr/<span class="built_in">local</span>/python3</span><br></pre></td></tr></tbody></table></figure></li><li><p>执行配置文件，编译，编译安装</p> <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> Python-3.8.0</span><br><span class="line">./configure --prefix=/usr/<span class="built_in">local</span>/python3</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></tbody></table></figure></li><li><p>建立软连接</p> <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ln -s /usr/<span class="built_in">local</span>/python3/bin/python3.8 /usr/bin/python3</span><br><span class="line">ln -s /usr/<span class="built_in">local</span>/python3/bin/pip3.8 /usr/bin/pip3</span><br></pre></td></tr></tbody></table></figure></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python3.6 + django2.0 集成xadmin</title>
      <link href="/posts/ff7c4151.html"/>
      <url>/posts/ff7c4151.html</url>
      
        <content type="html"><![CDATA[<ol><li><p>从https://github.com/sshwsfc/xadmin/tree/django2下载支持django2版本的xadmin包xadmin-django2.zip，解压后在路径下cmd运行  <code>python setup.py install</code><br><img src="/img/loading.gif" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200408132628673.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5OTEwMw==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"></p></li><li><p>安装 xadmin 依赖</p> <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></tbody></table></figure></li><li><p>配置 <a href="http://setting.py" target="_blank" rel="noopener">setting.py</a> 文件</p> <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">。。。</span><br><span class="line">    <span class="string">'xadmin'</span>,</span><br><span class="line">    <span class="string">'crispy_forms'</span>,</span><br><span class="line">    。。。</span><br><span class="line">]</span><br></pre></td></tr></tbody></table></figure></li><li><p>修改url<br><img src="/img/loading.gif" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200408133022787.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5OTEwMw==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"></p></li><li><p>同步数据库</p> <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python manage.py makemigrations</span><br><span class="line">python manage.py migrate</span><br></pre></td></tr></tbody></table></figure></li></ol><p><a href="https://www.cnblogs.com/zihao1037/p/10972176.html" target="_blank" rel="noopener">https://www.cnblogs.com/zihao1037/p/10972176.html</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django集成xadmin遇到的坑...</title>
      <link href="/posts/34097f63.html"/>
      <url>/posts/34097f63.html</url>
      
        <content type="html"><![CDATA[<p>最近在用django2.0 集成 xadmin 遇到了好多坑…<br>但不得不说 xadmin真的比 admin好看…<br>所以 我这个颜狗 忍了！<br>以下报错 没有先后顺序， 我都是想到哪里就总结到哪里了。希望能帮到你</p><blockquote><p>环境：<br>python3.6<br>django 2.0 <br>xadmin 0.6.5</p></blockquote><ol><li><p><strong>Media’ object has no attribute 'add_js’</strong></p><p>将xadmin的util.py文件下的vendor这个方法改一下。</p> <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">def vendor(*tags):</span><br><span class="line">  css = {<span class="string">'screen'</span>: []}</span><br><span class="line">    js = []</span><br><span class="line">    <span class="keyword">for</span> tag <span class="keyword">in</span> tags:</span><br><span class="line">        file_type = tag.split(<span class="string">'.'</span>)[-1]</span><br><span class="line">        files = xstatic(tag)</span><br><span class="line">        <span class="keyword">if</span> file_type == <span class="string">'js'</span>:</span><br><span class="line">            js.extend(files)</span><br><span class="line">        <span class="keyword">elif</span> file_type == <span class="string">'css'</span>:</span><br><span class="line">            css[<span class="string">'screen'</span>] += files</span><br><span class="line">    <span class="built_in">return</span> Media(css=css, js=js)</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>login() got an unexpected keyword argument 'current_app’</strong><br>进入 website  注释掉61行</p> <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#'current_app': self.admin_site.name,</span></span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>’xxxxField’ object has no attribute 'rel’</strong><br><img src="/img/loading.gif" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200408112128681.png"  alt="在这里插入图片描述"><br>只要是这个类型的报错 都这么改。</p> <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">找到Xadmin报错行，将 field.rel 修改为 field.remote_field</span><br></pre></td></tr></tbody></table></figure></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python安装第三方包 read timeout</title>
      <link href="/posts/c279f0f4.html"/>
      <url>/posts/c279f0f4.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight csharp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip --<span class="keyword">default</span>-timeout=<span class="number">100</span> install 库名称 -i http:<span class="comment">//pypi.douban.com/simple/ --trusted-host pypi.douban.com</span></span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于Restful 和JSON-RPC的 一点理解</title>
      <link href="/posts/f92c9d34.html"/>
      <url>/posts/f92c9d34.html</url>
      
        <content type="html"><![CDATA[<ul><li>REST要求要将接口以资源的形式呈现。但实际上，很多时候都不太可能将一些业务逻辑看作资源。即使强制这么干了，也会非常非常别扭。登录就是登录，而不是“创建一个session”；播放音乐就是播放，而不是“创建一个播放状态“。</li><li>REST只提供了增删改查的基本语义，其他的语义基本上不管。比如批量添加，批量删除，修改一个资源的一部分字段。区分“物理删除”和“标记删除”等等。复杂的查询更加不显示，对于像筛选这类的场景，REST明显就是个渣。这里要表扬一下GraphQL（但GraphQL有其他的问题，在此不展开）</li><li>REST建议用HTTP的status<br>code做错误码，以便于“统一”，实际上这非常难统一。各种业务的含义五花八门，抽象层次高低不齐，根本就无法满足需要。比如一个404到底是代表这个接口找不到，还是代表一个资源找不到。400表达请求有问题，但是我想提示用户“你登录手机号输入的格式不对“，还是“你登录手机号已经被占用了“。既然201表示“created”，为啥deleted和updated没有对应的status<br>code，只能用200或者204（no<br>content）？错误处理是web系统里最麻烦的，最需要细心细致的地方。REST风格在这里只能添乱。</li><li>web请求参数可能散布在url<br>path、querystring、body、header。服务器端处理对此完全没有什么章法。客户端和服务器端的研发之间还是要做约定。</li><li>在url path上的变量会对很多其他的工作带来不良影响。</li></ul><blockquote><p>比如监控，本来url可以作为一个接口的key统计次数/延迟，结果url里出了个变量，所以自动收集nginx的access<br>log，自动做监控项目增加就没法弄了。再比如，想对接口做流量控制的计数，本来url可以做key，因为有变量，就得多费点事才行。</p></blockquote><ul><li>现实中接口要处理的真正的问题，REST基本上也没怎么管。比如认证、授权、流控、数据缓存（http的etag还起了点作用）、超时控制、数据压缩……</li><li>REST有很多好的工具可以便利的生成对应的代码和文档，也容易形成规范。但问题是REST在实际的项目中并没有解决很多问题，也在很多时候不合用，因此产生的代码和文档也就没什么用，必须经过二次加工才能真的用起来。因此可以基于REST+你的业务场景定义一个你自己的规范。</li></ul><p>REST的本意是基于一个<strong>架构的假设</strong>（资源化），定义了一组风格，并基于这个风格形成约定、工具和支持。思路不错。但是因为他的架构假设就是有问题的，因此后续一系列东西都建立在了一个不稳固的基础之上。<br>同时，REST并没有解决太多的实际问题。是，的确，有些时候，用REST完成CRUD已经能完成任务了。此时，用REST没有什么不好的。<br>但是，现实当中，真正的业务领域一般都会比资源的CRUD复杂的多。<br>这时REST“基本上没解决太多实际问题”的缺点就会体现出来。<br>我所见到的大多数情况，是会形成一种REST-like形式的接口，像REST却又不限于REST。为了REST，我看到了太多的人在争执到底是POST还是PUT，到底用querystring还是body，到底用200还是201，到底一个单词应该用单数还是复数，到底一个请求参数应该放在url path的中间一段还是最后一段…… 真正要做的事情本身反而没人关心。<br>现实当中接口的开发的方式你可以总是从REST开始，如果你要开发的东西能被自然而然的想成是一个资源。然后通过相关的工具自动生成一些代码，把这个原型和你的合作者讨论一下。<br>这是我能想到的REST能做的一件很好的事情——快速实验。<br>然后如果你想认真的往下做，就可以彻底忘记REST这件事。开始自己定义业务接口，尽量不要在url里加变量。尽量只用GET和POST，减少一些沟通上的混乱。<br>对于每个接口，好好定义可能发生的业务错误，并与PM一起协商怎么处理这些错误。认真的考虑认证、授权、流控等机制，当你开发的是和钱相关的业务尤其要留意。<br>最后，本文并不是说“绝对不要用REST”，而是：如果你在实际工作中用REST有了困惑，不知道某个情况下REST此时的最佳实践是什么时，不要追求“真正的REST会怎么做”，不要被REST限制住。</p><p>=======<br>restful首先是要求必须把所有的应用定义成为“resource”，然后只能针对资源做有限的四种操作。<br>这是对API一个非常糟糕的抽象，有太多现实中需要的API，无法顺当的融入到restful所定义的规范中。<br>比方说，user login / resetpassword等等。restful的信徒，他们会说可以根据这个那个规范，把login / password等也纳入为某种资源，然后进行增删改查。这在我看来，纯粹是在解决一些原本不存在，根本不需要解决的问题，纯浪费。所有的接口，服务器端原本就存在有相应的函数，它们本来就有自身的命名空间，接受的参数、返回值、异常等等。采用轻便的方式暴露出来即可。<br>无需把一堆函数重新归纳到“资源”，再削减脑袋把所有的操作都映射为“增删改查”。对应到web上，rpc的成熟方案非常多，有古老的soap，也有轻量的json rpc。JSON rpc基本上仅是要求所有的请求必须有msg id，有函数名，然后可定义参数，并且区分返回值与异常；也可定义『命名空间』来对函数模块做划分。这与大多数语言的模块、函数定义相符，使用起来是非常便利的。很多json rpc是供web前端ajax调用，若前端调用抽象得当，调用远程API，实际上与调用本地函数无甚区别。实际上，json rpc也未必需要跟http绑定，即便是在web上，它也可以走web socket，这样子，前端可以使用同一web socket管道批量发送请求，而服务器端乱序返回结果时，前端也可以根据msg id做准确的回调。websocket，批量调用，乱序返回，这些都可以显著提高API的输出吞吐，这些是在json rpc的设计考量内。调用更方便，性能也更好，两全其美是完全可能的。想当然的为了“快”，为了“简单”就必须牺牲别的，这是严重的思维误区。有些方案，纯粹就是糟糕的方案。restful API仅适用与业务非常简单的场景，比方说，就是为了提供少量数据表单的增删改查。而这种场景实在是太过简单，实际中几乎找不到。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>github 显示无效证书  连接超时</title>
      <link href="/posts/a392acea.html"/>
      <url>/posts/a392acea.html</url>
      
        <content type="html"><![CDATA[<p>今天早上pull代码  报错</p><figure class="highlight csharp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">githubdesktopSEC_E_UNTRUSTED_ROOT (<span class="number">0x80090325</span>) - 证书链是由不受信任的颁发机</span><br></pre></td></tr></tbody></table></figure><ol><li>添加证书<br>IE浏览器 - &gt; Internet选项 -&gt; 内容 -&gt; 证书 -&gt; 导入证书<br>我的路径在 <code>C:\Program Files\Git\mingw64\ssl\certs</code><br>两个都导入了</li></ol><p>之后访问 github 不报证书的问题了，连接超时…  额  - -<br>2. 按照下面的方式处理好了<br><a href="https://www.jianshu.com/p/93f0489606a5" target="_blank" rel="noopener">https://www.jianshu.com/p/93f0489606a5</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
          <category> github </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python虚拟环境搭建及管理</title>
      <link href="/posts/1b4aa17f.html"/>
      <url>/posts/1b4aa17f.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://virtualenvwrapper.readthedocs.io/en/latest/command_ref.html" target="_blank" rel="noopener">可以直接参考文档</a></p><h1>Linux下 虚拟环境管理</h1><h2 id="virtualenv安装">virtualenv安装</h2><ol><li>安装 <code>pip install virtualenv</code></li><li>查看是否安装成功 <code>virtualenv  --version</code></li><li>查看帮助 <code>virtualenv --help</code></li></ol><h2 id="virtualenv-使用">virtualenv 使用</h2><ol><li><p>创建一个测试用的虚拟环境</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virtualenv my_test_env -p  python3</span><br></pre></td></tr></tbody></table></figure><blockquote><p><strong>-p</strong> 用来指定python版本 如果python添加了软连接可以像我一样指定，如果没有添加软连接，可以直接定位到python执行文件 /usr/local/python3/bin/python<br><strong>如果创建虚拟环境时不选择指定的python版本, 那么虚拟环境创建后默认就是系统默认的python版本.</strong></p></blockquote></li><li><p>激活虚拟环境</p> <figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd my_test_env</span><br><span class="line">source ./bin/activate</span><br></pre></td></tr></tbody></table></figure></li><li><p>查看虚拟环境python版本，pip版本</p> <figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python -v</span><br><span class="line">pip -v</span><br></pre></td></tr></tbody></table></figure></li><li><p>退出虚拟环境</p> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">deactivate</span><br></pre></td></tr></tbody></table></figure></li><li><p>删除虚拟环境  只需要删除my_test_env 目录即可</p></li></ol><p>如果没有启动虚拟环境，系统环境也安装了pip工具，那么packages将被安装在系统环境</p><blockquote><p>为了避免发生此事，可以在~/.bashrc文件中加上<br>vim ~/.bashrc<br>export PIP_REQUIRE_VIRTUALENV=true   <br>使配置生效 source ~/.bashrc</p></blockquote><p>如果在没开启虚拟环境时, 在虚拟环境之外的系统上运行pip，就会提示错误：“Could not find an activated virtualenv (required)”.</p><h2 id="virtualenv-用法小总结">virtualenv 用法小总结</h2><ol><li><p><strong>创建环境</strong><br>virtualenv [新环境名] :这会再当前目录下创建一个新环境目录<br>可使用 virtualenv --help 来查看如何使用。可以使用参数 --python=/usr/bin/python3 来创建一个已经安装的的Python环境。</p></li><li><p><strong>使用环境</strong><br>切换到项目的新环境目录<br>执行：source ./bin/activate 来激活环境，激活后在命令行的前面会出现新环境名称<br>接下来可使用pip命令安装新环境需要的各种包。（pip命令在创建新环境时自带）</p></li><li><p><strong>退出虚拟环境</strong><br>deactivate<br>如果要删除虚拟环境，只需退出虚拟环境后，删除对应的虚拟环境目录即可。不影响其他环境。</p></li><li><p><strong>注意事项</strong><br>如果没有启动虚拟环境，系统也安装了pip工具，那么套件将被安装在系统环境中，为了避免发生此事，可以在~/.bashrc文件中加上：export PIP_REQUIRE_VIRTUALENV=true<br>或者让在执行pip的时候让系统自动开启虚拟环境：export PIP_REQUIRE_VIRTUALENV=true</p></li><li><p><strong>保证环境一致性</strong><br>用pip freeze查看当前安装版本<br>pip freeze</p></li></ol><p>另外：<br>pip freeze &gt; requirements.txt<br>这将会创建一个 requirements.txt 文件，其中包含了当前环境中所有包及 各自的版本的简单列表。<br>可以使用 "pip list"在不产生requirements文件的情况下， 查看已安装包的列表。</p><p>这将会使另一个不同的开发者（或者是你本人，如果你本人需要重新创建这样的环境） 在以后安装相同版本的相同包变得容易。<br>将这个requirements.txt拷贝到新的机器环境下执行:<br>#pip install -r requirements.txt</p><p><strong>这能帮助确保安装、部署和开发者之间的一致性。</strong></p><h2 id="虚拟环境管理工具-Virtualenvwrapper">虚拟环境管理工具 - Virtualenvwrapper</h2><blockquote><p>virtualenv使用起来不是很方便，因为virtual的启动、停止脚本都在特定目录，可能一段时间后，你可能会有很多个虚拟环境散落在系统各处，你可能忘记它们的名字或者位置。鉴于virtualenv不便于对虚拟环境集中管理，所以推荐直接使用virtualenvwrapper。</p></blockquote><blockquote><p>virtualenvwrapper提供了一系列命令使得和虚拟环境工作变得便利。它把你所有的虚拟环境都放在一个地方。</p></blockquote><blockquote><p>Virtaulenvwrapper是virtualenv的扩展包，用于更方便管理虚拟环境，它可以做：</p><ul><li>将所有虚拟环境整合在一个目录下;</li><li>管理（新增，删除，复制）虚拟环境;</li><li>切换虚拟环境等等.</li></ul></blockquote><ol><li><p>安装virtualenvwrapper   （确保virtualenv已提前安装）</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install virtualenvwrapper</span><br></pre></td></tr></tbody></table></figure></li><li><p>设置环境变量</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> WORKON_HOME=~/Envs</span><br></pre></td></tr></tbody></table></figure></li><li><p>创建虚拟环境管理目录. 即创建的虚拟环境都会放到上面设置的~/Envs目录下面</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p <span class="variable">$WORKON_HOME</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>在~/.bashrc文件里配置环境变量, 添加下面两行</p> <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.bashrc</span><br><span class="line"><span class="built_in">export</span> WORKON_HOME=~/Envs</span><br><span class="line"><span class="built_in">source</span> /usr/bin/virtualenvwrapper.sh</span><br></pre></td></tr></tbody></table></figure></li><li><p>使得以上环境变量的配置生效</p> <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br><span class="line">`</span><br></pre></td></tr></tbody></table></figure></li><li><p>现在开始使用Virtualenvwrapper 管理虚拟机<br>(可以删除上面之前创建的虚拟环境 my_test_env 了, 后续都将使用Virtualenvwrapper创建和管理虚拟环境)</p><ol><li><p>使用mkvirtualenv 命令创建虚拟环境</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkvirtualenv  my_test_env_new --python python3</span><br></pre></td></tr></tbody></table></figure><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkvirtualenv project_hui --python=/usr/<span class="built_in">local</span>/python3/bin/python3.6.1</span><br></pre></td></tr></tbody></table></figure></li><li><p><code>deactivate</code> 退出虚拟环境</p></li><li><p>使用 <code>lsvirtualenv</code> 查看所有虚拟环境</p></li><li><p>使用 <code>workon</code> 切换虚拟环境</p></li><li><p>删除虚拟环境  <code>rmvirtualenv my_test_env_new</code></p></li><li><p>使用<code>lssitepackages</code>命令显示  虚拟环境的 site-packages 目录中的内容。</p></li><li><p>使用<code>cdvirtualenv</code>命令导航到当前激活的虚拟环境的目录中，比如说这样就能够浏览它的site-packages。</p></li><li><p>使用<code>cdsitepackages</code>命令直接进入到 site-packages 目录中, 和上面的cdvirtualenv 类似</p></li><li></li></ol><p>为了方便运维管理, 可以进行一些别名设置, 如下:</p><blockquote><p>vim ~/.bashrc<br>#virtualenv<br>alias vte=‘virtualenv’<br>alias mkvte=‘mkvirtualenv’<br>alias deact=‘deactivate’<br>alias rmvte=‘rmvirtualenv’<br>alias lsvte=‘lsvirtualenv’<br>alias won=‘workon’<br>使得上面配置生效  source ~/.bashrc<br>使用别名进行操作 lsvte</p></blockquote></li></ol><p><strong>virtualenv使用时遇到的一个坑点, 经常排查验证, 得出结论如下:</strong></p><ol><li><p>root用户和普通用户都可以创建虚拟环境(比如虚拟环境名称为venv)，venv虚拟环境的相关文件和文件夹的owner都是该用户，<br>如果是非root的其他用户激活该venv虚拟环境的话，会因为文件权限的问题导致python库安装失败!!<br>所以说: 非root用户不要去激活使用其他用户创建的venv虚拟环境!</p></li><li><p>一旦以用户A的身份激活venv虚拟环境后，在虚拟环境中就不能再通过su命令切换其他用户，否则会自动退出虚拟环境!<br>所以说: 在虚拟环境中不要通过su切换用户!</p></li><li><p>以用户A的身份激活某venv虚拟环境后，在虚拟环境中所有通过"sudo + cmd"执行的命令，都等同于在虚拟环境外执行。<br>所以说: 在虚拟环境中不要通过sudo执行命令</p></li></ol><h1>win10环境下搭建virtualenvwrapper-win</h1><ol><li><code>pip install virtualenv</code></li><li><code>pip install virtualenvwrapper-win</code></li><li>设置系统环境变量  <code>WORKON_HOME= '设置你想统一管理虚拟环境的路径'</code></li><li>创建虚拟环境   <code>mkvirtualenv test</code>  ( 此环境在你刚才配置的环境变量路径下)</li><li>创建指定python版本的虚拟环境  mkvirtualenv -p python3 test</li><li>查看所有虚拟环境  <code>workon</code></li><li>进入虚拟环境  <code>workon  xxx</code></li><li>退出虚拟环境 <code>deactivate</code></li><li>删除虚拟环境  <code>mvirtualenv test</code>(虚拟环境名称)</li><li>查看虚拟环境下的安装包 <code>pip list</code></li></ol><p><strong>生成项目所需要的的第三方包依赖文件</strong><br>pip freeze &gt;requirements.txt<br><strong>安装</strong><br>pip install -r requirements.txt</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 运维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>进程/线程/并发/并行/同步/异步/阻塞/非阻塞/...</title>
      <link href="/posts/bfe3e388.html"/>
      <url>/posts/bfe3e388.html</url>
      
        <content type="html"><![CDATA[<p>下面是我在学习过程中 自己的一点理解 如果有误 感谢指正!</p><ul><li><p>进程<br>官方解释 " 进程是资源分配的最小单位,线程是CPU调度的最小单位 "<br>说实话,对于不了解进程线程的人来说,根本看不懂,我也是~</p><p>一个程序为一个进程, 在windows下有些软件运行起来是多进程的.<br>我开了很多chrome窗口, 有这么多进程, 一个窗口一个进程.<br><img src="/img/loading.gif" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200316175132722.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5OTEwMw==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"><img src="/img/loading.gif" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200316174856912.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5OTEwMw==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"></p></li><li><p>线程<br>线程 是进程的一个实体,是CPU调度和分派的基本单位,它是比进程更小的能独立运行的基本单位. 线程自己基本上不拥有系统资源,只拥有一点在运行中必不可少的资源(如程序计数器,一组寄存器和栈),但是它可与同属一个进程的其他的线程共享进程所拥有的全部资源。</p></li></ul><blockquote><p>做个简单的比喻：<br>进程=火车，线程=车厢<br>线程在进程下行进（单纯的车厢无法运行）<br>一个进程可以包含多个线程（一辆火车可以有多个车厢）<br>不同进程间数据很难共享（一辆火车上的乘客很难换到另外一辆火车，比如站点换乘）<br>同一进程下不同线程间数据很易共享（A车厢换到B车厢很容易）<br>进程要比线程消耗更多的计算机资源（采用多列火车相比多个车厢更耗资源）<br>进程间不会相互影响，一个线程挂掉将导致整个进程挂掉（一列火车不会影响到另外一列火车，但是如果一列火车上中间的一节车厢着火了，将影响到所有车厢）<br>进程可以拓展到多机，进程最多适合多核（不同火车可以开在多个轨道上，同一火车的车厢不能在行进的不同的轨道上）<br>进程使用的内存地址可以上锁，即一个线程使用某些共享内存时，其他线程必须等它结束，才能使用这一块内存。（比如火车上的洗手间）－“互斥锁”<br>进程使用的内存地址可以限定使用量（比如火车上的餐厅，最多只允许多少人进入，如果满了需要在门口等，等有人出来了才能进去）－“信号量”</p></blockquote><blockquote><p>开个QQ，开了一个进程；开了迅雷，开了一个进程。<br>在QQ的这个进程里，传输文字开一个线程、传输语音开了一个线程、弹出对话框又开了一个线程。所以运行某个软件，相当于开了一个进程。<br>在这个软件运行的过程里（在这个进程里），多个工作支撑的完成QQ的运行，那么这“多个工作”分别有一个线程。所以一个进程管着多个线程。<br>通俗的讲：“进程是爹妈，管着众多的线程儿子”…</p></blockquote><ul><li>并发<br>能够进行多个任务,来回交替执行,可以不同时,但是要可以 进行多个任务的处理<br><strong>单核CPU 处理 多个程序</strong></li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">程序1 -&gt; CPU1</span><br><span class="line">程序2 -&gt; CPU1</span><br><span class="line">操作系统CPU轮询调度,实现并发.</span><br></pre></td></tr></tbody></table></figure><ul><li>并行<br>同并发基本一样, 最大的区别  是 “同时”  并行必须要可以 同时 处理 多个任务<br><strong>多核CPU 同时处理 多个程序</strong></li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">程序1 -&gt; CPU1</span><br><span class="line">程序2 -&gt; CPU2 </span><br><span class="line">这是并行 .</span><br></pre></td></tr></tbody></table></figure><p><strong>到这里还不能理解并发/并行的话,举个例子:</strong></p><blockquote><p>我收到了小厂的offer<br>今天来入职, hr 小姐姐都请假了, 就剩一个人事总监在上班. 是一个油光满面的老男人.<br>今天和我一起入职的有3个人, 分别是产品经理,测试,前端. 只有我一个后端.<br>入职流程很繁琐,老男人忙的要死,一会儿给我一个文件,趁我填表的功夫,还要去给他们三个人办入职,来回折腾了半天,到中午吃饭才搞完!<br>这就是并发.</p></blockquote><blockquote><p>我收到了大厂的offer !!<br>今天来入职, hr 小姐姐来门口接我了~ 把我领到会议室,我发现还有3个hr小姐姐在帮别人办理入职, 大厂真好!! 一对一办理入职!<br>入职流程很繁琐,但是我们一对一对接的很顺利,半小时就搞定了<br>这就是并行.</p></blockquote><p><img src="/img/loading.gif" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200316182505370.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5OTEwMw==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"><br><img src="/img/loading.gif" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200316182548448.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5OTEwMw==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"></p><p>并发和并行的区别就很明显了。它们虽然都说是"多个进程同时运行"，但是它们的"同时"不是一个概念。并行的"同时"是同一时刻可以多个进程在运行(处于running)，并发的"同时"是经过上下文快速切换，使得看上去多个进程同时都在运行的现象，是一种OS欺骗用户的现象。**</p><p>实际上，<strong>当程序中写下多进程或多线程代码时，这意味着的是并发而不是并行</strong> 并发是因为多进程/多线程都是需要去完成的任务，不并行是因为并行与否由操作系统的调度器决定，可能会让多个进程/线程被调度到同一个CPU核心上。只不过调度算法会尽量让不同进程/线程使用不同的CPU核心，所以在实际使用中几乎总是会并行，但却<strong>不能以100%的角度去保证会并行</strong>。也就是说，<strong>并行与否程序员无法控制，只能让操作系统决定</strong>。</p><p>再次注明，并发是一种现象，之所以能有这种现象的存在，和CPU的多少无关，而是和进程调度以及上下文切换有关的。<br><a href="https://www.cnblogs.com/f-ck-need-u/p/11161481.html" target="_blank" rel="noopener">https://www.cnblogs.com/f-ck-need-u/p/11161481.html</a></p><ul><li><p>同步<br>同步是指线程在访问某一资源时，获得了资源的返回结果之后才会执行其他操作，否则主动继续获取这一资源</p></li><li><p>异步<br>异步与同步相对，是指线程在访问某一资源时，无论是否取得返回结果，都进行下一步操作；当有了资源返回结果时，系统自会通知线程。</p></li></ul><blockquote><p>用一个比喻来说明：10多前的银行是没有业务取号的，我们去办理业务时，如果有很多人，那就先排队，然后关注着什么时候轮到自己，这就是同步；<br>现在去银行，得先取一张小纸条，上面写着你的业务号，轮到你的时候，银行会喊你，这就是异步。</p></blockquote><blockquote><p>异步机制往往注册一个回调机制,在所等待的事件被触发时由触发机制(银行柜台业务员)通过某种机制(业务办理号码)找到等待该事件的人。</p></blockquote><ul><li>阻塞<br>线程在等待某个操作完成期间，自身无法继续执行别的操作，则称该线程在该操作上是阻塞的。</li><li>非阻塞<br>线程在等待某个操作完成期间，自身可执行别的操作，则称该线程在该操作上是非阻塞的。</li></ul><blockquote><p>继续上面银行办理业务的例子，无论是10多年前的排队办理业务，还是现在的业务号办理业务，如果在我们在等待过程中，什么也不能做，那就是阻塞的；<br>如果在等待过程中，可以做其他事情（看书、玩手游），那就是非阻塞的。</p></blockquote><blockquote><p>同步和异步是个线程处理方式或手段，阻塞和非阻塞是线程的一种状态，两者并不相同也并不冲突。</p></blockquote><blockquote><p>同步、异步与阻塞非阻塞可以产生不同的组合：同步阻塞、同步非阻塞、异步阻塞、异步非阻塞。</p></blockquote><blockquote><p>还是银行办理业务的例子：<br>如果排着队，且只能傻傻的排着队，看着什么时候到自己，那就是同步阻塞；<br>如果排着队还能玩玩手机，偶尔抬头看看什么时候到自己，那就是同步非阻塞。<br>如果是现在的取票按业务号办理业务，拿到号码后就陷入懵逼状态，啥也不能做，直到银行根据业务号通知自己，那就是异步阻塞；<br>如果拿到业务号之后，自己爱干嘛干嘛，那就是异步非阻塞。</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多进程 </tag>
            
            <tag> 多线程 </tag>
            
            <tag> 并发 </tag>
            
            <tag> 并行 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kafka 安装教程 (linux)</title>
      <link href="/posts/8a92f348.html"/>
      <url>/posts/8a92f348.html</url>
      
        <content type="html"><![CDATA[<ol><li><p>官网下载安装包<br><a href="http://kafka.apache.org/downloads.html" target="_blank" rel="noopener">http://kafka.apache.org/downloads.html</a><br><img src="/img/loading.gif" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200311101457803.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5OTEwMw==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"></p></li><li><p>利用xftp将 安装包 放在 /usrl/local/kafka 目录下</p></li><li><p>解压</p> <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxf</span><br></pre></td></tr></tbody></table></figure><p>进入 kafka 目录<br><img src="/img/loading.gif" class="lazyload" data-src="https://img-blog.csdnimg.cn/2020031110161995.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5OTEwMw==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"></p></li><li><p>执行命令 <code>mkdir zklogs</code> 创建zookeeper日志文件存放路径</p></li><li><p>配置并启动zookeeper</p> <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi config/zookeeper.properties</span><br></pre></td></tr></tbody></table></figure><p>修改zookeeper的配置信息<br><img src="/img/loading.gif" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200311102219254.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5OTEwMw==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"></p></li><li><p>执行 命令 启动 zookeeper</p>   <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup ./bin/zookeeper-server-start.sh ./config/zookeeper.properties &amp;</span><br></pre></td></tr></tbody></table></figure></li><li><p>查看是否启动</p> <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ps -aux | grep zookeeper</span><br><span class="line">ss -tanl</span><br></pre></td></tr></tbody></table></figure><p><img src="/img/loading.gif" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200311102655581.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5OTEwMw==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"><br><img src="/img/loading.gif" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200311102854178.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5OTEwMw==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"></p></li><li><p>配置并启动kafka<br>执行命令 <code>vi config/server.properties</code> 修改kafka的配置信息</p></li></ol><h2 id="创建主题">创建主题</h2><ol><li><p>在 /usr/local/kafka/  下执行</p> <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/kafka-topics.sh--create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic cctv1(主题名）</span><br></pre></td></tr></tbody></table></figure><p><img src="/img/loading.gif" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200311111701405.png"  alt="在这里插入图片描述"></p><blockquote><p>命令解析：<br>–create： 指定创建topic动作</p><p>–topic：指定新建topic的名称</p><p>–zookeeper： 指定kafka连接zk的连接url，该值和server.properties文件中的配置项{zookeeper.connect}一样</p><p>–config：指定当前topic上有效的参数值，参数列表参考文档为: <a href="http://kafka.apache.org/082/documentation.html#brokerconfigs" target="_blank" rel="noopener">http://kafka.apache.org/082/documentation.html#brokerconfigs</a></p><p>–partitions：指定当前创建的kafka分区数量，默认为1个</p><p>–replication-factor：指定每个分区的复制因子个数，默认1个</p></blockquote></li><li><p>查看一下该主题是否已经创建</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/kafka-topics.sh--list --zookeeper localhost:2181</span><br></pre></td></tr></tbody></table></figure></li></ol><p>到这里就已经完成了kafka在zookeeper上创建了一个cctv1的主体,然后就需要一个生产者来制作节目，并往cctv1中灌入数据</p><ol start="3"><li><p>发布消息（生产者）</p> <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/kafka-console-producer.sh --broker-list localhost:9092 --topic cctv1</span><br></pre></td></tr></tbody></table></figure><p><img src="/img/loading.gif" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200311113518554.png"  alt="Kafka控制台"><br><img src="/img/loading.gif" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200311113952569.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5OTEwMw==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"></p></li><li><p>启动消费者<br>相当于订阅了cctv1这个频道，此时继续在生产者随便输入消息，可以在消费者这里看到。 但只能看到 启动消费者 之后的消息，启动之前的看不到。</p> <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic cctv1</span><br></pre></td></tr></tbody></table></figure><p><img src="/img/loading.gif" class="lazyload" data-src="https://img-blog.csdnimg.cn/2020031111404754.png"  alt="在这里插入图片描述"></p><pre><code> 那之前输入的数据怎么看？</code></pre> <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/kafka-console-consumer.sh --bootstrap-server localhost:9092--topic cctv1 --from-beginning</span><br></pre></td></tr></tbody></table></figure><pre><code>   意思就是在启动消费者时后面加了一个 --from-beginning，就是说明这个cctv1电视台成数字电视台了，可以点播，可以看之前所有的信息，--from-beginning表示从开头开始看，其实它可以从任意一个偏移量开始看</code></pre></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> kafka </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kafka </tag>
            
            <tag> 大数据 </tag>
            
            <tag> zookeeper </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux下redis安装教程，服务注册</title>
      <link href="/posts/156eb760.html"/>
      <url>/posts/156eb760.html</url>
      
        <content type="html"><![CDATA[<ol><li><p>下载安装包<br><a href="https://redis.io/download" target="_blank" rel="noopener">https://redis.io/download</a><br><img src="/img/loading.gif" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200303154939212.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5OTEwMw==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"></p></li><li><p>利用xftp将安装包传输到服务器<br><img src="/img/loading.gif" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200303155058441.png"  alt="在这里插入图片描述"></p></li><li><p>解压</p> <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxf redis-5.0.7.tar.gz</span><br></pre></td></tr></tbody></table></figure></li><li><p>将解压好的文件目录 移动到 /usr/local/  并重命名为redis</p> <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mv redis-5.0.7 /usr/<span class="built_in">local</span>/</span><br><span class="line">mv redis-5.0.7/ redis</span><br></pre></td></tr></tbody></table></figure><p><img src="/img/loading.gif" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200303155641238.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5OTEwMw==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"></p></li><li><p>进入redis目录，执行make命令</p> <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> redis</span><br><span class="line">make</span><br></pre></td></tr></tbody></table></figure></li><li><p>编译完成后，可以看到 编译完成之后，可以看到解压文件redis中有对应的src、conf等文件夹<br><img src="/img/loading.gif" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200303155935731.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5OTEwMw==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"></p></li><li><p>编译成功后，进入src文件夹，执行make install进行Redis安装。</p> <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> src </span><br><span class="line">make install</span><br></pre></td></tr></tbody></table></figure><p><img src="/img/loading.gif" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200303155958341.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5OTEwMw==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"></p></li></ol><p><strong>到这里 redis 成功安装完成。</strong></p><h2 id="下一步，进行redis部署。">下一步，进行redis部署。</h2><ol><li><p>为了方便管理，将Redis文件中的conf配置文件和常用命令移动到统一文件中</p></li><li><p>创建bin和etc文件<br><img src="/img/loading.gif" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200303160136877.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5OTEwMw==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"></p></li><li><p>回到刚刚安装目录，找到redis.conf，将其复制移动到 /usr/local/redis/ect 下</p> <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv redis.conf /usr/<span class="built_in">local</span>/redis/etc/</span><br></pre></td></tr></tbody></table></figure><p><img src="/img/loading.gif" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200303160241918.png"  alt="在这里插入图片描述"></p></li><li><p>进入src目录，<a href="http://xn--mkreleasehdr-5g7t1483b.sh" target="_blank" rel="noopener">移动mkreleasehdr.sh</a> redis-benchmark redis-check-aof redis-check-rdb redis-cli redis-server到/usr/local/redis/bin/</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-check-rdb redis-cli redis-server /usr/<span class="built_in">local</span>/redis/bin/</span><br></pre></td></tr></tbody></table></figure><p><img src="/img/loading.gif" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200303160345623.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5OTEwMw==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"></p></li><li><p>启动redis</p> <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> bin</span><br><span class="line">./redis-server</span><br></pre></td></tr></tbody></table></figure><p><img src="/img/loading.gif" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200303160449262.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5OTEwMw==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"></p></li><li><p>配置ip</p> <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi redis.conf</span><br></pre></td></tr></tbody></table></figure><p><img src="/img/loading.gif" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200303161236585.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5OTEwMw==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"></p></li><li><p>修改后台启动<br><img src="/img/loading.gif" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200303161602548.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5OTEwMw==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"></p> <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:wq!</span><br></pre></td></tr></tbody></table></figure></li><li><p>重新启动redis服务</p> <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-server /usr/<span class="built_in">local</span>/redis/etc/redis.conf</span><br></pre></td></tr></tbody></table></figure><p><img src="/img/loading.gif" class="lazyload" data-src="https://img-blog.csdnimg.cn/2020030316174168.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5OTEwMw==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"></p></li><li><p>大功告成<br><img src="/img/loading.gif" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200303162006914.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5OTEwMw==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"></p></li></ol><h2 id="将redis注册为linux服务">将redis注册为linux服务</h2><ol><li><p>将redis服务脚本(redis/utils/redis_init_script)移动到   /etc/init.d目录下</p><blockquote><p>init.d目录—在系统启动的时候某些指定脚本将被执行</p></blockquote><p><img src="/img/loading.gif" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200303171612958.png"  alt="在这里插入图片描述"></p></li><li><p>切换到 /etc/init.d 目录下，改文件名为redis<br><img src="/img/loading.gif" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200303171758378.png"  alt="在这里插入图片描述"></p></li><li><p>增加文件 可执行权限</p> <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x /etc/init.d/redis</span><br></pre></td></tr></tbody></table></figure></li><li><p>加入服务，开机自启动</p> <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chkconfig --add redis</span><br></pre></td></tr></tbody></table></figure></li><li><p>查看自启动项</p> <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chkconfig --list</span><br></pre></td></tr></tbody></table></figure></li></ol><h2 id="redis-启动">redis 启动</h2><p>启动：service redis start<br>停止：service redis stop</p><h2 id="利用systemctl命令注册redis服务（centOS7）">利用systemctl命令注册redis服务（centOS7）</h2><ol><li><p>在目录 /usr/lib/systemd/system/ 下新建 redis.service 服务注册文件</p>   <figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=redis</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">PIDFile=/var/run/redis_6379.pid</span><br><span class="line">ExecStart=/usr/local/redis/bin/redis-server /usr/local/redis/etc/redis.conf</span><br><span class="line">ExecReload=/bin/kill -s HUP $MAINPID</span><br><span class="line">ExecStop=/bin/kill -s QUIT $MAINPID</span><br><span class="line">PrivateTmp=true</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></tbody></table></figure><p>ExecStart、<br>ExecReload、<br>ExecStop<br>分别为 服务启动、重启、关闭时执行的脚本。</p><p>路径替换成安装路径,</p><p>pid路径和 redis.conf里面的路径保持一致</p></li><li><p>保存并退出</p> <figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ systemctl enable redis.service  //加入开机启动</span><br><span class="line"> </span><br><span class="line">$ systemctl start redis //开启redis服务</span><br><span class="line"> </span><br><span class="line">$ systemctl status redis  //查看redis运行状态</span><br></pre></td></tr></tbody></table></figure></li></ol><p><strong>卸载redis：</strong></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">删除安装目录</span><br><span class="line">删除所有redis相关命令脚本</span><br><span class="line">删除redis解压文件夹</span><br></pre></td></tr></tbody></table></figure><h2 id="ubuntu注册">ubuntu注册</h2><ol><li><p><code>cd /lib/systemd/system</code></p></li><li><p>新建redis.service 文件</p> <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi redis.service</span><br></pre></td></tr></tbody></table></figure><p>添加以下内容</p> <figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=redis</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">ExecStart=/odoo/tar/redis/bin/redis-server /odoo/tar/redis/etc/redis.conf</span><br><span class="line">PIDFile=/odoo/tar/redis/redis_6379.pid</span><br><span class="line">ExecReload=/bin/kill -s HUP $MAINPID</span><br><span class="line">ExecStop=/bin/kill -s QUIT $MAINPID</span><br><span class="line">PrivateTmp=true</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></tbody></table></figure></li><li><p>启动redis</p> <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start redis.service</span><br></pre></td></tr></tbody></table></figure></li><li><p>添加至系统自启动服务</p> <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl <span class="built_in">enable</span> redis.service</span><br></pre></td></tr></tbody></table></figure><p>运行上述命令后，可以在/etc/systemd/system/multi-user.target.wants 目录下发现新建了一个符号链接，指向第2步添加的服务文件。</p><p>重启系统后ps -ef | grep redis查看进程，确认redis进程已经启动，配置完成。</p></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>postgresql操作</title>
      <link href="/posts/ae11abef.html"/>
      <url>/posts/ae11abef.html</url>
      
        <content type="html"><![CDATA[<p><strong>（1）登录</strong></p><p>sudo -u postgres psql<br>以用户postgres身份登录，postgres为用户名，可有多个用户，登录时会要求输入相应密码，之后就会进入psql环境了</p><p><strong>（2）切换数据库</strong></p><p>有时候需要在psql环境下切换数据库，此时执行如下psql命令：<br>\c dbname username serverIP port<br>其中除了数据库名外，其他的参数都是可选的，如果使用默认值可以使用-作为占位符<br>执行这个命令后，也是提示输入密码。</p><p><strong>（3）查看帮助</strong></p><p>psql提供了很好的在线帮助文档，总入口命令是help，输入这个命令就可以看到<br>vsb9=# help<br>You are using psql, the command-line interface to PostgreSQL.<br>Type:  \copyright for distribution terms<br>\h for help with SQL commands（查看SQL命令帮助)<br>? for help with psql commands（查看psql命令帮助）<br>\g or terminate with semicolon to execute query（\g表示命令已经输入完成，开始执行查询或操作任务）</p><blockquote><p>例如上面截图中select id from<br>courses之后#前变"-"表示还在等待输入命令，这一次命令没输入完整，而输入\g就告诉它开始执行吧。select id from<br>courses;（注意这里加了“；”）表示输入完成开始执行。这两种得到的结果是一致的都是返回表中id属性的值。    \q to<br>quit（退出登录）</p></blockquote><p>可以看到，标准SQL命令的帮助和psql特有命令的帮助是分开的。输入?查看psql命令，会发现所有的psql命令都是以\开头，这就很容易和标准的SQL命令进行区分开来。</p><p><strong>(4)常用数据库命令</strong></p><p>（mysql为MySQL数据库操作命令，psql为postgresql数据库命令）<br>1列出所有的数据库<br>mysql: show databases<br>psql: \l或\list</p><p>2切换数据库<br>mysql: use dbname<br>psql: \c dbname</p><p>3列出当前数据库下的所有表<br>mysql: show tables<br>psql: \d</p><p>4列出指定表的所有字段<br>mysql: show columns from table name<br>psql: \d tablename</p><p>5查看表的基本情况<br>mysql: describe tablename<br>psql: \d+ tablename</p><p>SQL常用命令<br>在切换到某数据库环境后：<br>select attr from tablename;（加分号立即执行该语句，该表中的属性值，这个表应当是当前数据库中存在的表）<br>select attr<br>from tablename;（这样也是可以的，二者效果等同，这一形式在其他情况下会用到）</p><p><strong>（5）数据库备份</strong></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pg_dump -h 127.0.0.1 -U odoo rc_erp_bj&gt;/root/db_backups/20200303.bak</span><br></pre></td></tr></tbody></table></figure><blockquote><p>127.0.0.1为 数据库所在计算机ip;(必须保证数据库外部访问权限)<br>dbUserName 需要备份的数据库的用户名;<br>dbName是需要备份的数据库名;<br>/root/db_backups/20200303.bak 是最后生成的文件的路径和文件名称(可自定义)</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> postgresql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> postgresql </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>非root用户启动nginx报错</title>
      <link href="/posts/7db6f009.html"/>
      <url>/posts/7db6f009.html</url>
      
        <content type="html"><![CDATA[<p>以nginx用户执行 ./nginx 出现下面报错</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nginx: [warn] the <span class="string">"user"</span> directive makes sense only <span class="keyword">if</span> the master process runs with super-user privileges, ignored <span class="keyword">in</span> /home/nginx/nginx_dev/conf/nginx.conf:2</span><br><span class="line">nginx: [emerg] <span class="built_in">bind</span>() to 0.0.0.0:80 failed (13: Permission denied)</span><br></pre></td></tr></tbody></table></figure><p>非root 用户不可以使用1024以下的端口.</p><p>解决办法<br>1.修改配置文件,将端口设置为1024以上的<br>2.修改用户权限</p><blockquote><p>所有用户都可以运行（因为是755权限，文件所有者：root，组所有者：root） <br>chown root.root nginx <br>chmod 755 nginx <br>chmod u+s nginx</p></blockquote><pre><code>此方式,不修改nginx端口号,无法运行.</code></pre><p>3.在sbin目录下  sudo ./nginx</p><pre><code>这种方式可能出现下述错误．nginx 不在 sudoers 文件中。此事将被报告。</code></pre><blockquote><p>sudo命令可以让你以root身份执行命令，来完成一些我们这个帐号完成不了的任务。</p><p>其实并非所有用户都能够执行sudo，因为有权限的用户都在/etc/sudoers中呢。</p><p>我们可以通过编辑器来打开/etc/sudoers，或者直接使用命令visudo来搞定这件事情。</p><p>打开sudoers后，像如下那样加上自己的帐号保存后就可以了。</p></blockquote><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root    ALL=(ALL:ALL) ALL   </span><br><span class="line">nginx   ALL=(ALL:ALL) ALL</span><br></pre></td></tr></tbody></table></figure><blockquote><p>sudoers的权限是0440，即只有root才能读。在你用root或sudo后强行保存（wq!）即可。</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux下安装 nginx</title>
      <link href="/posts/2dedf799.html"/>
      <url>/posts/2dedf799.html</url>
      
        <content type="html"><![CDATA[<h2 id="安装nginx">安装nginx</h2><ol><li><p>安装nginx依赖</p> <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yum install gcc-c++ </span><br><span class="line">yum -y install pcre pcre-devel </span><br><span class="line">yum -y install zlib zlib-devel </span><br><span class="line">yum install -y openssl openssl-devel</span><br></pre></td></tr></tbody></table></figure><p>zlib：压缩</p><p>pcre：正则</p><p>openssl：证书</p></li><li><p>下载 nginx</p> <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget  http://nginx.org/download/nginx-1.13.11.tar.gz</span><br></pre></td></tr></tbody></table></figure></li><li><p>解压</p> <figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar zxvf nginx-1.13.11.tar.gz</span><br></pre></td></tr></tbody></table></figure></li><li><p>修改编译nginx源码后的 输出地址</p> <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./configure  --prefix=/root/workbase/nginx</span><br></pre></td></tr></tbody></table></figure></li><li><p>编译</p> <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></tbody></table></figure></li></ol><h2 id="运行nginx">运行nginx</h2><ol><li><p>切换到编译后输出的/root/workbase/nginx/sbin<br>执行</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /workbase/nginx/sbin</span><br><span class="line">./nginx</span><br></pre></td></tr></tbody></table></figure><h6 id="判断nginx是否运行">判断nginx是否运行</h6><ol><li><p>执行命令，查看端口</p> <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ss -tanl</span><br></pre></td></tr></tbody></table></figure><p>80 是nginx默认端口，如果80正常启动，则nginx启动成功</p></li><li><p>查看进程</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -ef|grep nginx</span><br></pre></td></tr></tbody></table></figure></li><li><p>访问nginx首页</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip:80</span><br></pre></td></tr></tbody></table></figure></li></ol><p>nginx 命令</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> <span class="built_in">cd</span> sbin/</span><br><span class="line"> </span><br><span class="line">./nginx </span><br><span class="line">./nginx -s stop </span><br><span class="line">./nginx -s quit </span><br><span class="line">./nginx -s reload</span><br></pre></td></tr></tbody></table></figure><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./nginx -s quit：</span><br></pre></td></tr></tbody></table></figure><p>此方式停止步骤是待nginx进程处理任务完毕进行停止。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./nginx -s stop：</span><br></pre></td></tr></tbody></table></figure><p>此方式相当于先查出nginx进程id再使用kill命令强制杀掉进程。</p><p>注意： 开启端口： /sbin/iptables -I INPUT -p tcp --dport 80 -j ACCEPT<br>如果本地访问不到端口，则需要开启 如果开启之后，还访问不到，则需要关闭本地防火墙</p><blockquote><p>ps命令</p><p>-a，查看所有</p><p>-u，以用户（user）的格式显示</p><p>-x, 显示后台进程运行参数</p><p>-ef，以全格式显示进程所有信息，包括父进程Pid，创建人，创建时间，进程号。等等</p><p>一般项目中，我们首先要查询一个进程，并对其进行删除会用一下命令</p><p>ps -aux | grep nginx</p><p>ps -ef |grep nginx</p><p>查询到nginx相关的进程，我们通过kill命令来操作该进程号删除该进程，kill -9  12345</p></blockquote></li></ol><h2 id="参考文章">参考文章</h2><p><a href="http://www.souvc.com/?p=1661" target="_blank" rel="noopener">CentOS 7 下 Nginx安装以及配置</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Group By</title>
      <link href="/posts/4df905cc.html"/>
      <url>/posts/4df905cc.html</url>
      
        <content type="html"><![CDATA[<p>在平时的开发任务中我们经常会用到MYSQL的GROUP BY分组， 用来获取数据表中以分组字段为依据的统计数据。比如有一个学生选课表，表结构如下：</p><pre><code>Table: Subject_Selection Subject   Semester   Attendee---------------------------------ITB001    1          JohnITB001    1          BobITB001    1          MickeyITB001    2          JennyITB001    2          JamesMKB114    1          JohnMKB114    1          Erica</code></pre><p>我们想统计每门课程有多少个学生报名，应用如下SQL：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Subject, <span class="keyword">Count</span>(*)</span><br><span class="line"><span class="keyword">FROM</span> Subject_Selection</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> Subject</span><br></pre></td></tr></tbody></table></figure><p>得到如下结果：</p><pre><code>Subject    Count------------------------------ITB001     5MKB114     2</code></pre><p>因为表里记录了有5个学生选择ITB001，2个学生选择了MKB114。</p><p>产生这个结果的原因是：<br>GROUP BY X意思是将所有具有相同X字段值的记录放到一个分组里。<br>那么GROUP BY X, Y呢？<br>GROUP BY X, Y意思是将所有具有相同X字段值和Y字段值的记录放到一个分组里。</p><p>我们下面再接着要求统计出每门学科每个学期有多少人选择，应用如下SQL：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Subject, Semester, <span class="keyword">Count</span>(*)</span><br><span class="line"><span class="keyword">FROM</span> Subject_Selection</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> Subject, Semester</span><br></pre></td></tr></tbody></table></figure><p>上面SQL的意思是，对Subject_Selection表中的数据进行分组，将具有相同Subject和Semester字段值的记录放到同一个分组里去， 然后对每个分组中的数据应用聚合函数（COUNT，SUM， AVG，etc）。</p><p>得到的结果是：</p><pre><code>Subject    Semester   Count------------------------------ITB001     1          3ITB001     2          2MKB114     1          2</code></pre><p>从表中的记录我们可以看出这个分组结果是正确的有3个学生在第一学期选择了ITB001, 2个学生在第二学期选择了ITB001,<br>还有两个学生在第一学期选择了MKB114, 没人在第二学期选择MKB114。</p><p>再比如有一个订单表，表中记录了所有支付过的订单</p><pre><code>Table: Order Product   Buyer       Spending---------------------------------PD001     Todd          12.00PD001     Todd          12.00PD001     Todd          12.00PD001     Lily          12.00PD001     Lily          12.00PD002     Todd          20.00PD002     Todd          20.00</code></pre><p>现在我们想统计每个用户在每种商品上总共花了多少钱，执行如下SQL</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Product，Buyer, <span class="keyword">SUM</span>(Spending)</span><br><span class="line"><span class="keyword">FROM</span> <span class="string">`Order`</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> Product, Buyer</span><br></pre></td></tr></tbody></table></figure><p>获得的结果如下：</p><pre><code>Product    Buyer     SUM------------------------------PD001      Todd      36.00PD001      Lily      24.00PD002      Todd      40.00</code></pre><h2 id="总结：">总结：</h2><p>在MYSQL中使用GROUP BY对表中的数据进行分组时，<br>GROUP BY X意思是将所有具有<strong>相同X字段</strong>值的记录放到一个分组里，<br>GROUP BY X, Y意思是将所有具有<strong>相同X字段值和Y字段值</strong>的记录放到一个分组里。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> sql </tag>
            
            <tag> group </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python日志库logging</title>
      <link href="/posts/c3773266.html"/>
      <url>/posts/c3773266.html</url>
      
        <content type="html"><![CDATA[<h2 id="日志级别"><strong>日志级别</strong></h2><pre><code>NOTSET(0)DEBUG (10)INFO (20)WARNING (30)ERROR (40)CRITICAL (50)</code></pre><p>logging 输入日志时，会输出&gt;= 设置的日志级别的日志，例如设置为DEBUG，则会输出DEBUG、INFO、WARNING、ERROR、CRITICAL级别的日志。默认的日志级别为WARNING。</p><h2 id="Logging流程">Logging流程</h2><p>Logger：日志<br>LogRecord：日志记录器<br>Handler：处理器（将日志发送到哪里）<br>Filter：过滤器，决定输入哪些日志<br>Formatter：格式化器，日志布局</p><p><img src="/img/loading.gif" class="lazyload" data-src="https://img-blog.csdnimg.cn/20190622162821210.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5OTEwMw==,size_16,color_FFFFFF,t_70"  alt="logging工作流程"></p><p>1、判断 Logger 对象对于设置的级别是否可用，如果可用，则往下执行，否则，流程结束。<br>2、创建 LogRecord 对象，如果注册到 Logger 对象中的 Filter 对象过滤后返回 False，则不记录日志，流程结束，否则，则向下执行。<br>3、LogRecord 对象将 Handler 对象传入当前的 Logger 对象，（图中的子流程）如果 Handler 对象的日志级别大于设置的日志级别，再判断注册到 Handler 对象中的 Filter 对象过滤后是否返回 True 而放行输出日志信息，否则不放行，流程结束。<br>4、如果传入的 Handler 大于 Logger 中设置的级别，也即 Handler 有效，则往下执行，否则，流程结束。<br>5、判断这个 Logger 对象是否还有父 Logger 对象，如果没有（代表当前 Logger 对象是最顶层的 Logger 对象 root Logger），流程结束。否则将 Logger 对象设置为它的父 Logger 对象，重复上面的 3、4 两步，输出父类 Logger 对象中的日志输出，直到是 root Logger 为止。</p><h2 id="组件详细介绍"><strong>组件详细介绍</strong></h2><h2 id="1-Logger">1.Logger</h2><p>Logger是一个树形层级结构，输出信息之前都要获得一个Logger（如果没有显示的获取则自动创建并使用root Logger，如第一个例子所示）。<br>logger = logging.getLogger()    返回一个默认的Logger也即root Logger，并应用默认的日志级别、Handler和Formatter设置。<br>当然也可以通过Logger.setLevel(lel)指定最低的日志级别，可用的日志级别有：<br>logging.DEBUG、<a href="http://logging.INFO" target="_blank" rel="noopener">logging.INFO</a>、logging.WARNING、logging.ERROR、logging.CRITICAL。<br>Logger.debug()、<a href="http://Logger.info" target="_blank" rel="noopener">Logger.info</a>()、Logger.warning()、Logger.error()、Logger.critical()<br>输出不同级别的日志，只有日志等级大于或等于设置的日志级别的日志才会被输出。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">logger1 = logging.getLogger('mylogger')  </span><br><span class="line">logger1.setLevel(logging.DEBUG)  </span><br><span class="line">logger2 = logging.getLogger('mylogger')  </span><br><span class="line">logger2.setLevel(logging.INFO)  </span><br><span class="line">logger3 = logging.getLogger('mylogger.child1') #创建了(root.)mylogger.child1</span><br><span class="line">logger4 = logging.getLogger('mylogger.child1.child2') #创建了(root.)mylogger.child1.child2</span><br><span class="line">logger5 = logging.getLogger('mylogger.child1.child2.child3') #创建了(root.)mylogger.child1.child2.child3</span><br></pre></td></tr></tbody></table></figure><h2 id="2-Handler">2.Handler</h2><p>Handler对象负责发送相关的信息到指定目的地，有几个常用的Handler方法：<br>Handler.setLevel(lel):        指定日志级别，低于lel级别的日志将被忽略<br>Handler.setFormatter()：  给这个handler选择一个Formatter<br>Handler.addFilter(filt)、Handler.removeFilter(filt)：新增或删除一个filter对象</p><p>可以通过addHandler()方法为Logger添加多个Handler：<br>有多中可用的Handler：</p><p>logging.StreamHandler          可以向类似与sys.stdout或者sys.stderr的任何文件对象(file object)输出信息<br>logging.FileHandler                用于向一个文件输出日志信息<br>logging.handlers.RotatingFileHandler        类似于上面的FileHandler，但是它可以管理文件大小。<br>当文件达到一定大小之后，它会自动将当前日志文件改名，然后创建一个新的同名日志文件继续输出<br>logging.handlers.TimedRotatingFileHandler 和RotatingFileHandler类似，不过，它没有通过判断文件大小来决定何时重新创建日志文件，而是间隔一定时间就自动创建新的日志文件<br>logging.handlers.SocketHandler                  使用TCP协议，将日志信息发送到网络。<br>logging.handlers.DatagramHandler             使用UDP协议，将日志信息发送到网络。<br>logging.handlers.SysLogHandler                 日志输出到syslog<br>logging.handlers.NTEventLogHandler         远程输出日志到Windows NT/2000/XP的事件日志<br>logging.handlers.SMTPHandler                   远程输出日志到邮件地址<br>logging.handlers.MemoryHandler                日志输出到内存中的制定buffer<br>logging.handlers.HTTPHandler                    通过"GET"或"POST"远程输出到HTTP服务器</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">fh = logging.FileHandler('/tmp/test.log')   </span><br><span class="line">ch = logging.StreamHandler()  </span><br><span class="line"></span><br><span class="line">logger.addHandler(fh)  </span><br><span class="line">logger.addHandler(ch)</span><br></pre></td></tr></tbody></table></figure><h2 id="3-Formatter">3.Formatter</h2><p>Formatter对象设置日志信息最后的规则、结构和内容，默认的时间格式为%Y-%m-%d %H:%M:%S。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#定义Formatter  </span><br><span class="line">formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')  </span><br><span class="line">#为Handler添加Formatter  </span><br><span class="line">fh.setFormatter(formatter)</span><br></pre></td></tr></tbody></table></figure><blockquote><p>format参数中可能用到的格式化串：<br>%(name)s             Logger的名字<br>%(levelno)s          数字形式的日志级别<br>%(levelname)s     文本形式的日志级别<br>%(pathname)s     调用日志输出函数的模块的完整路径名，可能没有<br>%(filename)s        调用日志输出函数的模块的文件名<br>%(module)s          调用日志输出函数的模块名<br>%(funcName)s     调用日志输出函数的函数名<br>%(lineno)d           调用日志输出函数的语句所在的代码行<br>%(created)f          当前时间，用UNIX标准的表示时间的浮 点数表示<br>%(relativeCreated)d    输出日志信息时的，自Logger创建以 来的毫秒数<br>%(asctime)s                字符串形式的当前时间。默认格式是 “2003-07-08 16:49:45,896”。逗号后面的是毫秒<br>%(thread)d                 线程ID。可能没有<br>%(threadName)s        线程名。可能没有<br>%(process)d              进程ID。可能没有<br>%(message)s            用户输出的消息</p></blockquote><h2 id="4-Filter">4.Filter</h2><p>限制只有满足过滤规则的日志才会输出。<br>比如我们定义了filter = logging.Filter(‘a.b.c’),并将这个Filter添加到了一个Handler上，<br>则使用该Handler的Logger中只有名字带a.b.c前缀的Logger才能输出其日志。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 只输出mylogger.child1.child2的日志</span><br><span class="line">filter = logging.Filter('mylogger.child1.child2')  </span><br><span class="line">fh.addFilter(filter)</span><br></pre></td></tr></tbody></table></figure><h2 id="日志输出格式">日志输出格式</h2><p>级别：Logger实例名称：日志内容</p><h2 id="定义Log两种方法">定义Log两种方法</h2><p>第一种：就是实例化logger = logging.logger  然后手动给logger添加addHandler， addFilter, handler.setFormatter 添加格式，这样的形式来获取logger<br>第二种：就是使用 logging.config.dictConfig 来从配置文件生成logger</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 获取root logger </span><br><span class="line">root_logger = logging.getLogger() </span><br><span class="line">print 'root logger', root_logger, id(root_logger) </span><br><span class="line">root_logger = logging.root </span><br><span class="line">print 'root logger', root_logger, id(root_logger)</span><br><span class="line"></span><br><span class="line">#结果</span><br><span class="line">root logger &lt;logging.RootLogger object at 0x7f7aa0fdd6d0&gt; 140164663727824</span><br><span class="line">root logger &lt;logging.RootLogger object at 0x7f7aa0fdd6d0&gt; 140164663727824</span><br><span class="line"># 他们是同一个root logger</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import logging</span><br><span class="line"># 没有创建logger, 默认是root logger， 直接打印在屏幕</span><br><span class="line">logging.basicConfig(level=logging.DEBUG, format='%(asctime)s:%(name)s:%(levelname)s:%(message)s')</span><br><span class="line"># logging.warning('this is warning')</span><br><span class="line"># logging.info('this is info')</span><br><span class="line"></span><br><span class="line">                                                                                                       </span><br><span class="line">logger = logging.getLogger('apps')</span><br><span class="line">apps_handler = logging.FileHandler(filename="apps.log")</span><br><span class="line">logger.addHandler(apps_handler)</span><br><span class="line">logger.setLevel(logging.DEBUG)</span><br><span class="line">logger.info('shis')</span><br><span class="line">print logger.handlers</span><br><span class="line">print logger</span><br></pre></td></tr></tbody></table></figure><p>上面流程讲解：</p><p>首先 logging.basicConfig 配置的是root logger 的StreamHandler 的格式，即打印在终端的内容<br>然后新的apps logger 都是root logger的子，输出的时候，同时会输出到root logger, 除非 logger.propagate = False。<br>所以如果没有 logging.basicConfig这个对root logger的配置，app logger就会只发送内容到自己的handlers</p><h2 id="其他参考代码">其他参考代码</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">import logging</span><br><span class="line"># 没有创建logger, 默认是root logger， 直接打印在屏幕</span><br><span class="line"># root logger 默认的level 是warning，所以这里设置成debug，才能打印info的日志</span><br><span class="line"># 设置了root logger的format，包括时间，logger名字，levelname等</span><br><span class="line">logging.basicConfig(level=logging.DEBUG, format='%(asctime)s:%(name)s:%(levelname)s:%(message)s')</span><br><span class="line">logging.warning('this is warning')</span><br><span class="line">logging.info('this is info')</span><br><span class="line"></span><br><span class="line">"""</span><br><span class="line">#输出：</span><br><span class="line">2018-01-30 15:50:28,761:root:WARNING:this is warning</span><br><span class="line">2018-01-30 15:50:28,761:root:INFO:this is info</span><br><span class="line">"""</span><br><span class="line"></span><br><span class="line"># 创建一个新的apps 的logger， 如果logger不设置，就会用root logger那套（打印到屏幕和上面的格式）</span><br><span class="line"># 因为它是会默认传播到祖先logger</span><br><span class="line">logger = logging.getLogger('apps')</span><br><span class="line">logger.setLevel(logging.DEBUG)</span><br><span class="line"># 是否传播这个日志到祖先logger, 如果设置了False 就不会传到root logger(祖先Logger)的</span><br><span class="line"># 默认StreamHandler那里， 也就是不会打印在页面上</span><br><span class="line">logger.propagate = False</span><br><span class="line"># 添加handler, 决定日志落地到哪里，可以多个</span><br><span class="line"># 这个是记录在文件的Handler</span><br><span class="line">apps_handler = logging.FileHandler(filename="apps.log")</span><br><span class="line"># 设置这个handler的处理格式， 实例化一个Formatter对象</span><br><span class="line">apps_formatter = logging.Formatter('%(asctime)s:%(name)s:%(levelname)s:%(message)s')</span><br><span class="line">apps_handler.setFormatter(apps_formatter)</span><br><span class="line">logger.addHandler(apps_handler)</span><br><span class="line"># 日志会打印到apps.log, 并且不会输出到屏幕（如果logger.propagate=True就会）</span><br><span class="line">logger.debug('shit')</span><br><span class="line"></span><br><span class="line"># 定义一个新的logger</span><br><span class="line">child_logger = logging.getLogger('apps.owan')</span><br><span class="line"># 因为这个child_logger 是apps.owan， 它是继承了apps这个logger</span><br><span class="line"># 这个child_logger.propagate 默认是True</span><br><span class="line"># 所以还是会传到它的祖先logger 也就是apps</span><br><span class="line">child_logger.info('haha')</span><br><span class="line"># 所以这个info 是会传播到apps 所以apps.log会出现这个日志。</span><br><span class="line"># 这里充分说明logger的继承关系</span><br><span class="line">tail apps.log</span><br><span class="line"># apps ，apps.owan 的logger都把日志写到apps.log了, 而且格式一样</span><br><span class="line"># 因为child_logger没有设置handler 和 formatter, 默认传播到祖先那里apps 的logger</span><br><span class="line">2018-01-30 16:00:10,258:apps:DEBUG:apps logger coming</span><br><span class="line">2018-01-30 16:00:10,258:apps.owan:INFO:i am apps child_logger</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 日志 </tag>
            
            <tag> logging </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MIMEMultipart类型</title>
      <link href="/posts/a4c8cbed.html"/>
      <url>/posts/a4c8cbed.html</url>
      
        <content type="html"><![CDATA[<p>MIME邮件中各种不同类型的内容是分段存储的，各个段的排列方式、位置信息都通过Content-Type域的multipart类型来定义。multipart类型主要有三种子类型：mixed、alternative、related。<br>（1） MIMEMultipart类型基本格式<br>● MIMEMultipart（‘mixed’）类型<br>如果一封邮件中含有附件，那邮件的中必须定义multipart/mixed类型，邮件通过multipart/mixed类型中定义的boundary标识将附件内容同邮件其它内容分成不同的段。基本格式如下：<br>msg=MIMEMultipart(‘mixed’)</p><p>● MIMEMultipart(‘alternative’)类型<br>MIME邮件可以传送超文本内容，但出于兼容性的考虑，一般在发送超文本格式内容的同时会同时发送一个纯文本内容的副本，如果邮件中同时存在纯文本和超文本内容，则邮件需要在Content-Type域中定义multipart/alternative类型，邮件通过其boundary中的分段标识将纯文本、超文本和邮件的其它内容分成不同的段。基本格式如下：<br>msg=MIMEMultipart(‘alternative’)</p><p>● MIMEMultipart(‘related’)类型<br>MIME邮件中除了可以携带各种附件外，还可以将其它内容以内嵌资源的方式存储在邮件中。比如我们在发送html格式的邮件内容时，可能使用图像作为 html的背景，html文本会被存储在alternative段中，而作为背景的图像则会存储在multipart/related类型定义的段中。基本格式如下：<br>msg=MIMEMultipart(‘related’)</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 编码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编码 </tag>
            
            <tag> MIMEMultipart </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>base64编码解码</title>
      <link href="/posts/e20d3576.html"/>
      <url>/posts/e20d3576.html</url>
      
        <content type="html"><![CDATA[<p>在使用json传输图片时，需要做格式转换。<br>图片是以二进制的数据形式存储在数据库，如果直接用json包装二进制数据时，会报错。</p><p>所以需要将二进制数据使用base64编码后再进行json传输。</p><p>encode和decode是字符串到二进制的编码和解码。<br>而base64的编码是在二进制的基础上，即base64格式的数据解码为二进制数据。</p><p>个人理解base64是作为一种在现有编码的基础上再次进行加密的编码。</p><blockquote><p>Base64编码是从二进制到字符的过程，可用于在HTTP环境下传递较长的标识信息。<br>编码 b64encode<br>解码 b64decode</p></blockquote><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import base64</span><br><span class="line"> </span><br><span class="line">st = 'hello world!'.encode()#默认以utf8编码</span><br><span class="line"></span><br><span class="line">res = base64.b64encode(st) # 使用base64编码</span><br><span class="line">print(res.decode())#默认以utf8解码</span><br><span class="line"></span><br><span class="line">res = base64.b64decode(res)</span><br><span class="line">print(res.decode())#默认以utf8解码</span><br></pre></td></tr></tbody></table></figure><p>结果</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">aGVsbG8gd29ybGQh</span><br><span class="line">hello world!</span><br></pre></td></tr></tbody></table></figure><p><strong>第一次解码</strong></p><p>aGVsbG8gd29ybGQh<br>此时是 “hello world” 在被base64编码的基础上进行的解码  ， 类似于加密后数据进行utf-8解码     。</p><p><strong>第二次解码</strong><br>hello world!<br>b64decode 为解码 ，相当于解密。 所以可以打印 hello world！</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 编码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编码 </tag>
            
            <tag> base64 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一些关于编码的问题</title>
      <link href="/posts/564e55e4.html"/>
      <url>/posts/564e55e4.html</url>
      
        <content type="html"><![CDATA[<h2 id="ASCII"><strong>ASCII</strong></h2><p>（American Standard Code for Information Interchange）编码不能表示汉字中文</p><h2 id="GB2312"><strong>GB2312</strong></h2><p>GB2312 是对 ASCII 的中文扩展。</p><h2 id="GBK"><strong>GBK</strong></h2><p>GB2312的基础上扩展，增加了近20000个新的汉字（包括繁体字）和符号。</p><h2 id="GB18030"><strong>GB18030</strong></h2><p>GBK的基础上扩展，又加了几千个新的少数民族的字。</p><h2 id="UNICODE">UNICODE</h2><p>ISO（国际标谁化组织）制订。统一包含所有国家的编码。是一种字符集，不属于编码。</p><h2 id="UTF-8">UTF-8</h2><p>解决unicode在互联网的传输问题，每次8个位传输数据，是unicode的一种实现方式。<br>为传输而设计的编码，并使编码无国界，这样就可以显示全世界上所有文化的字符了。</p><h2 id="提示-：">提示 ：</h2><p>windows cmd 窗口下不支持utf-8，想要显示中文必须转换为gbk或者unicode。<br>在 Python idle 和 cmd 下直接输入 s = "中文"会以 gbk 编码的。<br>而 Python idle 中这三种编码都支持。<br>中文乱码的出现都是由于编码不一致导致的，存储的是用utf-8，打印的时候用gbk就会乱码了，所有要保证不乱码尽量保持统一，建议全部使用unicode。</p><h2 id="设置编码">设置编码</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line">reload(sys) </span><br><span class="line">sys.setdefaultencoding('utf-8')</span><br></pre></td></tr></tbody></table></figure><p>不同编码之间不能直接转化，先转换为unicode。<br>raw_input提示字符串只能为gbk编码</p><p>chardet 可以查看字符串编码格式。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; import chardet</span><br><span class="line">&gt;&gt;&gt; chardet.detect('abc123')</span><br><span class="line">{'confidence': 1.0, 'encoding': 'ascii'}</span><br><span class="line">&gt;&gt;&gt; chardet.detect('中国')</span><br><span class="line">{'confidence': 0.7525, 'encoding': 'utf-8'}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 编码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python_imap收取邮件 + 邮件内容解析</title>
      <link href="/posts/d9efb0cc.html"/>
      <url>/posts/d9efb0cc.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">import email</span><br><span class="line">import imaplib</span><br><span class="line">import re</span><br><span class="line"></span><br><span class="line">from openerp import http</span><br><span class="line">from email import header</span><br><span class="line"></span><br><span class="line">class Advertisefor(http.Controller):</span><br><span class="line"></span><br><span class="line">    @http.route('/advertisefor/getemaillist/', type='http', csrf=False, auth='user')</span><br><span class="line">    def get_eamil_list_action(self, **kw):</span><br><span class="line">        query = []</span><br><span class="line">        recv_config = http.request.env['emailrecvconfig'].search_read(query,order='create_date desc')</span><br><span class="line"></span><br><span class="line">        # 取最新的配置</span><br><span class="line">        recv_config = recv_config[0]</span><br><span class="line">        email_address = recv_config['address']</span><br><span class="line">        email_password = recv_config['pwd']</span><br><span class="line">        imap_server_host = recv_config['imap_server']</span><br><span class="line">        imap_server_port = recv_config['server_port']</span><br><span class="line"></span><br><span class="line">        try:</span><br><span class="line">            email_server = imaplib.IMAP4_SSL(host=imap_server_host, port=imap_server_port)</span><br><span class="line">            print "imap4----connect server success, now will check username"</span><br><span class="line">        except:</span><br><span class="line">            print"imap4----sorry the given email server address connect time out"</span><br><span class="line">            exit(1)</span><br><span class="line">        try:</span><br><span class="line">            email_server.login(email_address,email_password)</span><br><span class="line">            print "imap4----username exist, now will check password"</span><br><span class="line">        except:</span><br><span class="line">            print"imap4----sorry the given email address or password seem do not correct"</span><br><span class="line">            exit(1)</span><br><span class="line"></span><br><span class="line">        email_server.select()</span><br><span class="line">        email_count = len(email_server.search(None, 'ALL')[1][0].split())</span><br><span class="line"></span><br><span class="line">        for e in reversed(range(1,email_count+1)):</span><br><span class="line">            typ, email_content = email_server.fetch('{}'.format(e).encode(), '(RFC822)')</span><br><span class="line">            email_content = email.message_from_string(email_content[0][1])</span><br><span class="line"></span><br><span class="line">            msg_id = email.utils.parseaddr(email_content.get('message-id'))[1]</span><br><span class="line">            model_email = http.request.env['emailinfos']</span><br><span class="line">            msg_ret = model_email.search_read([('email_msg_id','=',msg_id)])</span><br><span class="line">            if len(msg_ret) &gt; 0:</span><br><span class="line">                continue</span><br><span class="line">            else:</span><br><span class="line">                # 头</span><br><span class="line">                res_head = self.parseHeader(email_content)</span><br><span class="line">                # 内容 及 附件</span><br><span class="line">                res_body = self.parseBody(email_content)</span><br><span class="line"></span><br><span class="line">                res_head['email_body'] = res_body['email_body']</span><br><span class="line">                res_head['email_msg_id'] = msg_id</span><br><span class="line"></span><br><span class="line">                new_obj = model_email.create(res_head)</span><br><span class="line"></span><br><span class="line">                if res_body.has_key('attachment'):</span><br><span class="line">                    dic_att = res_body['attachment']</span><br><span class="line">                    model_attachment = http.request.env['ir.attachment']</span><br><span class="line">                    dic_att['res_id'] = new_obj['id']</span><br><span class="line">                    new_att = model_attachment.create(dic_att)</span><br><span class="line">                    print new_att</span><br><span class="line"></span><br><span class="line">        # 关闭select</span><br><span class="line">        email_server.close()</span><br><span class="line">        # 关闭连接</span><br><span class="line">        email_server.logout()</span><br><span class="line"></span><br><span class="line">    def parseHeader(self,message):</span><br><span class="line">        """ 解析邮件首部 """</span><br><span class="line">        subject = self.parseMailSubject(message)</span><br><span class="line">        rslt = self.transformDate(email.utils.parseaddr(message.get_all('date'))[1])</span><br><span class="line"></span><br><span class="line">        return {'email_subject':subject,</span><br><span class="line">                'email_from':email.utils.parseaddr(message.get('from'))[1],</span><br><span class="line">                'email_to':email.utils.parseaddr(message.get('to'))[1],</span><br><span class="line">                'email_cc':email.utils.parseaddr(message.get_all('cc'))[1],</span><br><span class="line">                'email_date':rslt}</span><br><span class="line"></span><br><span class="line">    def parseBody(self,message):</span><br><span class="line">        """ 解析邮件/信体 """</span><br><span class="line">        # 循环信件中的每一个mime的数据块</span><br><span class="line">        tmp_dict = {}</span><br><span class="line">        for part in message.walk():</span><br><span class="line">            # 这里要判断是否是multipart，是的话，里面的数据是一个message 列表</span><br><span class="line">            if not part.is_multipart():</span><br><span class="line">                charset = part.get_charset()</span><br><span class="line">                contenttype = part.get_content_type()</span><br><span class="line">                finame = part.get_filename()</span><br><span class="line">                name = part.get_param("name")  # 如果是附件，这里就会取出附件的文件名</span><br><span class="line">                if name:</span><br><span class="line">                    # 有附件</span><br><span class="line">                    fh = email.Header.Header(name)</span><br><span class="line">                    fdh = email.Header.decode_header(fh)</span><br><span class="line">                    fname = fdh[0][0]</span><br><span class="line">                    encodeStr = fdh[0][1]</span><br><span class="line">                    if encodeStr != None:</span><br><span class="line">                        if charset == None:</span><br><span class="line">                            fname = fname.decode(encodeStr, 'gbk')</span><br><span class="line">                        else:</span><br><span class="line">                            fname = fname.decode(encodeStr, charset)</span><br><span class="line">                    print '附件名:', fname</span><br><span class="line"></span><br><span class="line">                    attach_data = part.get_payload(decode=True) #　解码出附件数据，然后存储</span><br><span class="line">                    tmp_dict['attachment'] = {'datas_fname': fname,'db_datas':attach_data,'name':fname,'res_model':'emailinfos'}</span><br><span class="line">                else:</span><br><span class="line">                    if contenttype == 'text/plain' or contenttype == 'text/html':</span><br><span class="line">                        # 纯文本或HTML内容:</span><br><span class="line">                        content = part.get_payload(decode=True)</span><br><span class="line">                        # 要检测文本编码:</span><br><span class="line">                        charset = self.guess_charset(part)</span><br><span class="line">                        if charset:</span><br><span class="line">                            content = content.decode(charset)</span><br><span class="line">                    tmp_dict['email_body'] = content</span><br><span class="line"></span><br><span class="line">        return tmp_dict</span><br><span class="line"></span><br><span class="line">    def getYear(self,date):</span><br><span class="line">        rslt = re.search(r'\b2\d{3}\b', date)</span><br><span class="line">        return int(rslt.group())</span><br><span class="line"></span><br><span class="line">    def getMonth(self,date):</span><br><span class="line">        monthMap = {'Jan': 1, 'Feb': 2, 'Mar': 3, 'Apr': 4, 'May': 5, 'Jun': 6,</span><br><span class="line">                    'Jul': 7, 'Aug': 8, 'Sep': 9, 'Oct': 10, 'Nov': 11, 'Dec': 12,}</span><br><span class="line"></span><br><span class="line">        rslt = re.findall(r'\b\w{3}\b', date)</span><br><span class="line">        for i in range(len(rslt)):</span><br><span class="line">            month = monthMap.get(rslt[i])</span><br><span class="line">            if None != month:</span><br><span class="line">                break</span><br><span class="line">        return month</span><br><span class="line"></span><br><span class="line">    def getDay(self,date):</span><br><span class="line">        rslt = re.search(r'\b\d{1,2}\b', date)</span><br><span class="line">        return int(rslt.group())</span><br><span class="line"></span><br><span class="line">    def getTime(self,date):</span><br><span class="line">        rslt = re.search(r'\b\d{2}:\d{2}:\d{2}\b', date)</span><br><span class="line">        timeList = rslt.group().split(':')</span><br><span class="line"></span><br><span class="line">        for i in range(len(timeList)):</span><br><span class="line">            timeList[i] = int(timeList[i])</span><br><span class="line"></span><br><span class="line">        return timeList</span><br><span class="line"></span><br><span class="line">    def transformDate(self,date):</span><br><span class="line">        year = self.getYear(date)</span><br><span class="line">        month = self.getMonth(date)</span><br><span class="line">        day = self.getDay(date)</span><br><span class="line">        rslt = '{}-{}-{} '.format(year,month,day)</span><br><span class="line"></span><br><span class="line">        timeList = self.getTime(date)</span><br><span class="line"></span><br><span class="line">        timeList = map(str,timeList)</span><br><span class="line">        timeList = ':'.join(timeList)</span><br><span class="line">        rslt = rslt + timeList</span><br><span class="line"></span><br><span class="line">        return rslt</span><br><span class="line"></span><br><span class="line">    def parseMailSubject(self,msg):</span><br><span class="line">        subSrt = msg.get('subject')</span><br><span class="line">        if None == subSrt:</span><br><span class="line">            subject = '无主题'</span><br><span class="line">        else:</span><br><span class="line">            subList = header.decode_header(subSrt)</span><br><span class="line">            subinfo = subList[0][0]</span><br><span class="line">            subcode = subList[0][1]</span><br><span class="line">            if not subcode:</span><br><span class="line">                subject = subinfo</span><br><span class="line">            else:</span><br><span class="line">                if isinstance(subinfo, bytes):</span><br><span class="line">                    subject = subinfo.decode(subcode)</span><br><span class="line">                else:</span><br><span class="line">                    subject = subinfo</span><br><span class="line">        return subject</span><br><span class="line"></span><br><span class="line">    def guess_charset(self,msg):</span><br><span class="line">        charset = msg.get_charset()</span><br><span class="line">        if charset is None:</span><br><span class="line">            content_type = msg.get('Content-Type', '').lower()</span><br><span class="line">            pos = content_type.find('charset=')</span><br><span class="line">            if pos &gt;= 0:</span><br><span class="line">                charset = content_type[pos + 8:].strip()</span><br><span class="line">        return charset</span><br></pre></td></tr></tbody></table></figure><p>解析邮件内容：</p><pre><code>邮件时间格式   Thu, 18 Apr 2019 15:39:36 +0800  转为datetime类型。年月日时间，分开解析</code></pre><p>主题及内容 需要获取编码 解码 否则所有不是utf-8编码的都会出现乱码。</p><p>MIME实例对象的方法：</p><pre><code>as_string() ：返回字符串信息，相当于__str__(),str(msg)as_bytes() ：返回字节信息，相当于__bytes__(),bytes(msg)is_multipart() ：判断是否为有效载荷的列表message对象，是返回True,否则返回Falseset_unixfrom(unixfrom) ：将消息的信封头设置为unixfrom为字符串get_unixfrom() ：返回消息的信封头。默认为Noneattach(payload) ：将给定的有效负载添加到当前有效负载get_payload(i=None, decode=False) ：返回当前的有效载荷，这将是一个列表 Messageset_payload(payload, charset=None) :将整个消息对象的有效载荷设置为有效载荷set_charset(charset) ；将有效负载的字符集设置为charsetget_charset() :返回Charset与消息有效负载相关的实例__len__() :返回标题的总数，包括重复项__contains__(name) :如果消息对象具有名为name的字段，则返回true__getitem__(name) :返回指定标题字段的值__setitem__(name, val) :将字段添加到带有字段名称和值val的消息中__delitem__(name) :从消息的标题中删除所有出现的具有名称name的字段keys() :返回所有消息标题字段名称的列表values() :返回所有消息字段值的列表items() ：返回包含所有消息的字段标题和值add_header(_name, _value, **_params) :扩展标题设置,_name为要添加的标题字段，_value为标题的值。</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 邮件解析 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
