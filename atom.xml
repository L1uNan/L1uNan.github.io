<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>NanPy</title>
  
  <subtitle>最好的关系是互相成就</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://nanpy.top/"/>
  <updated>2020-12-18T01:19:35.179Z</updated>
  <id>http://nanpy.top/</id>
  
  <author>
    <name>L1uNan</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>git 快捷指令</title>
    <link href="http://nanpy.top/posts/c92b4e2f.html"/>
    <id>http://nanpy.top/posts/c92b4e2f.html</id>
    <published>2020-12-01T03:14:44.000Z</published>
    <updated>2020-12-18T01:19:35.179Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">g - git</span><br><span class="line">gst - git status</span><br><span class="line">gl - git pull</span><br><span class="line">gup - git pull --rebase</span><br><span class="line">gp - git push</span><br><span class="line">gd - git diff</span><br><span class="line">gdc - git diff --cached</span><br><span class="line">gdv - git diff -w <span class="string">"<span class="variable">$@</span>"</span> | view</span><br><span class="line">gc - git commit -v</span><br><span class="line">gc! - git commit -v --amend</span><br><span class="line">gca - git commit -v -a</span><br><span class="line">gca! - git commit -v -a --amend</span><br><span class="line">gcmsg - git commit -m</span><br><span class="line">gco - git checkout</span><br><span class="line">gcm - git checkout master</span><br><span class="line">gr - git remote</span><br><span class="line">grv - git remote -v</span><br><span class="line">grmv - git remote rename</span><br><span class="line">grrm - git remote remove</span><br><span class="line">gsetr - git remote <span class="built_in">set</span>-url</span><br><span class="line">grup - git remote update</span><br><span class="line">grbi - git rebase -i</span><br><span class="line">grbc - git rebase --<span class="built_in">continue</span></span><br><span class="line">grba - git rebase --abort</span><br><span class="line">gb - git branch</span><br><span class="line">gba - git branch -a</span><br><span class="line">gcount - git shortlog -sn</span><br><span class="line">gcl - git config --list</span><br><span class="line">gcp - git cherry-pick</span><br><span class="line">glg - git <span class="built_in">log</span> --<span class="built_in">stat</span> --max-count=10</span><br><span class="line">glgg - git <span class="built_in">log</span> --graph --max-count=10</span><br><span class="line">glgga - git <span class="built_in">log</span> --graph --decorate --all</span><br><span class="line">glo - git <span class="built_in">log</span> --oneline --decorate --color</span><br><span class="line">glog - git <span class="built_in">log</span> --oneline --decorate --color --graph</span><br><span class="line">gss - git status -s</span><br><span class="line">ga - git add</span><br><span class="line">gm - git merge</span><br><span class="line">grh - git reset HEAD</span><br><span class="line">grhh - git reset HEAD --hard</span><br><span class="line">gclean - git reset --hard &amp;&amp; git clean -dfx</span><br><span class="line">gwc - git whatchanged -p --abbrev-commit --pretty=medium</span><br><span class="line">gsts - git stash show --text</span><br><span class="line">gsta - git stash</span><br><span class="line">gstp - git stash pop</span><br><span class="line">gstd - git stash drop</span><br><span class="line">ggpull - git pull origin $(current_branch)</span><br><span class="line">ggpur - git pull --rebase origin $(current_branch)</span><br><span class="line">ggpush - git push origin $(current_branch)</span><br><span class="line">ggpnp - git pull origin $(current_branch) &amp;&amp; git push origin $(current_branch)</span><br><span class="line">glp - _git_log_prettily</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span
      
    
    </summary>
    
    
      <category term="git" scheme="http://nanpy.top/categories/git/"/>
    
    
      <category term="git" scheme="http://nanpy.top/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>celery项目中的应用</title>
    <link href="http://nanpy.top/posts/7208b3f4.html"/>
    <id>http://nanpy.top/posts/7208b3f4.html</id>
    <published>2020-11-22T11:00:00.000Z</published>
    <updated>2020-12-18T01:19:35.182Z</updated>
    
    <content type="html"><![CDATA[<h2 id="celery项目结构">celery项目结构</h2><p>因为celery是一个单独的应用. 所以他可以在任何地方. 你可以把celery当作一个app 放进你的项目里.</p><p>我的目录结构是这样的</p><ul><li>IMCenter<ul><li><strong>init</strong>.py</li><li><a href="http://celery.py" target="_blank" rel="noopener">celery.py</a></li><li>celery_cfg.py</li><li><a href="http://tasks.py" target="_blank" rel="noopener">tasks.py</a></li></ul></li></ul><p>代码就是参考<a href="https://www.celerycn.io/" target="_blank" rel="noopener">celery官方教程</a>写的了.</p><h3 id="celery-py"><a href="http://celery.py" target="_blank" rel="noopener">celery.py</a></h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> absolute_import, unicode_literals</span><br><span class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> Celery</span><br><span class="line"></span><br><span class="line">__author__ = <span class="string">"LiuNan"</span></span><br><span class="line">__date__ = <span class="string">"2020/12/16 4:31 下午"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .celery_cfg <span class="keyword">import</span> backend, brokers</span><br><span class="line"></span><br><span class="line">celery_app = Celery(<span class="string">'IMCenter'</span>,</span><br><span class="line">                    broker=brokers,</span><br><span class="line">                    backend=backend,</span><br><span class="line">                    include=[<span class="string">'IMCenter.tasks'</span>])</span><br><span class="line"></span><br><span class="line">celery_app.conf.update(</span><br><span class="line">    result_expires=<span class="number">3600</span>,</span><br><span class="line">)</span><br><span class="line">celery_app.conf.timezone = <span class="string">'Asia/Shanghai'</span></span><br></pre></td></tr></tbody></table></figure><h3 id="tasks-py"><a href="http://tasks.py" target="_blank" rel="noopener">tasks.py</a></h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> absolute_import, unicode_literals</span><br><span class="line"></span><br><span class="line">__author__ = <span class="string">"LiuNan"</span></span><br><span class="line">__date__ = <span class="string">"2020/12/16 4:31 下午"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jpush</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .celery <span class="keyword">import</span> celery_app</span><br><span class="line"></span><br><span class="line">_logger = logging.getLogger(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@celery_app.task</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">myPush</span><span class="params">(a,b,c,d)</span>:</span></span><br><span class="line">    <span class="comment"># 生产环境推送</span></span><br><span class="line">    print(<span class="string">'发送短信中'</span>)</span><br></pre></td></tr></tbody></table></figure><h3 id="celery-cfg-py">celery_cfg.py</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line">__author__ = <span class="string">"LiuNan"</span></span><br><span class="line">__date__ = <span class="string">"2020/12/16 4:31 下午"</span></span><br><span class="line"></span><br><span class="line">brokers = <span class="string">"redis://:password@localhost:6379/1"</span></span><br><span class="line">backend = <span class="string">"redis://:password@localhost:6379/2"</span></span><br></pre></td></tr></tbody></table></figure><h2 id="celery-的启动">celery 的启动</h2><p>切换到celery所在项目的目录<br><img src="/img/loading.gif" class="lazyload" data-src="https://img-blog.csdnimg.cn/202012171822026.png"  alt="在这里插入图片描述"></p><ul><li><p>前台启动命令<br><code>celery -A IMCenter worker -l info</code><br>启动成功的界面 如下 :<br><img src="/img/loading.gif" class="lazyload" data-src="https://img-blog.csdnimg.cn/20201217182408348.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5OTEwMw==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"></p></li><li><p>后台启动命令<br>我在这里使用的是supervisor后期启动服务的. <a href="https://blog.csdn.net/weixin_43199103/article/details/111319101" target="_blank" rel="noopener">传送门</a></p></li></ul><p>完事儿了, 就这么简单. 生产者调用task就行了.</p><h2 id="celery任务的调用">celery任务的调用</h2><p>这样</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> openerp.IMCenter.celery <span class="keyword">import</span> </span><br><span class="line">task_args = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">celery_appcelery_app.send_task(<span class="string">'IMCenter.tasks.myPush'</span>,args=task_args)</span><br></pre></td></tr></tbody></table></figure><h3 id="delay">delay</h3><blockquote><p>apply_async方法的别名，但接受的参数较为简单</p></blockquote><p><code>task.delay()</code></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myPush.delay(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br></pre></td></tr></tbody></table></figure><h3 id="apply-async">apply_async</h3><blockquote><p>常用</p></blockquote><p><code>task.apply_async(args=[arg1,args],kwargs={key:value})</code><br>可以接受复杂的参数</p><ul><li>task_id：为任务分配唯一id，默认是uuid</li><li>countdown：设置该任务等待一段时间在执行，单位为秒</li><li>eta：定义任务的开始时间，eta=time.time()+5，单位为秒，是UTC时间，设置成国内时间也没有用</li><li>expires：设置任务过期时间，任务在过期时间后还没有执行则被丢弃，单位为秒</li><li>retry：如果任务失败后，是否重试，默认为True</li><li>shadow：重新指定任务的名字，覆盖其在日志中使用的任务名称</li><li>retry_policy:{} 重试策略，<ul><li>max_retries:最大重试次数，默认为3次。</li><li>interval_start:重试等待的时间间隔，默认为0。</li><li>interval_step:每次重试让重试间隔增加的秒数，默认为0.2秒。</li><li>interval_max:重试间隔最大的秒数，既通过interval_step增大到多少秒之后，就不在增加了，默认为0.2秒。</li></ul></li><li>routing_key:自定义路由键</li><li>queue：指定发送到哪个队列</li><li>exchange：指定发送到哪个交换机</li><li>priority：任务队列的优先级，0到255之间，对于rabbitmq来说0是最高优先级</li><li>headers：为任务添加额外的消息</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 任务my_task将会被发送到my_queue队列中，并且在发送10秒之后执行。</span></span><br><span class="line">myPush.apply_async((<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>), queue=<span class="string">'my_queue'</span>, countdown=<span class="number">10</span>)</span><br></pre></td></tr></tbody></table></figure><h3 id="send-task">send_task</h3><blockquote><p>不建议用，因为不会校验是否存在这个方法，直接就发送成功里，celery执行就会报错</p></blockquote><p><code>app.send_task(task1.add,args=[1,2])</code></p><ul><li>name：可以显示指定任务的名字，默认是本函数的名字，也就是上面的 shadow</li><li>bind：一个bool值，设置是否绑定一个task的实例，如果绑定，task实例会作为参数传递到任务方法中（第一个参数为self），可以访问task实例的所有属性。</li><li>base：定义任务的基类，可以以此来定义回调函数，默认是Task类，我们也可以定义自己的Task类</li><li>default_retry_delay：设置该任务重试的延迟时间，当任务执行失败后，会自动重试，单位是秒，默认为3分钟</li></ul><h2 id="Flower-Celery-监控工具的使用">Flower Celery 监控工具的使用</h2><ol><li>安装<br><code>$ pip install flower</code></li><li>运行<br><code>flower --port=5555</code><br>或者<br><code>$ celery flower --address=127.0.0.1 --port=5555</code></li><li>打开 <a href="http://localhost:5555" target="_blank" rel="noopener">http://localhost:5555</a>:</li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;celery项目结构&quot;&gt;celery项目结构&lt;/h2&gt;
&lt;p&gt;因为celery是一个单独的应用. 所以他可以在任何地方. 你可以把celery当作一个app 放进你的项目里.&lt;/p&gt;
&lt;p&gt;我的目录结构是这样的&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;IMCenter
&lt;ul&gt;
      
    
    </summary>
    
    
      <category term="python" scheme="http://nanpy.top/categories/python/"/>
    
    
      <category term="python" scheme="http://nanpy.top/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>celery利用supervisor后台运行方案</title>
    <link href="http://nanpy.top/posts/4636e0db.html"/>
    <id>http://nanpy.top/posts/4636e0db.html</id>
    <published>2020-11-21T11:00:00.000Z</published>
    <updated>2020-12-18T01:19:35.181Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装">安装</h2><p><code>pip install supervisor</code></p><h2 id="测试是否成功">测试是否成功</h2><p><code>echo_supervisord_conf</code></p><h2 id="创建配置文件">创建配置文件</h2><p><code>mkdir -m 755 -p /etc/supervisor/</code><br><code>cd /etc/supervisor/</code><br><code>mkdir -m 755 conf.d</code><br><code>echo_supervisord_conf &gt; /etc/supervisor/supervisord.conf</code><br>目录结构如下:<br><img src="/img/loading.gif" class="lazyload" data-src="https://img-blog.csdnimg.cn/20201217165005303.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5OTEwMw==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"></p><p>在conf.d目录下创建配置文件<code>celeryd.ini</code><br>内容如下:</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[program:celeryd]</span><br><span class="line">directory=/home/odoo/odoo_src/openerp</span><br><span class="line"><span class="built_in">command</span>=/usr/bin/celery -A IMCenter.tasks worker --loglevel=INFO --concurrency=15</span><br><span class="line">stdout_logfile=/var/<span class="built_in">log</span>/supervisor/celeryd.log</span><br><span class="line">stderr_logfile=/var/<span class="built_in">log</span>/supervisor/celeryd.log</span><br><span class="line">autostart=<span class="literal">true</span></span><br><span class="line">autorestart=<span class="literal">true</span></span><br><span class="line">startsecs=10</span><br><span class="line">[supervisord]</span><br></pre></td></tr></tbody></table></figure><h2 id="添加配置文件到主配置文件">添加配置文件到主配置文件</h2><p><code>vim /etc/supervisor/supervisord.conf </code><br>文件最后面 include注释打开</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[include]</span><br><span class="line">files = /etc/supervisor/conf.d/*.ini /etc/supervisor/example.ini  </span><br><span class="line">; 多个路径用空格隔开就可以了</span><br></pre></td></tr></tbody></table></figure><h2 id="启动supervisor">启动supervisor</h2><blockquote><p>supervisor有两个命令，supervisord和supervisorctl，<br>通过supervisord管理启动和配置supervisor本身，<br>通过supervisorctl来管理使用supervisor启动和管理的自身的一些应用，<a href="http://xn--celeryd-2d5kx00f9rtln5ca8145fvyf.py" target="_blank" rel="noopener">如我们的这里的celeryd.py</a></p></blockquote><ul><li><p>启动supervisor<br><code>   supervisord -c /etc/supervisor/supervisord.conf </code></p></li><li><p>关闭supervisor<br><code>supervisorctl shutdown  </code><br>如果先建的celeryd.ini(控制文件)，在使用启动命令后这些经过配置的程序也会启动</p></li><li><p>查看supervisor 启动的服务状态<br><code>supervisorctl status</code><br><img src="/img/loading.gif" class="lazyload" data-src="https://img-blog.csdnimg.cn/20201217165531791.png"  alt="在这里插入图片描述"></p></li><li><p>启动程序 celeryd.ini<br><code>supervisorctl start program_name  </code><br>这里的program的name是配置文件ini中的[program:name]，所以这里的program_name是<code>celeryd</code><br><img src="/img/loading.gif" class="lazyload" data-src="https://img-blog.csdnimg.cn/20201217165634463.png"  alt="在这里插入图片描述"></p></li><li><p>关闭程序 celeryd.ini<br><code>supervisorctl stop program_name  </code><br><img src="/img/loading.gif" class="lazyload" data-src="https://img-blog.csdnimg.cn/20201217165606764.png"  alt="在这里插入图片描述"></p></li><li><p>刷新配置文件 如果启动后，修改了ini文件，可以通过reload命令来刷新<br><code> supervisorctl reload </code></p></li><li><p>查看supervisor的运行状态<br><code>  ps -efH|grep supervisor</code></p></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;安装&quot;&gt;安装&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;pip install supervisor&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;测试是否成功&quot;&gt;测试是否成功&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;echo_supervisord_conf&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=
      
    
    </summary>
    
    
      <category term="python" scheme="http://nanpy.top/categories/python/"/>
    
    
      <category term="python" scheme="http://nanpy.top/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>数据库索引</title>
    <link href="http://nanpy.top/posts/1442515a.html"/>
    <id>http://nanpy.top/posts/1442515a.html</id>
    <published>2020-09-17T13:31:25.000Z</published>
    <updated>2020-09-17T13:40:10.875Z</updated>
    
    <content type="html"><![CDATA[<h2 id="普通索引">普通索引</h2><ul><li>创建</li></ul><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span> indexname <span class="keyword">ON</span> tablename(rowname));</span><br></pre></td></tr></tbody></table></figure><ul><li>修改</li></ul><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> tablename <span class="keyword">ADD</span> <span class="keyword">INDEX</span> indexname <span class="keyword">ON</span> (rowname);</span><br></pre></td></tr></tbody></table></figure><ul><li>删除</li></ul><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">INDEX</span> indexname <span class="keyword">ON</span> tablename;</span><br></pre></td></tr></tbody></table></figure><h2 id="唯一索引">唯一索引</h2><p>索引列的值必须唯一 , 但允许有空值 .<br>如果是 <code>组合索引</code> , 则 列值的 组合 必须唯一.</p><ul><li>创建</li></ul><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> NIQUE <span class="keyword">INDEX</span> indexname <span class="keyword">ON</span> tablename(rowname));</span><br></pre></td></tr></tbody></table></figure><ul><li>修改</li></ul><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> tablename <span class="keyword">ADD</span> NIQUE <span class="keyword">INDEX</span> indexname <span class="keyword">ON</span> (rowname);</span><br></pre></td></tr></tbody></table></figure><h2 id="主键索引">主键索引</h2><p>特殊的唯一索引. 一般是id</p><h2 id="联合索引">联合索引</h2><p>由多个字段组成的索引, 叫做 <code>组合索引</code> .<br>如果分别在 a b c 列 建立单列索引. 效率是远远低于 组合索引的.<br><strong>组合索引(a,b,c)都有哪些排列组合?</strong></p><p>组合索引  遵循<code>“最左前缀”</code>原则。简单的理解就是只从最左面的开始组合。并不是只要包含这三列的查询都会用到该组合索引.</p><blockquote><p>1、组合索引字段<code>无论顺序如何改变</code>都会用到索引，前提是<code>所有字段都在where条件</code>上。<br>2、如果想要使用一个或者两个字段在where条件上，<code>必须有组合索引里的第一个字段</code>，但是与顺序无关，例如a,c或c,a，这种场景是可以命中索引的。但是，<code>b,c或c,b这种是不会命中索引</code>的。<br>3、如果组合索引存在<code>范围查询</code>，则组合索引<code>可能会命中索引</code>，这个跟B+Tree的叶子节点中存储的数据是否在当前的叶子节点中，即InnoDB存储引擎的最小存储单元——页，InnoDB页的大小默认是16k，可以通过参数查看页的默认大小：show global status like ‘innodb_page_size’;如果想要修改InnoDB页的大小，需要通过修改mysql源码才可以修改，找到源码文件(storage/innobase/include/univ.i)，找到参数:UNIV_PAGE_SIZE，该参数必须是2的n次方，例如4k、8k、16k、32k、64k等等。<br>4、<code>order by 只能使用a</code>，才能用到索引。</p></blockquote><h2 id="设计索引注意事项">设计索引注意事项</h2><ul><li>索引不会包含有NULL值的列<br>只要列中包含有NULL值都将不会被包含在索引中，复合索引中只要有一列含有 NULL值，那么这一列对于此复合索引就是无效的。所以我们在数据库设计时不要让字段的默认值为NULL。</li><li>使用短索引<br>对串列进行索引，如果可能应该指定一个前缀长度。例如，如果有一个CHAR(255)的列，如果在前10个或20个字符内，多数值是惟一的，那么就不要对整个列进行索引。短索引不仅可以提高查询速度而且可以节省磁盘空间和I/O操作</li><li>索引列排序<br>MySQL查询只使用一个索引，因此<code>如果 where子句中已经使用了索引的话，那么order by中的列是不会使用索引的</code>。因此数据库默认排序可以符合要求的情况下不要使用排序操作;尽量不要包含多个列的排序，如果需要<code>最好给这些列创建复合索引</code>。</li><li>like 语句操作<br>一般情况下不鼓励使用like操作，如果非使用不可，如何使用也是一个问题。like “%aaa%” 不会使用索引而like “aaa%”可以使用索引。</li><li>不要在列上进行运算   <figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">users</span> <span class="keyword">where</span> <span class="keyword">YEAR</span>(adddate)&lt;<span class="number">2007</span>;</span><br></pre></td></tr></tbody></table></figure>将在每个行上进行运算，这将导致索引失效而进行全表扫描，因此我们可以改成   <figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">users</span> <span class="keyword">where</span> adddate&lt;‘<span class="number">2007</span><span class="number">-01</span><span class="number">-01</span>’;</span><br></pre></td></tr></tbody></table></figure></li><li>不要使用NOT IN和&lt;&gt;操作</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;普通索引&quot;&gt;普通索引&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;创建&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;
      
    
    </summary>
    
    
      <category term="mysql" scheme="http://nanpy.top/categories/mysql/"/>
    
    
      <category term="mysql" scheme="http://nanpy.top/tags/mysql/"/>
    
      <category term="索引" scheme="http://nanpy.top/tags/%E7%B4%A2%E5%BC%95/"/>
    
  </entry>
  
  <entry>
    <title>python安装mysqlclient报错</title>
    <link href="http://nanpy.top/posts/9dffa995.html"/>
    <id>http://nanpy.top/posts/9dffa995.html</id>
    <published>2020-09-16T02:21:06.000Z</published>
    <updated>2020-09-16T04:51:02.149Z</updated>
    
    <content type="html"><![CDATA[<h2 id="OSError-mysql-config-not-found错误">OSError: mysql_config not found错误</h2><p><img src="/img/loading.gif" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200916124617872.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5OTEwMw==,size_16,color_FFFFFF,t_70#pic_center"  alt="在这里插入图片描述"></p><p>输入 :</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PATH="$PATH":/usr/local/mysql/bin/</span><br><span class="line"></span><br><span class="line">mysql_config</span><br></pre></td></tr></tbody></table></figure><p>之后再pip install 就可以了.</p><p><img src="/img/loading.gif" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200916124557642.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5OTEwMw==,size_16,color_FFFFFF,t_70#pic_center"  alt="在这里插入图片描述"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;OSError-mysql-config-not-found错误&quot;&gt;OSError: mysql_config not found错误&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/img/loading.gif&quot; class=&quot;lazyload&quot; data-src=&quot;h
      
    
    </summary>
    
    
      <category term="python" scheme="http://nanpy.top/categories/python/"/>
    
    
      <category term="python" scheme="http://nanpy.top/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>35. 搜索插入位置</title>
    <link href="http://nanpy.top/posts/a8a97330.html"/>
    <id>http://nanpy.top/posts/a8a97330.html</id>
    <published>2020-08-20T09:30:00.000Z</published>
    <updated>2020-08-21T09:34:06.876Z</updated>
    
    <content type="html"><![CDATA[<p>给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。</p><p>你可以假设数组中无重复元素。</p><p>示例 1:</p><blockquote><p>输入: [1,3,5,6], 5<br>输出: 2</p></blockquote><p>示例 2:</p><blockquote><p>输入: [1,3,5,6], 2<br>输出: 1</p></blockquote><p>示例 3:</p><blockquote><p>输入: [1,3,5,6], 7<br>输出: 4</p></blockquote><p>示例 4:</p><blockquote><p>输入: [1,3,5,6], 0<br>输出: 0</p></blockquote><h2 id="题解">题解</h2><p><img src="/img/loading.gif" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200821172812405.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5OTEwMw==,size_16,color_FFFFFF,t_70#pic_center"  alt="在这里插入图片描述"><br><img src="/img/loading.gif" class="lazyload" data-src="https://img-blog.csdnimg.cn/202008211728259.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5OTEwMw==,size_16,color_FFFFFF,t_70#pic_center"  alt="在这里插入图片描述"><br><img src="/img/loading.gif" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200821172842630.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5OTEwMw==,size_16,color_FFFFFF,t_70#pic_center"  alt="在这里插入图片描述"><br><img src="/img/loading.gif" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200821172913516.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5OTEwMw==,size_16,color_FFFFFF,t_70#pic_center"  alt="在这里插入图片描述"><br><img src="/img/loading.gif" class="lazyload" data-src="https://img-blog.csdnimg.cn/2020082117292432.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5OTEwMw==,size_16,color_FFFFFF,t_70#pic_center"  alt="在这里插入图片描述"><br><img src="/img/loading.gif" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200821172935782.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5OTEwMw==,size_16,color_FFFFFF,t_70#pic_center"  alt="在这里插入图片描述"><br><img src="/img/loading.gif" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200821172942336.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5OTEwMw==,size_16,color_FFFFFF,t_70#pic_center"  alt="在这里插入图片描述"></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">searchInsert</span><span class="params">(self, nums: List[int], target: int)</span> -&gt; int:</span></span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        j = len(nums) - <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> i &lt;= j:</span><br><span class="line">            mid = (i + j) // <span class="number">2</span></span><br><span class="line">            <span class="keyword">if</span> target &gt; nums[mid]:</span><br><span class="line">                i = mid + <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> target &lt; nums[mid]:</span><br><span class="line">                j = mid - <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> mid</span><br><span class="line">        <span class="keyword">return</span> i</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。&lt;/p&gt;
&lt;p&gt;你可以假设数组中无重复元素。&lt;/p&gt;
&lt;p&gt;示例 1:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;输入: [1,3,5,6], 5&lt;br&gt;

      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://nanpy.top/categories/leetcode/"/>
    
      <category term="array" scheme="http://nanpy.top/categories/leetcode/array/"/>
    
    
      <category term="leetcode" scheme="http://nanpy.top/tags/leetcode/"/>
    
      <category term="array" scheme="http://nanpy.top/tags/array/"/>
    
  </entry>
  
  <entry>
    <title>674. 最长连续递增序列</title>
    <link href="http://nanpy.top/posts/c2afb9c.html"/>
    <id>http://nanpy.top/posts/c2afb9c.html</id>
    <published>2020-08-20T09:00:00.000Z</published>
    <updated>2020-08-21T09:34:06.877Z</updated>
    
    <content type="html"><![CDATA[<p>给定一个未经排序的整数数组，找到最长且连续的的递增序列，并返回该序列的长度。</p><p>示例 1:</p><blockquote><p>输入: [1,3,5,4,7]<br>输出: 3<br>解释: 最长连续递增序列是 [1,3,5], 长度为3。<br>尽管 [1,3,5,7] 也是升序的子序列, 但它不是连续的，因为5和7在原数组里被4隔开。</p></blockquote><p>示例 2:</p><blockquote><p>输入: [2,2,2,2,2]<br>输出: 1<br>解释: 最长连续递增序列是 [2], 长度为1。</p></blockquote><p>注意：数组长度不会超过10000。</p><h2 id="题解">题解</h2><p>遍历，用一个变量记录递增的最大值。再用一个变量实时记录递增的情况。<br><img src="/img/loading.gif" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200821163942414.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5OTEwMw==,size_16,color_FFFFFF,t_70#pic_center"  alt="在这里插入图片描述"><br><img src="/img/loading.gif" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200821164006641.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5OTEwMw==,size_16,color_FFFFFF,t_70#pic_center"  alt="在这里插入图片描述"><br><img src="/img/loading.gif" class="lazyload" data-src="https://img-blog.csdnimg.cn/2020082116404862.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5OTEwMw==,size_16,color_FFFFFF,t_70#pic_center"  alt="在这里插入图片描述"></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findLengthOfLCIS</span><span class="params">(self, nums: List[int])</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">if</span> len(nums) &lt;= <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> len(nums)</span><br><span class="line">        count = <span class="number">1</span></span><br><span class="line">        ans = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums) - <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> nums[i+<span class="number">1</span>] &gt; nums[i]:</span><br><span class="line">                count += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                count = <span class="number">1</span></span><br><span class="line">            ans = max(ans,count)</span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;给定一个未经排序的整数数组，找到最长且连续的的递增序列，并返回该序列的长度。&lt;/p&gt;
&lt;p&gt;示例 1:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;输入: [1,3,5,4,7]&lt;br&gt;
输出: 3&lt;br&gt;
解释: 最长连续递增序列是 [1,3,5], 长度为3。&lt;br&gt;
尽管
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://nanpy.top/categories/leetcode/"/>
    
      <category term="array" scheme="http://nanpy.top/categories/leetcode/array/"/>
    
    
      <category term="leetcode" scheme="http://nanpy.top/tags/leetcode/"/>
    
      <category term="array" scheme="http://nanpy.top/tags/array/"/>
    
  </entry>
  
  <entry>
    <title>剑指offer53 - II. 0～n-1 中缺失的数字</title>
    <link href="http://nanpy.top/posts/a8d849f.html"/>
    <id>http://nanpy.top/posts/a8d849f.html</id>
    <published>2020-08-19T09:18:00.000Z</published>
    <updated>2020-08-20T09:19:52.323Z</updated>
    
    <content type="html"><![CDATA[<p>一个长度为n-1的递增排序数组中的所有数字都是唯一的，并且每个数字都在范围0～n-1之内。在范围0～n-1内的n个数字中有且只有一个数字不在该数组中，请找出这个数字。</p><p>示例 1:</p><p>输入: [0,1,3]<br>输出: 2<br>示例 2:</p><p>输入: [0,1,2,3,4,5,6,7,9]<br>输出: 8</p><p>限制：</p><p>1 &lt;= 数组长度 &lt;= 10000</p><h2 id="思路">思路</h2><p>数组 ， 有序 ， 考虑二分查找。<br><img src="/img/loading.gif" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200820171134284.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5OTEwMw==,size_16,color_FFFFFF,t_70#pic_center"  alt="在这里插入图片描述"><br><img src="/img/loading.gif" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200820171144433.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5OTEwMw==,size_16,color_FFFFFF,t_70#pic_center"  alt="在这里插入图片描述"><br><img src="/img/loading.gif" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200820171153738.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5OTEwMw==,size_16,color_FFFFFF,t_70#pic_center"  alt="在这里插入图片描述"><br><img src="/img/loading.gif" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200820171202739.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5OTEwMw==,size_16,color_FFFFFF,t_70#pic_center"  alt="在这里插入图片描述"><br><img src="/img/loading.gif" class="lazyload" data-src="https://img-blog.csdnimg.cn/2020082017120957.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5OTEwMw==,size_16,color_FFFFFF,t_70#pic_center"  alt="在这里插入图片描述"><br><strong>复杂度分析：</strong><br>时间复杂度 O(log N)O(logN)： 二分法为对数级别复杂度。<br>空间复杂度 O(1)O(1)： 几个变量使用常数大小的额外空间。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">missingNumber</span><span class="params">(self, nums: List[int])</span> -&gt; int:</span></span><br><span class="line">        i , j = <span class="number">0</span> , len(nums) - <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> i &lt;= j:</span><br><span class="line">            m = (i + j) // <span class="number">2</span></span><br><span class="line">            <span class="keyword">if</span> m == nums[m]:</span><br><span class="line">                i = m + <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                j = m <span class="number">-1</span></span><br><span class="line">        <span class="keyword">return</span> i</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一个长度为n-1的递增排序数组中的所有数字都是唯一的，并且每个数字都在范围0～n-1之内。在范围0～n-1内的n个数字中有且只有一个数字不在该数组中，请找出这个数字。&lt;/p&gt;
&lt;p&gt;示例 1:&lt;/p&gt;
&lt;p&gt;输入: [0,1,3]&lt;br&gt;
输出: 2&lt;br&gt;
示例 2:&lt;/
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://nanpy.top/categories/leetcode/"/>
    
      <category term="array" scheme="http://nanpy.top/categories/leetcode/array/"/>
    
    
      <category term="leetcode" scheme="http://nanpy.top/tags/leetcode/"/>
    
      <category term="array" scheme="http://nanpy.top/tags/array/"/>
    
  </entry>
  
  <entry>
    <title>1144.递减元素使数组呈锯齿状</title>
    <link href="http://nanpy.top/posts/be155960.html"/>
    <id>http://nanpy.top/posts/be155960.html</id>
    <published>2020-08-19T08:17:00.000Z</published>
    <updated>2020-08-20T08:31:02.630Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/img/loading.gif" class="lazyload" data-src="https://img-blog.csdnimg.cn/2020082016233481.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5OTEwMw==,size_16,color_FFFFFF,t_70#pic_center"  alt="在这里插入图片描述"><br>以输入样例 [9, 6, 1, 6, 2] 为例，检查奇数位置，可以将第一个元素 9 减小到 5，如果检查偶数位置，则需要将两个 6 减小到 0。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">movesToMakeZigzag</span><span class="params">(self, nums: List[int])</span> -&gt; int:</span></span><br><span class="line">        odd,even = <span class="number">0</span>,<span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums)):</span><br><span class="line">            <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">                <span class="comment"># 检查偶数位置的元素是不是最小的。</span></span><br><span class="line">                e1 = nums[i] - nums[i<span class="number">-1</span>] + <span class="number">1</span> <span class="keyword">if</span> i &gt; <span class="number">0</span> <span class="keyword">and</span> nums[i] &gt;= nums[i<span class="number">-1</span>] <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">                e2 = nums[i] - nums[i+<span class="number">1</span>] + <span class="number">1</span> <span class="keyword">if</span> i &lt; len(nums) - <span class="number">1</span> <span class="keyword">and</span> nums[i] &gt;= nums[i+<span class="number">1</span>] <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">                even += max(e1,e2)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># 检查奇数元素。</span></span><br><span class="line">                o1 = nums[i] - nums[i<span class="number">-1</span>] + <span class="number">1</span> <span class="keyword">if</span> i &gt; <span class="number">0</span> <span class="keyword">and</span> nums[i] &gt;= nums[i<span class="number">-1</span>] <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">                o2 = nums[i] - nums[i+<span class="number">1</span>] + <span class="number">1</span> <span class="keyword">if</span> i &lt; len(nums) - <span class="number">1</span> <span class="keyword">and</span> nums[i] &gt;= nums[i+<span class="number">1</span>] <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">                odd += max(o1,o2)</span><br><span class="line">        <span class="keyword">return</span> min(odd,even)</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/img/loading.gif&quot; class=&quot;lazyload&quot; data-src=&quot;https://img-blog.csdnimg.cn/2020082016233481.png?x-oss-process=image/watermark,typ
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://nanpy.top/categories/leetcode/"/>
    
      <category term="array" scheme="http://nanpy.top/categories/leetcode/array/"/>
    
    
      <category term="leetcode" scheme="http://nanpy.top/tags/leetcode/"/>
    
      <category term="array" scheme="http://nanpy.top/tags/array/"/>
    
  </entry>
  
  <entry>
    <title>python的deque的用法</title>
    <link href="http://nanpy.top/posts/548a2ed5.html"/>
    <id>http://nanpy.top/posts/548a2ed5.html</id>
    <published>2020-07-29T08:19:19.000Z</published>
    <updated>2020-07-29T09:01:28.821Z</updated>
    
    <content type="html"><![CDATA[<h2 id="deque-介绍">deque 介绍</h2><p>Python中的collentions中有一个deque，这个对象类似于list列表，但是使用list存储数据是，按索引访问元素很快，但是插入和删除就很慢了，因为list是线性存储，数据量大的时候，插入和删除效率很低。<br>但是deque是为了实现插入和删除操作的双向列表，适用于队列和栈：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collection <span class="keyword">import</span> deque</span><br><span class="line"></span><br><span class="line">q = deque([]) <span class="comment"># 使用deque 必须是可迭代对象</span></span><br><span class="line"></span><br><span class="line">dq = deque(range(<span class="number">10</span>), maxlen=<span class="number">10</span>) <span class="comment"># 可以通过maxlen指定队列长度</span></span><br></pre></td></tr></tbody></table></figure><p><img src="/img/loading.gif" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200729163106614.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5OTEwMw==,size_16,color_FFFFFF,t_70"  alt="[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-Q2HqWweb-1596011444350)(evernotecid://9775C0FD-89E0-4480-9298-5F976A0156D5/appyinxiangcom/28787127/ENResource/p28)]"></p><h2 id="添加元素">添加元素</h2><p>deque是通过extend方法初始化集合元素，同时可以通过extendleft/appendleft将结合元素从左边加到集合。</p><ul><li>extend</li><li>append</li><li>extendleft</li><li>appendleft</li></ul><p><img src="/img/loading.gif" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200729163116767.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5OTEwMw==,size_16,color_FFFFFF,t_70"  alt="[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-7LiKNVok-1596011444352)(evernotecid://9775C0FD-89E0-4480-9298-5F976A0156D5/appyinxiangcom/28787127/ENResource/p29)]"></p><h2 id="弹出元素">弹出元素</h2><ul><li>pop</li><li>popleft</li></ul><h2 id="线程">线程</h2><p>deque是线程安全的，也就是说你可以同时从deque集合的左边和右边进行操作而不会有影响</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;deque-介绍&quot;&gt;deque 介绍&lt;/h2&gt;
&lt;p&gt;Python中的collentions中有一个deque，这个对象类似于list列表，但是使用list存储数据是，按索引访问元素很快，但是插入和删除就很慢了，因为list是线性存储，数据量大的时候，插入和删除效
      
    
    </summary>
    
    
      <category term="python" scheme="http://nanpy.top/categories/python/"/>
    
    
      <category term="python" scheme="http://nanpy.top/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>104. 二叉树的最大深度</title>
    <link href="http://nanpy.top/posts/ff0c5d84.html"/>
    <id>http://nanpy.top/posts/ff0c5d84.html</id>
    <published>2020-07-29T01:59:19.000Z</published>
    <updated>2020-08-20T08:33:11.784Z</updated>
    
    <content type="html"><![CDATA[<h2 id="二叉树的遍历">二叉树的遍历</h2><p>二叉树的遍历方式主要有：先序遍历、中序遍历、后序遍历、层次遍历。<br><img src="/img/loading.gif" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200729163220713.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5OTEwMw==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"></p><h3 id="深度优先遍历-DFS（Depth-First-Search）">深度优先遍历 DFS（Depth-First-Search）</h3><blockquote><p>DFS 有三种<br>先序遍历：遍历顺序规则为【根左右】<br>中序遍历：遍历顺序规则为【左根右】<br>后序遍历：遍历顺序规则为【左右根】</p></blockquote><h3 id="递归先序遍历-（用栈的方式实现）">递归先序遍历 （用栈的方式实现）</h3><p>如果我们知道了根节点的 左子树，右子树的 最大深度 l，r，那么该二叉树的最大深度为<br>max(l,r) + 1</p><p>而左子树，右子树的最大深度，同样也可以通过上述的方式计算出来。</p><p>递归在访问到空节点时 退出。</p><p>如图：<br><img src="/img/loading.gif" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200729163201649.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5OTEwMw==,size_16,color_FFFFFF,t_70"  alt=""></p><h4 id="时间复杂度">时间复杂度</h4><p>O(n)</p><h4 id="空间复杂度">空间复杂度</h4><p>O(height)</p><h3 id="广度优先遍历-BFS（Breadth-First-Search）">广度优先遍历 BFS（Breadth-First-Search）</h3><p>实际是用队列的方式实现。</p><p>把 每一层 所有节点 都放到队列里。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;二叉树的遍历&quot;&gt;二叉树的遍历&lt;/h2&gt;
&lt;p&gt;二叉树的遍历方式主要有：先序遍历、中序遍历、后序遍历、层次遍历。&lt;br&gt;
&lt;img src=&quot;/img/loading.gif&quot; class=&quot;lazyload&quot; data-src=&quot;https://img-blog.
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://nanpy.top/categories/leetcode/"/>
    
      <category term="binary tree" scheme="http://nanpy.top/categories/leetcode/binary-tree/"/>
    
    
      <category term="leetcode" scheme="http://nanpy.top/tags/leetcode/"/>
    
      <category term="binary tree" scheme="http://nanpy.top/tags/binary-tree/"/>
    
  </entry>
  
  <entry>
    <title>DRF 的 View</title>
    <link href="http://nanpy.top/posts/80f17c2d.html"/>
    <id>http://nanpy.top/posts/80f17c2d.html</id>
    <published>2020-07-28T02:32:19.000Z</published>
    <updated>2020-07-29T09:01:28.820Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/img/loading.gif" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200729162858507.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5OTEwMw==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"></p><h1>简介</h1><p>DRF中的View分成 三个等级，最基本的View，APIView，到GenericAPIView，再到GenericViewSet</p><p><code>APIView</code> 和 <code>Viewset</code> 是 <code>DRF</code> 中引入的视图类，<code>Viewset</code> 对 <code>DRF</code> 自身提供的 <code>APIView</code> 进行了再次封装，而 <code>APIView</code> 是对原生 Django <code>View</code> 的封装，灵活运用 <code>APIView</code> 和 <code>Viewset</code> 可以大幅度提升业务开发效率，且大大提升了代码的可维护性。</p><h2 id="继承关系">继承关系</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">View</span><br><span class="line">    APIView</span><br><span class="line">        ViewSet</span><br><span class="line">        GenericAPIView</span><br><span class="line">            GenericViewSet</span><br><span class="line">                ReadOnlyModelViewSet</span><br><span class="line">                ModelViewSet</span><br><span class="line">            ListAPIView</span><br><span class="line">            RetrieveAPIView</span><br><span class="line">            CreateAPIView</span><br><span class="line">            UpdateAPIView</span><br><span class="line">            DestroyAPIView</span><br><span class="line">            ListCreateAPIView</span><br><span class="line">            RetrieveUpdateAPIView</span><br><span class="line">            RetrieveDestoryAPIView</span><br><span class="line">            RetrieveUpdateDestoryAPIView</span><br></pre></td></tr></tbody></table></figure><h2 id="View">View</h2><p>来自Django原生中，是基于所有类的View的父类，它负责将视图连接到URL，HTTP方法调度（POST，GET）和其他简单的功能。</p><h2 id="APIView">APIView</h2><p>APIView 是 DRF 中所有view的父类，本身继承于Django的view，只有简单的调度方法和检查。<br>最直接封装的是对request,response都进行了封装，response里面做了一些认证，权限，限流之类处理。而response返回的结果是经过系列化的json.</p><p>与django中的view类似的是，APIView中只需要实现对应的方法如 get, post等。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArticleView</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="comment"># 取数据</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="comment"># 增加数据</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">put</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="comment"># 全局更新</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">patch</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="comment"># 局部更新</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="comment"># 删除</span></span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></tbody></table></figure><h2 id="GenricAPIView">GenricAPIView</h2><p>这里都是通用的APIView,所谓通用就是常用的增删改查，也就是restframework已经帮你封装好了。比如django的GenericView封装了ListView, DetailView，CreateView, UpdateView, DeleteView等通用视图类。drf中则封装得更多。</p><p>下面 分别看一下源码：</p><p><code>CreateAPIView</code><br>实现了post方法</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CreateAPIView</span><span class="params">(mixins.CreateModelMixin,</span></span></span><br><span class="line"><span class="class"><span class="params">                    GenericAPIView)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Concrete view for creating a model instance.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.create(request, *args, **kwargs)</span><br></pre></td></tr></tbody></table></figure><p><code>ListAPIView</code><br>实现get方法</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListAPIView</span><span class="params">(mixins.ListModelMixin,</span></span></span><br><span class="line"><span class="class"><span class="params">                  GenericAPIView)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Concrete view for listing a queryset.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.list(request, *args, **kwargs)</span><br></pre></td></tr></tbody></table></figure><p><code>RetrieveAPIView</code><br>实现get方法，它与ListAPIView的不同是它获取单个对象，类似于django中的DetailView</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RetrieveAPIView</span><span class="params">(mixins.RetrieveModelMixin,</span></span></span><br><span class="line"><span class="class"><span class="params">                      GenericAPIView)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Concrete view for retrieving a model instance.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.retrieve(request, *args, **kwargs)</span><br></pre></td></tr></tbody></table></figure><p><code>DestroyAPIView</code><br>实现delete方法</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DestroyAPIView</span><span class="params">(mixins.DestroyModelMixin,</span></span></span><br><span class="line"><span class="class"><span class="params">                     GenericAPIView)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Concrete view for deleting a model instance.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.destroy(request, *args, **kwargs)</span><br></pre></td></tr></tbody></table></figure><p><code>UpdateAPIView</code><br>实现了put,patch两个方法，分别对应全局和局部更新。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UpdateAPIView</span><span class="params">(mixins.UpdateModelMixin,</span></span></span><br><span class="line"><span class="class"><span class="params">                    GenericAPIView)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Concrete view for updating a model instance.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">put</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.update(request, *args, **kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">patch</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.partial_update(request, *args, **kwargs)</span><br></pre></td></tr></tbody></table></figure><p>下面则是一些组合的视图类<br>… 详情参考： <a href="https://www.cnblogs.com/Andy963/p/12357927.html" target="_blank" rel="noopener">这篇文章</a></p><h2 id="ViewSet">ViewSet</h2><p>ViewSet 继承了APIView 之外，还加入了 <code>.as_view()</code> 和 <code>.initialize_request()</code>，并可以结合 router 映射路由</p><h2 id="三者的不同">三者的不同</h2><p>三者之间最重要的不同在于 mixin</p><h2 id="APIView-和-View">APIView 和 View</h2><p>在APIView中仍以常规的类视图定义方法来实现get() 、post() 或者其他请求方式的方法<br>新增的自定义属性</p><ul><li>authentication_classes 列表或元祖，身份认证类</li><li>permissoin_classes 列表或元祖，权限检查类</li><li>throttle_classes 列表或元祖，流量控制类</li></ul><blockquote><p>请求和返回使用的 DRF 的Request Response而不是django的HttpRequest HttpResponse<br>请求传入时进行身份验证，并在传给处理方法前进行权限检验<br>任何APIException都会被捕捉并放入合适的想要中<br>response返回的内容需是序列化的json</p></blockquote><h2 id="GenericAPIView-和-APIView">GenericAPIView 和 APIView</h2><p><code>GenericAPIView</code> 继承于 <code>APIView</code></p><h3 id="GenericAPIView新加的配置项">GenericAPIView新加的配置项</h3><ul><li><p>【列表视图】与【详情视图】通用</p><ul><li>queryset 指定作用的 model 数据范围【如果设置了 get_queryset() 这个配置则不生效】</li><li>serializer_class 设置视图使用的 serializer</li></ul></li><li><p>【列表视图】使用</p><ul><li>pagination_class 设置分页</li><li>filter_backends 设置过滤</li></ul></li><li><p>【详情页视图】使用</p><ul><li>lookup_field 查询单一数据库对象时使用的条件字段，默认为’pk’</li><li>lookup_url_kwarg 查询单一数据时URL中的参数关键字名称，默认与look_field相同</li></ul></li></ul><h3 id="GenericAPIView新加的方法">GenericAPIView新加的方法</h3><ul><li>get_queryset()<br>【列表视图与详情视图通用】<br>返回视图使用的查询集，是列表视图与详情视图获取数据的基础，默认返回queryset属性，可以重写，例如：</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_queryset</span><span class="params">(self)</span>:</span></span><br><span class="line">    user = self.request.user</span><br><span class="line">    <span class="keyword">return</span> user.accounts.all()</span><br></pre></td></tr></tbody></table></figure><ul><li>get_serializer_class()<br>【列表视图与详情视图通用】<br>返回序列化器类，默认返回serializer_class，可以重写，例如：</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_serializer_class</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> self.request.user.is_staff:</span><br><span class="line">        <span class="keyword">return</span> FullAccountSerializer</span><br><span class="line">    <span class="keyword">return</span> BasicAccountSerializer</span><br></pre></td></tr></tbody></table></figure><ul><li><p>get_serializer(self, args, *kwargs)<br>【列表视图与详情视图通用】<br>返回序列化器对象，被其他视图或扩展类使用，如果我们在视图中想要获取序列化器对象，可以直接调用此方法。<br>注意，在提供序列化器对象的时候，REST framework会向对象的context属性补充三个数据：request、format、view，这三个数据对象可以在定义序列化器时使用。</p></li><li><p>get_object()<br>【详情视图使用】<br>返回详情视图所需的模型类数据对象，默认使用lookup_field参数来过滤queryset。<br>在试图中可以调用该方法获取详情信息的模型类对象。<br>若详情访问的模型类对象不存在，会返回404。<br>该方法会默认使用APIView提供的check_object_permissions方法检查当前对象是否有权限被访问。</p></li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># url(r'^books/(?P&lt;pk&gt;\d+)/$', views.BookDetailView.as_view()),</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookDetailView</span><span class="params">(GenericAPIView)</span>:</span></span><br><span class="line">    queryset = BookInfo.objects.all()</span><br><span class="line">    serializer_class = BookInfoSerializer</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request, pk)</span>:</span></span><br><span class="line">        book = self.get_object()</span><br><span class="line">        serializer = self.get_serializer(book)</span><br><span class="line">        <span class="keyword">return</span> Response(serializer.data)</span><br></pre></td></tr></tbody></table></figure><ul><li>get_serializer_context()</li><li>filter_queryset()</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">GenericAPIView 可组合的 mixin</span><br><span class="line">    mixins.CreateModelMixin</span><br><span class="line">    mixins.ListModelMixin</span><br><span class="line">    mixins.RetrieveModelMixin</span><br><span class="line">    mixins.UpdateModelMixin</span><br><span class="line">    mixins.DestroyModelMixin</span><br><span class="line"></span><br><span class="line">GenericAPIView 已经组合的 mixin （与GenericAPIView放在同一目录）</span><br><span class="line">    CreateAPIView = GenericAPIView + mixins.CreateModelMixin （POST 有 create 方法）</span><br><span class="line">    ListAPIView = GenericAPIView + mixins.ListModelMixin （GET 有 list 方法）</span><br><span class="line">    RetrieveAPIView = GenericAPIView + mixins.RetrieveModelMixin （GET 有 retrieve 方法）</span><br><span class="line">    DestroyAPIView = GenericAPIView + mixins.DestroyModelMixin</span><br><span class="line">    UpdateAPIView = GenericAPIView + mixins.UpdateModelMixin</span><br><span class="line">    ListCreateAPIView = GenericAPIView + mixins.ListModelMixin + mixins.CreateModelMixin</span><br><span class="line">    RetrieveUpdateAPIView = GenericAPIView + mixins.RetrieveModelMixin + mixins.UpdateModelMixin</span><br><span class="line">    RetrieveDestroyAPIView = GenericAPIView + mixins.RetrieveModelMixin + mixins.DestroyModelMixin</span><br><span class="line">    RetrieveUpdateDestroyAPIView = GenericAPIView + mixins.RetrieveModelMixin + mixins.DestroyModelMixin + mixins.DestroyModelMixin</span><br></pre></td></tr></tbody></table></figure><h2 id="ViewSet-和-APIView">ViewSet 和 APIView</h2><p>ViewSet 和 APIView 的区别：</p><blockquote><p>ViewSet 继承于 APIView 的同时，多了一个 ViewSetMixin<br>ViewSetMixin 多了一个 .as_view() 方法，可将 get、post 等绑定到指定方法上<br>ViewSet 需要借助 router 实现配置 url<br>ViewSetMixin 还多了一个 .initialize_request()<br>initialize_request 给 request 绑定了很多的 action，主要用于动态的 serializers</p></blockquote><h3 id="GenericViewSet-和-ViewSet">GenericViewSet 和 ViewSet</h3><p>ViewSet 继承于 APIView<br>GenericViewSet 继承于 GenericAPIView</p><p>GenericViewSet 已经组合的 mixin （与 GenericViewSet 放在同一目录）</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ReadOnlyModelViewSet = GenericViewSet + mixins.RetrieveModelMixin + mixins.ListModelMixin</span><br><span class="line">ModelViewSet = GenericViewSet + mixins.CreateModelMixin + mixins.RetrieveModelMixin + UpdateModelMixin + mixins.DestroyModelMixin + mixins.ListModelMixin</span><br></pre></td></tr></tbody></table></figure><h3 id="Viewsets包含的Class-常用的">Viewsets包含的Class(常用的)</h3><p>0.ViewSetMixin<br>简介：Viewset的基类，它重写了原来 django view 中 .as_view() 方法，使得注册Url变得更加简单，原生 Django View 通过重写 get 和 post 方法的具体视图来达到实现逻辑<br>在 Viewset 中则可通过:</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">view = MyViewSet.as_view({<span class="string">'get'</span>: <span class="string">'list'</span>, <span class="string">'post'</span>: <span class="string">'create'</span>})</span><br></pre></td></tr></tbody></table></figure><h3 id="参考">参考</h3><p><a href="https://www.cnblogs.com/Andy963/p/12357927.html" target="_blank" rel="noopener">View 介绍</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/img/loading.gif&quot; class=&quot;lazyload&quot; data-src=&quot;https://img-blog.csdnimg.cn/20200729162858507.png?x-oss-process=image/watermark,ty
      
    
    </summary>
    
    
      <category term="DRF" scheme="http://nanpy.top/categories/DRF/"/>
    
    
      <category term="python" scheme="http://nanpy.top/tags/python/"/>
    
      <category term="Django" scheme="http://nanpy.top/tags/Django/"/>
    
      <category term="DRF" scheme="http://nanpy.top/tags/DRF/"/>
    
  </entry>
  
  <entry>
    <title>DRF Serializers序列化</title>
    <link href="http://nanpy.top/posts/6d0d581e.html"/>
    <id>http://nanpy.top/posts/6d0d581e.html</id>
    <published>2020-07-27T01:32:19.000Z</published>
    <updated>2020-07-29T09:01:28.819Z</updated>
    
    <content type="html"><![CDATA[<h2 id="序列化和反序列化">序列化和反序列化</h2><p>序列化，是指将复杂的QuerySet和Model类型转换成Python基本数据类型，从而将这些基本数据类型以JSON的形式响应给客户端。</p><p>反序列化则和序列化相反，是指将Http请求中传入的JSON数据转换成复杂的数据类型，从而保存在数据库中。</p><p>在REST Framework中，提供了多个用于序列化操作的类，但常用的也就如下两个：</p><p>Serializer:进行序列化基本的类；<br>ModelSerializer:继承于Serializer，内部实现了通用的序列化逻辑，其中包含了与Model字段对应的字段，可以快速对Model进行序列化。<br>使用时需要导入对应模块：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br></pre></td></tr></tbody></table></figure><h3 id="Serializers-序列化组件">Serializers 序列化组件</h3><ul><li>Serializer 组件</li><li>ModelSerializer组件</li><li>HyperlinkedIdentityField组件 - 用于链接的拼接</li></ul><h4 id="serializer">serializer</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView</span><br><span class="line"><span class="keyword">from</span> rest_framework.serializers <span class="keyword">import</span> Serializer</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 写一个与modles内表类对应的Serializer类，用于获取需求序列化的字段</span></span><br><span class="line"><span class="comment"># 字段必须在modles对应表内进行定义</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookSerializer</span><span class="params">(Serializer)</span>:</span></span><br><span class="line">    name = serializers.CharField()</span><br><span class="line">    <span class="comment"># price=serializers.CharField()</span></span><br><span class="line">    <span class="comment"># date=serializers.CharField()</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Books</span><span class="params">(APIView)</span>:</span></span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request)</span>:</span></span><br><span class="line"> </span><br><span class="line">        <span class="comment"># 序列化多个对象（many=True）</span></span><br><span class="line">        books = models.Book.objects.all()</span><br><span class="line">        <span class="comment"># instance=books要序列化的queryset对象,many=True,表示序列化多条</span></span><br><span class="line">        ser = BookSerializer(instance=books, many=<span class="literal">True</span>)</span><br><span class="line">        print(ser.data)</span><br><span class="line">        <span class="comment"># [OrderedDict([('name', 'name')]), OrderedDict([('name', '水')]), OrderedDict([('name', '水都是')])]</span></span><br><span class="line"> </span><br><span class="line">        <span class="comment"># instance:可以不写,按位置传 - instance位于位置传参的第一位</span></span><br><span class="line">        <span class="comment"># ser=BookSerializer(books,many=True)</span></span><br><span class="line"> </span><br><span class="line">        <span class="comment"># 序列化单个对象 many=False</span></span><br><span class="line">        book = models.Book.objects.all().first()</span><br><span class="line">        ser=BookSerializer(book,many=<span class="literal">False</span>)</span><br><span class="line"> </span><br><span class="line">        <span class="comment"># ser.data 拿到的是序列化之后的字典,字典里可能套了列表,所以safe=False</span></span><br><span class="line">        <span class="keyword">return</span> JsonResponse(ser.data, safe=<span class="literal">False</span>)</span><br></pre></td></tr></tbody></table></figure><h4 id="ModelSerializer">ModelSerializer</h4><ul><li>ModelSerializer组件必须配合Meta使用，对指定的字段进行序列化处理和返回</li><li>Meta内注意事项：<ul><li>model需导入models内对应处理表类</li><li>fields - 用于获取需处理的表内字段</li><li>fields=‘<strong>all</strong>’ - 获取所有字段进行序列化处理；后续可用常规方式重写属性，覆盖all序列的操作</li><li>fields = [‘nid’,‘name’] - 获取指定字段进行序列化处理并返回</li><li>exclude=[‘publish’,‘authors’] - 用于去除字段，不序列化并且不返回</li><li>depth = 2 - 关系表的深度指定（不建议使用，对数据库的频繁操作降低效率）</li></ul></li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> ap01.models <span class="keyword">import</span> Book</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AuthorSerializer</span><span class="params">(serializers.Serializer)</span>:</span></span><br><span class="line">    nid = serializers.CharField()</span><br><span class="line">    name = serializers.CharField()</span><br><span class="line">    age = serializers.CharField()</span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookSerializer</span><span class="params">(serializers.ModelSerializer)</span>:</span></span><br><span class="line">    <span class="comment"># 必须写一个Meta内部类</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        <span class="comment"># 序列化的对象，models内的对应表类</span></span><br><span class="line">        <span class="comment"># 需导入from ap01.models import Book</span></span><br><span class="line">        model = Book</span><br><span class="line">        <span class="comment"># 对表内所有字段进行序列化处理</span></span><br><span class="line">        fields = <span class="string">'__all__'</span></span><br><span class="line">        <span class="comment"># 指定只取这两个字段</span></span><br><span class="line">        <span class="comment"># fields = ['nid','name']</span></span><br><span class="line">        <span class="comment"># 去掉指定的字段，选入字段不进行序列化且不返回</span></span><br><span class="line">        <span class="comment"># exclude=['publish','authors']</span></span><br><span class="line">        <span class="comment"># fields,跟exclude不能连用</span></span><br><span class="line">        <span class="comment"># 指定深度(官方建议小于10,我给你的建议小于3)，和关联表的深度 - 不建议使用</span></span><br><span class="line">        <span class="comment"># depth = 2</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 重写属性，覆盖Meta内初始化操作</span></span><br><span class="line">    publish = serializers.CharField(source=<span class="string">'publish.name'</span>)</span><br><span class="line">    authors = serializers.SerializerMethodField()</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_authors</span><span class="params">(self, book)</span>:</span></span><br><span class="line">        <span class="comment"># 拿到这本书的所有作者</span></span><br><span class="line">        aus = book.authors.all()</span><br><span class="line">        <span class="comment"># 可以继续用序列化类,来处理</span></span><br><span class="line">        auth_ser = AuthorSerializer(aus, many=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">return</span> auth_ser.data</span><br></pre></td></tr></tbody></table></figure><h4 id="HyperlinkedIdentityField-用于链接的拼接">HyperlinkedIdentityField - 用于链接的拼接</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">mySer.py</span></span><br><span class="line"><span class="string">  HyperlinkedIdentityField 必传参数：</span></span><br><span class="line"><span class="string">    - view_name：urls.py路由文件内反向解析名</span></span><br><span class="line"><span class="string">    - lookup_field：models内对应路由传入的参数</span></span><br><span class="line"><span class="string">    - lookup_url_kwarg：urls.py路由文件内对应有名参数名</span></span><br><span class="line"><span class="string">        - 注意：可以传入跨表字段，必须是联系表</span></span><br><span class="line"><span class="string">            例如：假设publish表类内存在外联关系表book - 'book_id'</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PublishSerializer</span><span class="params">(serializers.Serializer)</span>:</span></span><br><span class="line">    name = serializers.CharField()</span><br><span class="line">    city = serializers.CharField()</span><br><span class="line">    publish_url = serializers.HyperlinkedIdentityField(view_name=<span class="string">'urls_publish'</span>,lookup_field=<span class="string">'nid'</span>,lookup_url_kwarg=<span class="string">'id'</span>)</span><br><span class="line"> </span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">urls.py</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">url(<span class="string">r'^publish/(?P&lt;id&gt;\d+)'</span>, views.Publish.as_view(),name=<span class="string">'urls_publish'</span>),</span><br><span class="line"> </span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">views.py</span></span><br><span class="line"><span class="string">   PublishSerializer 必传参数：</span></span><br><span class="line"><span class="string">    - instance：序列化对象</span></span><br><span class="line"><span class="string">    - mangy：序列化对象的单复数</span></span><br><span class="line"><span class="string">    - context：获取链接中的域名，即 http://127.0.0.1:8000</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Publish</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        ret = models.Publish.objects.all()</span><br><span class="line">        publish_ser = PublishSerializer(ret, many=<span class="literal">True</span>,context={<span class="string">'request'</span>: request})</span><br><span class="line">        <span class="keyword">return</span> JsonResponse(publish_ser.data, safe=<span class="literal">False</span>)</span><br></pre></td></tr></tbody></table></figure><h1>参考</h1><p><a href="https://blog.csdn.net/qq_33961117/article/details/84955113" target="_blank" rel="noopener">https://blog.csdn.net/qq_33961117/article/details/84955113</a></p><p><a href="https://www.cnblogs.com/xiugeng/p/11460855.html#_label2" target="_blank" rel="noopener">serializers 详解</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;序列化和反序列化&quot;&gt;序列化和反序列化&lt;/h2&gt;
&lt;p&gt;序列化，是指将复杂的QuerySet和Model类型转换成Python基本数据类型，从而将这些基本数据类型以JSON的形式响应给客户端。&lt;/p&gt;
&lt;p&gt;反序列化则和序列化相反，是指将Http请求中传入的JSON
      
    
    </summary>
    
    
      <category term="DRF" scheme="http://nanpy.top/categories/DRF/"/>
    
    
      <category term="python" scheme="http://nanpy.top/tags/python/"/>
    
      <category term="Django" scheme="http://nanpy.top/tags/Django/"/>
    
      <category term="DRF" scheme="http://nanpy.top/tags/DRF/"/>
    
  </entry>
  
  <entry>
    <title>学习Docker，看这一篇就够了。</title>
    <link href="http://nanpy.top/posts/72391c0f.html"/>
    <id>http://nanpy.top/posts/72391c0f.html</id>
    <published>2020-07-01T14:00:12.000Z</published>
    <updated>2020-07-07T05:37:53.405Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是容器">什么是容器</h2><p>依托于linux内核的虚拟化技术</p><h2 id="什么是Docker">什么是Docker</h2><p>能够把应用程序自动部署到容器的开源引擎</p><h2 id="Docker的基本组成">Docker的基本组成</h2><p><img src="/img/loading.gif" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200701133312330.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5OTEwMw==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"></p><h3 id="Docker-Client客户端">Docker Client客户端</h3><h3 id="Docker-Daemon守护进程">Docker Daemon守护进程</h3><h3 id="Docker-Image镜像">Docker Image镜像</h3><p>容器的基石</p><p>层叠的只读文件系统</p><p>联合加载</p><h3 id="Docker-Container容器">Docker Container容器</h3><p>通过镜像启动</p><p>启动和执行阶段</p><p>写时复制</p><h3 id="Docker-Registry仓库">Docker Registry仓库</h3><h4 id="共有">共有</h4><p>Docker Hub</p><h4 id="私有">私有</h4><h3 id="Docker在线演示地址">Docker在线演示地址</h3><h2 id="Docker的C-S模式">Docker的C/S模式</h2><h3 id="Docker的守护进程">Docker的守护进程</h3><ol><li>查看守护进程<br><code> ps -ef | grep docker</code><br><code>systemctl status docker</code></li><li>使用service命令管理<br><code>sudo service docker start/stop/restart</code></li><li>Docker 的启动选项<br><code>docker -d [OPTIONS]</code></li></ol><ul><li>运行相关：<br>-D,–debug=false<br>-e,–exec-driver=‘native’<br>-g,–graph=’/var/lib/docker’<br>-icc=true<br>-l,–log-level=‘info’<br>–label=[]<br>-p,–pidfile=’/var/run/docker.pid</li><li>Docker服务器连接相关<br>-G,–group=‘docker’<br><font color="red"><strong>-H,–host=[]</strong></font><br>-tls=false<br>-tlsverify=false</li><li>Remote API相关<br>–api-enable-cors=false</li><li>存储相关<br>-s,–storage-driver=’’<br>–selinux-enabled=false<br>–storage-opt=[]</li><li>Registry 相关<br>–insecure-registry=[]<br>–registry-mirror=[]</li></ul><ol start="4"><li>启动配置文件<br><code>/etc/default/docker/</code></li></ol><h3 id="Docker的远程访问">Docker的远程访问</h3><h4 id="守护进程设置">守护进程设置</h4><p>修改配置文件 /etc/default/dcoker<br><code>DOCKER_OPTS=" --label name=docker_server_1 -H tcp://0.0.0.0:2375"</code><br>重启docker <code>service docker resart</code></p><h4 id="客户端配置">客户端配置</h4><ul><li>使用环境变量<br><code>export DOCKER_HOST='tcp://ip:端口'</code> （这里的ip是要连接的远程主机IP）</li></ul><h2 id="Dcoker的容器">Dcoker的容器</h2><h3 id="容器的基本操作">容器的基本操作</h3><ul><li>启动容器<br><code>docker run IMAGE [COMMAND][ARG...]</code><br>run 在新容器中执行命令<br>eg : <code>docker run centos echo 'hello world'</code></li><li>启动交互式容器<br><code>docker run -i -t IMAGE /bin/bash</code><br>要开启以下设置  为容器始终打开标准输入<br><code>-i --interactive=true|false 默认是false  </code><br>为创建的容器分配一个tty终端<br><code>-t --tty=true|false 默认是false    </code><br><img src="/img/loading.gif" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200701163229821.png"  alt="在这里插入图片描述"></li><li>查看容器<br><code>docker ps [-a] [-l]</code><br><img src="/img/loading.gif" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200701163149331.png"  alt="在这里插入图片描述"></li><li>查看容器的信息<br><code>docker inspect ID/NAMES</code><br>eg: <code>docker inspect 71f344799cfc</code></li><li>自定义容器名字<br><code>docker run --name=自定义名字 -i -t IMAGE /bin/bash</code><br><img src="/img/loading.gif" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200701163834632.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5OTEwMw==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"></li><li>重新启动已经停止的容器<br><code>docker start [-i] 容器名</code></li><li>删除容器<br><code>docker rm 容器名</code></li></ul><h3 id="Docker-守护式容器">Docker 守护式容器</h3><p>什么是守护式容器？</p><ul><li>能够长期运行</li><li>没有交互式会话</li><li>适合运行应用程序和服务</li></ul><h4 id="启动守护式容器">启动守护式容器</h4><p><strong>方法1</strong><br><code>docker run --name=容器名 -i -t /bin/bash</code><br><img src="/img/loading.gif" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200701165140243.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5OTEwMw==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"><br>使用<code>Ctrl + p   Q</code>退出，不使用<code>exit</code><br><img src="/img/loading.gif" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200701165613901.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5OTEwMw==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"><br>附加到运行中的容器：<br><code>docker attach 容器名</code></p><p><strong>方法2</strong><br><code>docker run -d 镜像名 [COMMAND] [ARG...]</code><br><img src="/img/loading.gif" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200702101109809.png"  alt="在这里插入图片描述"></p><h4 id="查看容器日志">查看容器日志</h4><p><code>docker logs [-f] [-t] [--tail] 容器名</code><br>-f --follows=true 默认为false<br>-t --timestamps=true 默认为false<br>–tail=“all”<br><img src="/img/loading.gif" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200702101615322.png"  alt="在这里插入图片描述"></p><h4 id="查看容器内进程">查看容器内进程</h4><p><code>docker top 容器名</code></p><h4 id="在运行中的容器中启动新进程">在运行中的容器中启动新进程</h4><p><code>docker  exec [-d] [-i] [-t] 容器名 [COMMAND] [ARG...]</code><br><img src="/img/loading.gif" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200702101947112.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5OTEwMw==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"></p><h4 id="停止守护式容器">停止守护式容器</h4><ul><li><code>docker stop 容器名</code><br>给运行中的容器发送一个停止信号，等待容器停止后，命令会返回容器的名字。</li><li><code>docker kill 容器名</code><br>立刻杀死</li></ul><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">可以使用man命令查看docker具体命令的详细介绍</span><br><span class="line">例如：`man docker exec`</span><br></pre></td></tr></tbody></table></figure><h2 id="在Dokcer中部署静态网站">在Dokcer中部署静态网站</h2><h3 id="设置容器的端口映射">设置容器的端口映射</h3><ul><li><code>docker run [-P]</code><br>大写P  为容器暴露的所有端口进行映射。端口映射命令：<br><code>docker run -P -i -t centos /bin/bash</code></li><li><code>docker run [-p]</code><br>指定映射哪些端口<ol><li>容器端口 containerePort<br><code>docker run -p 80 -i -t centos /bin/bash</code></li><li>宿主机端口：容器端口  HostPort:containerPort<br><code>docker run -p 8080:80 -i -t centos /bin/bash</code></li><li>IP::容器端口 IP:containerPort<br><code>docker run -p 0.0.0.0:80 -i -t centos /bin/bash</code></li><li>IP：宿主机端口：容器端口   ip:HostPort:containerPort<br><code>docker run -p 0.0.0.0:8080:80 -i -t centos /bin/bash</code></li></ol></li></ul><h3 id="Nginx-部署流程">Nginx 部署流程</h3><ul><li>创建映射80端口的交互式容器<br><code>docker run -p 80 --name web -i -t centos /bin/bash</code></li><li>安装Nginx<br><code>yum install nginx</code></li><li>安装文本编辑器Vim<br><code>yum install vim</code></li><li>创建静态页面</li><li>修改Nginx配置文件</li><li>运行Nginx</li><li>验证网站访问</li></ul><h2 id="Docker-镜像">Docker 镜像</h2><p>容器的基石</p><p>层叠的只读文件系统</p><p>联合加载技术</p><h3 id="列出镜像">列出镜像</h3><p><code>docker images [OPTIONS] [REPOSITORY]</code></p><p>-a ,–all=false 显示所有镜像<br>-f ,–filter=[]<br>–no-trunc=false 不使用截断的方式显示数据<br>-q, --quiet=false  只显示镜像的唯一ID<br><img src="/img/loading.gif" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200702142421212.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5OTEwMw==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"></p><ul><li>REPOSITORY  一系列镜像的集合<br><em>Registry 仓库 是docker镜像的存储服务</em></li><li>TAG<br>镜像的标签。<br>创建容器时可以指定 镜像标签，不指定默认使用latest</li></ul><h3 id="查看镜像">查看镜像</h3><p><code>docker inspect [OPTIONS] CONTAINER | IMAGE [CONTAINER | IMAGE]</code><br>既支持容器的查看，也支持镜像的查看。<br><img src="/img/loading.gif" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200702142650435.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5OTEwMw==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"><br><img src="/img/loading.gif" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200702142717317.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5OTEwMw==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"></p><h3 id="删除镜像">删除镜像</h3><p><code>docker rmi [OPTIONS] IMAGE [IMAGE] ...</code><br>-f, --force=false<br>–no-prune=false</p><h3 id="查找镜像">查找镜像</h3><ul><li>Docker Hub  官网<ul><li><a href="https://registry.hub.docker.com" target="_blank" rel="noopener">https://registry.hub.docker.com</a></li></ul></li><li><code>docker search [OPTIONS] TERM</code><ul><li>–automated=false</li><li>–no-trunc=false</li><li>-s,–stars=0 星级 最低几个星星</li></ul></li></ul><h3 id="拉取镜像">拉取镜像</h3><p><code>docker pull [OPTIONS] NAME [:TAG]</code><br>-a, --all-tags=false<br>如果慢的话可以使用国内的docker仓库镜像服务器拉取<br>使用 --registry-mirror 选项</p><ol><li>修改：/etc/default/docker</li><li>添加：DOCKER_OPTS="–registry-mirror=http://xxxx"  xxx从daocloud获取</li></ol><h3 id="推送镜像">推送镜像</h3><p><code>docker push [REPOSITORY NAME]</code></p><h3 id="如何在本地构建镜像？">如何在本地构建镜像？</h3><ul><li>保存对容器的修改，并再次使用</li><li>自定义镜像的能力</li><li>以软件的形式打包并分发服务及其运行环境</li></ul><ol><li><code>docker commit</code> 通过容器构建<br><code>docker commit [OPTINOS] CONTAINER [REPOSITORY[:TAG]]</code><br>-a,–author=""<br>-m,–message=""<br>-p,–pause=true<br><img src="/img/loading.gif" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200703170651257.png"  alt="在这里插入图片描述"></li><li><code>docker build</code> 通过Dockerfile文件构建<br>创建第一个Dockerfile <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#First Dockerfile</span></span><br><span class="line">FROM ubuntu:14.04</span><br><span class="line">MAINTAINER liunan <span class="string">"youremail@outlook.com"</span></span><br><span class="line">RUN apt-get update</span><br><span class="line">RUN apt-get install nginx</span><br><span class="line">EXPOSE 80</span><br></pre></td></tr></tbody></table></figure><ol><li>创建目录 <code>mkdir -p dockerfile/df_test</code></li><li>编写 dockerfile文件<br><img src="/img/loading.gif" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200703172220775.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5OTEwMw==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"></li><li>执行 <code>docker build</code> 命令<br><code>docker build [OPTIONS] PATH | URL | -</code><br>–force-rm=false<br>–no-cache=false<br>–pull=false<br>-q,–quiet=false<br>–rm=true<br>-t,–tag=""指定构建的镜像的名字<br><img src="/img/loading.gif" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200703172513240.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5OTEwMw==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"></li><li>使用刚才build 的镜像<br><code>docker run -d --name nginx_use_df -p 80 ln/df_test nginx -g "daemon off;"</code></li></ol></li></ol><h3 id="Dockerfile指令">Dockerfile指令</h3><p>注释   #<br>指令   命令大写</p><h4 id="FROM">FROM</h4><ul><li>已经存在的镜像</li><li>基础镜像</li><li>必须是第一条非注释的指令</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">FROM &lt;image&gt;</span><br><span class="line">FROM &lt;image&gt;:&lt;tag&gt;</span><br></pre></td></tr></tbody></table></figure><h4 id="MAINTAINER">MAINTAINER</h4><p>指定镜像的作者信息，包含镜像的所有者和联系信息</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MAINTAINER liunan <span class="string">"liunan@gmail.com"</span></span><br></pre></td></tr></tbody></table></figure><h4 id="RUN">RUN</h4><p>指定当前镜像中运行的命令</p><ul><li>RUN <command> (shell模式)</command></li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/bin/sh -c <span class="built_in">command</span></span><br><span class="line">RUN <span class="built_in">echo</span> hello</span><br></pre></td></tr></tbody></table></figure><ul><li>RUN [“executable” ,“param1”,“param2”] (exec模式)</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RUN [<span class="string">"/bin/bash"</span> , <span class="string">"-c"</span> ,<span class="string">"echo hello"</span>]</span><br></pre></td></tr></tbody></table></figure><h4 id="EXPOSE">EXPOSE</h4><p>指定运行该镜像的容器使用的端口</p> <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPOSE &lt;port&gt; [&lt;port&gt; ...]</span><br></pre></td></tr></tbody></table></figure><p>使用EXPOSE指定了端口，启动容器的时候 也要指定端口<br><code>docker run -p 80 -d youimages nginx -g "daemon off;"</code></p><h4 id="CMD">CMD</h4><p>指定在容器运行时执行的命令</p><h4 id="ENTERYPOINT">ENTERYPOINT</h4><p>指定在容器运行时执行的命令</p><h4 id="ADD">ADD</h4><p>设置镜像的目录文件<br>ADD包含类似tar的解压功能</p><h4 id="COPY">COPY</h4><p>设置镜像的目录文件<br>如果单纯的复制文件，Docker推荐使用COPY</p><h4 id="VOLUME">VOLUME</h4><p>设置镜像的目录文件<br>VOLUME["/data"]</p><h4 id="WORKDIR">WORKDIR</h4><p>镜像在构建 及 运行时的环境设置</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">WORKDIR /path/to/workdir</span><br></pre></td></tr></tbody></table></figure><h4 id="ENV">ENV</h4><p>镜像在构建 及 运行时的环境设置</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ENV&lt;key&gt;&lt;value&gt;</span><br><span class="line">ENV&lt;key&gt;=&lt;value&gt;....</span><br></pre></td></tr></tbody></table></figure><h4 id="USER">USER</h4><p>镜像以什么样的用户运行</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">USER daemon</span><br><span class="line">USER nginx (使用哪个用户启动docker）</span><br><span class="line">USER user:group </span><br><span class="line">USER user:gid</span><br></pre></td></tr></tbody></table></figure><h4 id="ONBUILD">ONBUILD</h4><p>镜像触发器<br>当一个镜像被其他镜像作为基础镜像时执行<br>会在构建过程中插入指令</p><h3 id="Dockerfile的构建过程">Dockerfile的构建过程</h3><h4 id="Dockerfile的执行过程">Dockerfile的执行过程</h4><ul><li>从基础镜像运行一个容器</li><li>执行一条指令，对容器作出修改</li><li>执行类似 docker commit 的操作，提交一个新的镜像层</li><li>再基于刚提交的镜像运行一个新容器</li><li>执行 Dockerfile 中的下一条指令，直至所有指令执行完毕</li></ul><h4 id="构建镜像的中间层调试">构建镜像的中间层调试</h4><p>以上步骤中，中间层容器会在执行完后删除，但中间层镜像不会被删除。<br><font color="red">中间层镜像的优点：</font></p><font color="red"><ul><li>使用中间层镜像进行调试</li><li>查找错误</li></ul><h4 id="Dockerfile-的镜像缓存">Dockerfile 的镜像缓存</h4><p>Dockerfile构建过程中可以 构建缓存</p><ul><li>构建缓存    <code>use cache</code></li><li>不使用缓存  <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker build --no-cache</span><br></pre></td></tr></tbody></table></figure>  <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在 dockerfile 文件中 添加</span></span><br><span class="line">ENV REFRESH_DATE 2015-04-01</span><br><span class="line"><span class="comment"># 利用环境变量标记  缓存刷新的时间  这句命令后面的语句不会使用缓存</span></span><br></pre></td></tr></tbody></table></figure></li></ul><h4 id="查看镜像的构建过程">查看镜像的构建过程</h4><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker <span class="built_in">history</span> [image]</span><br></pre></td></tr></tbody></table></figure><p><img src="/img/loading.gif" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200707114914991.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5OTEwMw==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"></p><h2 id="Docker容器的网络基础">Docker容器的网络基础</h2><ul><li>Liunx 虚拟网桥特点<ul><li>可以设置IP地址</li><li>相当于拥有一个隐藏的虚拟网卡<br><img src="/img/loading.gif" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200707131707525.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5OTEwMw==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"></li></ul></li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装网桥管理工具</span></span><br><span class="line">sudo yum install bridge-utils</span><br><span class="line">sudo brctl show</span><br></pre></td></tr></tbody></table></figure></font><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是容器&quot;&gt;什么是容器&lt;/h2&gt;
&lt;p&gt;依托于linux内核的虚拟化技术&lt;/p&gt;
&lt;h2 id=&quot;什么是Docker&quot;&gt;什么是Docker&lt;/h2&gt;
&lt;p&gt;能够把应用程序自动部署到容器的开源引擎&lt;/p&gt;
&lt;h2 id=&quot;Docker的基本组成&quot;&gt;Docker的基
      
    
    </summary>
    
    
      <category term="docker" scheme="http://nanpy.top/categories/docker/"/>
    
    
      <category term="docker" scheme="http://nanpy.top/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>python工具-获取当前路径下所有文件信息</title>
    <link href="http://nanpy.top/posts/9ce9a3de.html"/>
    <id>http://nanpy.top/posts/9ce9a3de.html</id>
    <published>2020-06-11T03:11:11.000Z</published>
    <updated>2020-06-11T03:13:15.465Z</updated>
    
    <content type="html"><![CDATA[<h2 id="输入路径获取当前路径下所有文件信息">输入路径获取当前路径下所有文件信息</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 筛查数据目录下所有文件</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">TestPath</span><span class="params">(path, l)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> file <span class="keyword">in</span> os.listdir(path):</span><br><span class="line">        file_path = path + <span class="string">'/'</span> + file</span><br><span class="line">        <span class="keyword">if</span> os.path.isdir(file_path):</span><br><span class="line">            TestPath(file_path, l)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            l.append(file_path)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取文件的md5</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_file_md5</span><span class="params">(filepath)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.isfile(filepath):</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    myhash = hashlib.md5()</span><br><span class="line">    f = open(filepath, <span class="string">"rb"</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        b = f.read(<span class="number">8096</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> b:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        myhash.update(b)</span><br><span class="line">    f.close()</span><br><span class="line">    <span class="keyword">return</span> myhash.hexdigest()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果输出到excel</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write_excel</span><span class="params">(all_file)</span>:</span></span><br><span class="line">    content = []</span><br><span class="line">    content.append([<span class="string">'文件'</span>, <span class="string">'类型'</span>, <span class="string">'大小'</span>, <span class="string">'md5值'</span>])</span><br><span class="line">    <span class="keyword">for</span> file <span class="keyword">in</span> all_file:</span><br><span class="line">        tmp = []</span><br><span class="line">        file_name = file.split(<span class="string">'/'</span>)[<span class="number">-1</span>]</span><br><span class="line">        file_type = file.split(<span class="string">'.'</span>)[<span class="number">-1</span>]</span><br><span class="line">        file_size = os.path.getsize(file) / float(<span class="number">1024</span> * <span class="number">1024</span>) <span class="comment"># getsize读取的是字节数</span></span><br><span class="line">        file_size_str = <span class="string">"%.2f MB"</span> % (file_size)</span><br><span class="line">        file_md5 = get_file_md5(file)</span><br><span class="line">        tmp = [file_name, file_type, file_size_str, file_md5]</span><br><span class="line">        content.append(tmp)</span><br><span class="line">    A = np.array(content)</span><br><span class="line">    data = pd.DataFrame(A)</span><br><span class="line">    writer = pd.ExcelWriter(<span class="string">'file_infos.xls'</span>)</span><br><span class="line">    data.to_excel(writer, <span class="string">'sheet_files_infos'</span>, float_format=<span class="string">'%.5f'</span>)</span><br><span class="line">    writer.save()</span><br><span class="line">    writer.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    path = input(<span class="string">"Please enter the data path:"</span>)</span><br><span class="line">    all_file = []</span><br><span class="line">    <span class="keyword">if</span> os.path.isdir(path):</span><br><span class="line">        TestPath(path, all_file)</span><br><span class="line">        write_excel(all_file)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">"PATH  ERROR!"</span>)</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;输入路径获取当前路径下所有文件信息&quot;&gt;输入路径获取当前路径下所有文件信息&lt;/h2&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;li
      
    
    </summary>
    
    
      <category term="python" scheme="http://nanpy.top/categories/python/"/>
    
    
      <category term="python" scheme="http://nanpy.top/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>linux下导入自己开发的包报错 解决</title>
    <link href="http://nanpy.top/posts/6d7ba1cc.html"/>
    <id>http://nanpy.top/posts/6d7ba1cc.html</id>
    <published>2020-05-25T06:09:00.000Z</published>
    <updated>2020-05-25T06:19:41.298Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.path.append(<span class="string">r'/root/'</span>) </span><br><span class="line"><span class="comment"># 这里我把 Test_dir 文件夹放在root根目录下了. 所以这里将/root/放入sys.path 中</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Test_dir.smt <span class="keyword">import</span> func1</span><br></pre></td></tr></tbody></table></figure><p>还可以永久修改环境变量, 永久生效</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/profile</span><br><span class="line"><span class="comment"># 最后一行加入</span></span><br><span class="line"><span class="built_in">export</span> PYTHONPATH=<span class="variable">$PYTHONPATH</span>:/root/</span><br><span class="line"><span class="comment"># wq! 或者 ZZ 保存</span></span><br><span class="line"><span class="comment"># 执行生效</span></span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;sp
      
    
    </summary>
    
    
      <category term="python" scheme="http://nanpy.top/categories/python/"/>
    
    
      <category term="python" scheme="http://nanpy.top/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Celery异步消息队列</title>
    <link href="http://nanpy.top/posts/9753bdb9.html"/>
    <id>http://nanpy.top/posts/9753bdb9.html</id>
    <published>2020-05-22T11:00:00.000Z</published>
    <updated>2020-05-25T07:04:24.354Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是Celery">什么是Celery</h2><p>celery是一个异步任务队列/基于分布式消息传递的作业队列，分布式队列服务。它侧重于实时操作，但对调度支持也很好。</p><p>celery用于生产系统每天处理数以百万计的任务。</p><p>celery是用Python编写的，但该协议可以在任何语言实现。它也可以与其他语言通过webhooks实现。</p><p>建议的消息代理RabbitMQ的，但提供有限支持Redis, Beanstalk, MongoDB, CouchDB, ，和数据库（使用SQLAlchemy的或Django的 ORM） 。</p><p>celery是易于集成Django, Pylons and Flask，使用 django-celery, celery-pylons and Flask-Celery 附加包即可。</p><h2 id="应用场景">应用场景</h2><ul><li>异步任务<br>一些耗时较长的操作，如果用户等待后台数据返回，将会极大影响用户体验时，我们使用 异步消息队列，就可以解决这个问题啦。前端可以迅速响应用户请求，而一些异步操作则交给消息队列去执行啦。比如发送短信/邮件、消息推送、音视频处理等等。。</li><li>定时任务：<br>定时执行某件事情，比如每天数据统计<br>优惠券定期删除<br>等等。。</li></ul><h2 id="Celery架构图">Celery架构图</h2><p><img src="/img/loading.gif" class="lazyload" data-src="https://img-blog.csdnimg.cn/2020052219213493.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5OTEwMw==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"></p><ul><li>Producer：调用了Celery提供的API、函数或者装饰器而产生任务并交给任务队列处理的都是任务生产者。</li><li>Celery Beat：任务调度器，Beat进程会读取配置文件的内容，周期性地将配置中到期需要执行的任务发送给任务队列。</li><li>Broker：消息代理，又称消息中间件，Celery本身不提供消息服务，但是可以方便的和第三方提供的消息中间件集成。 接受任务生产者发送过来的任务消息，存进队列再按序分发给任务消费方（通常是消息队列或者数据库）。Celery目前支持RabbitMQ、Redis、MongoDB、Beanstalk、SQLAlchemy、Zookeeper等作为消息代理，但适用于生产环境的只有RabbitMQ和Redis, 官方推荐 RabbitMQ。</li><li>Celery Worker：执行任务的消费者，通常会在多台服务器运行多个消费者来提高执行效率。</li><li>Result Backend：任务处理完后保存状态信息和结果，以供查询。Celery默认已支持Redis、RabbitMQ、MongoDB、Django ORM、SQLAlchemy等方式。</li></ul><h2 id="实现">实现</h2><ol><li>准备一个项目，结构如下。<br><img src="/img/loading.gif" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200525105514759.png"  alt=""></li></ol><ul><li><a href="http://app.py" target="_blank" rel="noopener">app.py</a> :  实例化 Celery。</li><li><a href="http://config.py" target="_blank" rel="noopener">config.py</a> : Celery 相关配置。</li><li><a href="http://task.py" target="_blank" rel="noopener">task.py</a> : 任务函数文件。</li><li><a href="http://worker.py" target="_blank" rel="noopener">worker.py</a> : 执行调用任务工作。</li></ul><p>接下来依次看一下代码。</p><h3 id="app-py"><a href="http://app.py" target="_blank" rel="noopener">app.py</a></h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line">__author__ = <span class="string">'LiuNan'</span></span><br><span class="line">__date__ = <span class="string">'2020/5/22 19:52'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> Celery</span><br><span class="line"></span><br><span class="line"><span class="comment"># app是Celery类的实例，创建的时候添加了proj.tasks这个模块，也就是包含了proj/tasks.py这个文件。</span></span><br><span class="line">app = Celery(<span class="string">'Celery_project'</span>, include=[<span class="string">'Celery_project.task'</span>])</span><br><span class="line"></span><br><span class="line">app.config_from_object(<span class="string">'Celery_project.config'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.start()</span><br></pre></td></tr></tbody></table></figure><h3 id="config-py"><a href="http://config.py" target="_blank" rel="noopener">config.py</a></h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line">__author__ = <span class="string">'LiuNan'</span></span><br><span class="line">__date__ = <span class="string">'2020/5/22 19:53'</span></span><br><span class="line"></span><br><span class="line">BROKER_URL = <span class="string">'redis://:yourpasswd@localhost'</span> <span class="comment"># 使用Redis作为消息代理</span></span><br><span class="line"></span><br><span class="line">CELERY_RESULT_BACKEND = <span class="string">'redis://:yourpasswd@localhost:6379/0'</span> <span class="comment"># 把任务结果存在了Redis</span></span><br><span class="line"></span><br><span class="line">CELERY_TASK_SERIALIZER = <span class="string">'msgpack'</span> <span class="comment"># 任务序列化和反序列化使用msgpack方案</span></span><br><span class="line"></span><br><span class="line">CELERY_RESULT_SERIALIZER = <span class="string">'json'</span> <span class="comment"># 读取任务结果一般性能要求不高，所以使用了可读性更好的JSON</span></span><br><span class="line"></span><br><span class="line">CELERY_TASK_RESULT_EXPIRES = <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> <span class="comment"># 任务过期时间</span></span><br><span class="line"></span><br><span class="line">CELERY_ACCEPT_CONTENT = [<span class="string">'json'</span>, <span class="string">'msgpack'</span>] <span class="comment"># 指定接受的内容类型</span></span><br></pre></td></tr></tbody></table></figure><h3 id="task-py"><a href="http://task.py" target="_blank" rel="noopener">task.py</a></h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line">__author__ = <span class="string">'LiuNan'</span></span><br><span class="line">__date__ = <span class="string">'2020/5/22 19:50'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> Celery_project.app <span class="keyword">import</span> app</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.task</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    time.sleep(<span class="number">5</span>) <span class="comment"># 模拟执行时间5秒</span></span><br><span class="line">    <span class="keyword">return</span> x + y</span><br></pre></td></tr></tbody></table></figure><h3 id="worker-py"><a href="http://worker.py" target="_blank" rel="noopener">worker.py</a></h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line">__author__ = <span class="string">'LiuNan'</span></span><br><span class="line">__date__ = <span class="string">'2020/5/22 19:56'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="comment"># from Celery_project.task import add</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.path.append(<span class="string">r'/root/'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Celery_project.task <span class="keyword">import</span> add</span><br><span class="line"></span><br><span class="line">t1 = time.time()</span><br><span class="line"><span class="comment"># 用 delay() 方法来调用任务</span></span><br><span class="line"><span class="comment"># 调用任务会返回一个 AsyncResult 实例，可用于检查任务的状态，等待任务完成或获取返回值（如果任务失败，则为异常和回溯）。</span></span><br><span class="line">r1 = add.delay(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">r2 = add.delay(<span class="number">3</span>, <span class="number">2</span>)</span><br><span class="line">r3 = add.delay(<span class="number">7</span>, <span class="number">2</span>)</span><br><span class="line">r4 = add.delay(<span class="number">8</span>, <span class="number">2</span>)</span><br><span class="line">r5 = add.delay(<span class="number">10</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">r_list = [r1, r2, r3, r4, r5]</span><br><span class="line"><span class="keyword">for</span> r <span class="keyword">in</span> r_list:</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> r.ready():</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    print(r.result)</span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># print(add(1,2))</span></span><br><span class="line"><span class="comment"># print(add(3,2))</span></span><br><span class="line"><span class="comment"># print(add(7,2))</span></span><br><span class="line"><span class="comment"># print(add(8,2))</span></span><br><span class="line"><span class="comment"># print(add(10,2))</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line">t2 = time.time()</span><br><span class="line">print(<span class="string">'耗时%s'</span> % str(t2 - t1))</span><br></pre></td></tr></tbody></table></figure><h2 id="运行">运行</h2><ol><li><p>启动redis</p></li><li><p>切换至所在目录，执行 <code>celery -A Celery_project.app worker -l info</code><br>运行结果图，如下。<br><img src="/img/loading.gif" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200525135616926.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5OTEwMw==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"></p></li><li><p>运行调用任务文件 <a href="http://worker.py" target="_blank" rel="noopener">worker.py</a></p><p><img src="/img/loading.gif" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200525135651212.png"  alt="在这里插入图片描述"><br><img src="/img/loading.gif" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200525135709485.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5OTEwMw==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"><br>可以看出, 程序总共执行了 5 秒.<br>我定义任务执行时间 是5秒, 如果是同步执行, 我执行了5次, 那么最少需要 25 秒.<br>所以可以看出celery 的作用.</p></li></ol><h2 id="参考文档">参考文档</h2><p><a href="http://docs.jinkan.org/docs/celery/" target="_blank" rel="noopener"><strong>Celery - 分布式任务队列 官方文档</strong> </a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是Celery&quot;&gt;什么是Celery&lt;/h2&gt;
&lt;p&gt;celery是一个异步任务队列/基于分布式消息传递的作业队列，分布式队列服务。它侧重于实时操作，但对调度支持也很好。&lt;/p&gt;
&lt;p&gt;celery用于生产系统每天处理数以百万计的任务。&lt;/p&gt;
&lt;p&gt;cele
      
    
    </summary>
    
    
      <category term="python" scheme="http://nanpy.top/categories/python/"/>
    
    
      <category term="python" scheme="http://nanpy.top/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python的GIL是什么东西？</title>
    <link href="http://nanpy.top/posts/a3a30c9.html"/>
    <id>http://nanpy.top/posts/a3a30c9.html</id>
    <published>2020-05-13T06:00:18.000Z</published>
    <updated>2020-05-21T07:18:58.813Z</updated>
    
    <content type="html"><![CDATA[<h2 id="GIL是什么？">GIL是什么？</h2><p>首先需要明确的一点是<code>GIL</code>并不是Python的特性，它是在实现Python解析器(CPython)时所引入的一个概念。就好比C<ins>是一套语言（语法）标准，但是可以用不同的编译器来编译成可执行代码。有名的编译器例如GCC，INTEL C</ins>，Visual C++等。Python也一样，同样一段代码可以通过CPython，PyPy，Psyco等不同的Python执行环境来执行。像其中的JPython就没有GIL。然而因为CPython是大部分环境下默认的Python执行环境。所以在很多人的概念里CPython就是Python，也就想当然的把<code>GIL</code>归结为Python语言的缺陷。所以这里要先明确一点：GIL并不是Python的特性，Python完全可以不依赖于GIL</p><p>那么CPython实现中的GIL又是什么呢？GIL全称<code>Global Interpreter Lock</code>为了避免误导，我们还是来看一下官方给出的解释：</p><blockquote><p><em>In CPython, the global interpreter lock, or GIL, is a mutex that prevents multiple native threads from executing Python bytecodes at once. This lock is necessary mainly because CPython’s memory management is not thread-safe. (However, since the GIL exists, other features have grown to depend on the guarantees that it enforces.)</em></p></blockquote><p>好吧，是不是看上去很糟糕？</p><p>即全局解释器锁，每个线程在执行时候都需要先获取GIL，保证同一时刻只有一个线程可以执行代码，即同一时刻只有一个线程使用CPU，也就是说多线程并不是真正意义上的同时执行。</p><h2 id="为什么会有GIL">为什么会有GIL</h2><p>由于物理上得限制，各CPU厂商在核心频率上的比赛已经被多核所取代。为了更有效的利用多核处理器的性能，就出现了多线程的编程方式，而随之带来的就是线程间数据一致性和状态同步的困难。<a href="http://cenalulu.github.io/python/gil-in-python/linux/all-about-cpu-cache/" target="_blank" rel="noopener">即使在CPU内部的Cache也不例外</a>，为了有效解决多份缓存之间的数据同步时各厂商花费了不少心思，也不可避免的带来了一定的性能损失。</p><p>Python当然也逃不开，为了利用多核，Python开始支持多线程。<em>而解决多线程之间数据完整性和状态同步的最简单方法自然就是加锁。</em> 于是有了GIL这把超级大锁，而当越来越多的代码库开发者接受了这种设定后，他们开始大量依赖这种特性（即默认python内部对象是thread-safe的，无需在实现时考虑额外的内存锁和同步操作）。</p><p>为了直观的理解GIL对于多线程带来的性能影响，这里直接借用的一张测试结果图（见下图）。图中表示的是两个线程在双核CPU上得执行情况。两个线程均为CPU密集型运算线程。绿色部分表示该线程在运行，且在执行有用的计算，红色部分为线程被调度唤醒，但是无法获取GIL导致无法进行有效运算等待的时间。<br><img src="/img/loading.gif" class="lazyload" data-src="https://img-blog.csdnimg.cn/2020052115103316.png"  alt="在这里插入图片描述"></p><p>由图可见，GIL的存在导致多线程无法很好的立即多核CPU的并发处理能力。</p><p>那么Python的IO密集型线程能否从多线程中受益呢？我们来看下面这张测试结果。颜色代表的含义和上图一致。白色部分表示IO线程处于等待。可见，当IO线程收到数据包引起终端切换后，仍然由于一个CPU密集型线程的存在，导致无法获取GIL锁，从而进行无尽的循环等待。<br><img src="/img/loading.gif" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200521151046702.png"  alt="在这里插入图片描述"><br>简单的总结下就是：Python的多线程在多核CPU上，只对于IO密集型计算产生正面效果；而当有至少有一个CPU密集型线程存在，那么多线程效率会由于GIL而大幅下降。</p><h2 id="如何改进GIL带来的影响">如何改进GIL带来的影响</h2><ul><li>更换cpython为jpython(不建议)</li><li>使用多进程完成多线程的任务</li><li>在使用多线程可以使用c语言去实现</li></ul><h3 id="用multiprocessing替代Thread">用multiprocessing替代Thread</h3><p>multiprocessing库的出现很大程度上是为了弥补thread库因为GIL而低效的缺陷。它完整的复制了一套thread所提供的接口方便迁移。唯一的不同就是它使用了多进程而不是多线程。每个进程有自己的独立的GIL，因此也不会出现进程之间的GIL争抢。</p><p>当然multiprocessing也不是万能良药。它的引入会增加程序实现时线程间数据通讯和同步的困难。就拿计数器来举例子，如果我们要多个线程累加同一个变量，对于thread来说，申明一个global变量，用thread.Lock的context包裹住三行就搞定了。而multiprocessing由于进程之间无法看到对方的数据，只能通过在主线程申明一个Queue，put再get或者用share memory的方法。这个额外的实现成本使得本来就非常痛苦的多线程程序编码，变得更加痛苦了。具体难点在哪有兴趣的读者可以扩展阅读<a href="http://www.jeffknupp.com/blog/2013/06/30/pythons-hardest-problem-revisited/" target="_blank" rel="noopener">这篇文章</a></p><h3 id="多进程通信">多进程通信</h3><h4 id="Queue">Queue</h4><blockquote><p>多个进程间实现通信</p></blockquote><p>Queue有两个方法</p><ol><li><p>Put</p><p>以插入数据到队列中，他还有两个可选参数：blocked和timeout。</p></li><li><p>Get</p><p>从队列读取并且删除一个元素。同样，他还有两个可选参数：blocked和timeout。</p></li></ol><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process, Queue</span><br><span class="line"><span class="keyword">import</span> os,time,random</span><br><span class="line"></span><br><span class="line"><span class="comment">#写数据进程执行的代码</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">proc_write</span><span class="params">(q,urls)</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'Process is write....'</span></span><br><span class="line">    <span class="keyword">for</span> url <span class="keyword">in</span> urls:</span><br><span class="line">        q.put(url)</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'put %s to queue... '</span> %url</span><br><span class="line">        time.sleep(random.random())</span><br><span class="line"></span><br><span class="line"><span class="comment">#读数据进程的代码</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">proc_read</span><span class="params">(q)</span>:</span></span><br><span class="line">    print(<span class="string">'Process is reading...'</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        url = q.get(<span class="literal">True</span>)</span><br><span class="line">        print(<span class="string">'Get %s from queue'</span> %url)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment">#父进程创建Queue，并传给各个子进程</span></span><br><span class="line">    q = Queue()</span><br><span class="line">    proc_write1 = Process(target=proc_write,args=(q,[<span class="string">'url_1'</span>,<span class="string">'url_2'</span>,<span class="string">'url_3'</span>]))</span><br><span class="line">    proc_write2 = Process(target=proc_write,args=(q,[<span class="string">'url_4'</span>,<span class="string">'url_5'</span>,<span class="string">'url_6'</span>]))</span><br><span class="line">    proc_reader = Process(target=proc_read,args=(q,))</span><br><span class="line">    <span class="comment">#启动子进程，写入</span></span><br><span class="line">    proc_write1.start()</span><br><span class="line">    proc_write2.start()</span><br><span class="line"></span><br><span class="line">    proc_reader.start()</span><br><span class="line">    <span class="comment">#等待proc_write1结束</span></span><br><span class="line">    proc_write1.join()</span><br><span class="line">    proc_write2.join()</span><br><span class="line">    <span class="comment">#proc_raader进程是死循环，强制结束</span></span><br><span class="line">    proc_reader.terminate()</span><br></pre></td></tr></tbody></table></figure><p>运行结果图：<br><img src="/img/loading.gif" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200521151118287.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5OTEwMw==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"></p><h4 id="Pipe">Pipe</h4><blockquote><p>两个进程间的通信</p></blockquote><ul><li>Pipe常用于两个进程，两个进程分别位于管道的两端</li><li>Pipe方法返回（conn1,conn2）代表一个管道的两个端，Pipe方法有duplex参数，默认为True，即全双工模式，若为FALSE，conn1只负责接收信息，conn2负责发送，</li><li>send和recv方法分别为发送和接收信息。</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!coding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"><span class="keyword">import</span> os,time,random</span><br><span class="line"></span><br><span class="line"><span class="comment">#写数据进程执行的代码</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">proc_send</span><span class="params">(pipe,urls)</span>:</span></span><br><span class="line">    <span class="comment">#print 'Process is write....'</span></span><br><span class="line">    <span class="keyword">for</span> url <span class="keyword">in</span> urls:</span><br><span class="line"></span><br><span class="line">        <span class="keyword">print</span> <span class="string">'Process is send :%s'</span> %url</span><br><span class="line">        pipe.send(url)</span><br><span class="line">        time.sleep(random.random())</span><br><span class="line"></span><br><span class="line"><span class="comment">#读数据进程的代码</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">proc_recv</span><span class="params">(pipe)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        print(<span class="string">'Process rev:%s'</span> %pipe.recv())</span><br><span class="line">        time.sleep(random.random())</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment">#父进程创建pipe，并传给各个子进程</span></span><br><span class="line">    pipe = multiprocessing.Pipe()</span><br><span class="line">    p1 = multiprocessing.Process(target=proc_send,args=(pipe[<span class="number">0</span>],[<span class="string">'url_'</span>+str(i) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>) ]))</span><br><span class="line">    p2 = multiprocessing.Process(target=proc_recv,args=(pipe[<span class="number">1</span>],))</span><br><span class="line">    <span class="comment">#启动子进程，写入</span></span><br><span class="line">    p1.start()</span><br><span class="line">    p2.start()</span><br><span class="line"></span><br><span class="line">    p1.join()</span><br><span class="line">    p2.terminate()</span><br></pre></td></tr></tbody></table></figure><p>运行结果图：<br><img src="/img/loading.gif" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200521151319279.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5OTEwMw==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"></p><h2 id="GIL相关问题">GIL相关问题</h2><h3 id="什么时候会释放Gil锁">什么时候会释放Gil锁</h3><ul><li>遇到像 i/o操作这种 会有时间空闲情况 造成cpu闲置的情况会释放Gil</li><li>会有一个专门ticks进行计数 一旦ticks数值达到100 这个时候释放Gil锁 线程之间开始竞争Gil锁(说明:ticks这个数值可以进行设置来延长或者缩减获得Gil锁的线程使用cpu的时间)</li></ul><h3 id="互斥锁和Gil锁的关系">互斥锁和Gil锁的关系</h3><p><code>Gil锁</code>  : 保证同一时刻只有一个线程能使用到cpu<br><code>互斥锁 </code>: 多线程时,保证修改共享数据时有序的修改,不会产生数据修改混乱</p><p>首先假设只有一个进程,这个进程中有两个线程 <code>Thread1</code>,<code>Thread2</code>, 要修改共享的数据<code>data</code>, 并且有互斥锁</p><p>执行以下步骤:</p><ol><li>多线程运行，假设<code>Thread1</code>获得<code>GIL</code>可以使用<code>cpu</code>，这时<code>Thread1</code>获得 互斥锁<code>lock</code>,<code>Thread1</code>可以改<code>data</code>数据(但并<br>没有开始修改数据)</li><li><code>Thread1</code>线程在修改<code>data</code>数据前发生了 <code>i/o</code>操作 或者<code> ticks</code>计数满100 (注意就是没有运行到修改<code>data</code>数据),这个<br>时候 <code>Thread1 </code>让出了<code>GIL</code>,<code>GIL</code>锁可以被竞争</li><li><code>Thread1</code> 和 <code>Thread2</code> 开始竞争 <code>Gil</code> (注意:如果<code>Thread1</code>是因为 i/o 阻塞 让出的<code>Gil</code> <code>Thread2</code>必定拿到<code>Gil</code>,如果<br><code>Thread1</code>是因为<code>ticks</code>计数满100让出<code>Gil</code> 这个时候 <code>Thread1</code> 和 <code>Thread2</code> 公平竞争)</li><li>假设 <code>Thread2</code>正好获得了GIL, 运行代码去修改共享数据 <code>data</code>,由于<code>Thread1</code>有互斥锁<code>lock</code>，所以<code>Thread2</code>无法更改共享数据<code>data</code>,这时<code>Thread2</code>让出<code>GIL</code>锁 ,<code> GIL</code>锁再次发生竞争<br>公平竞争)</li><li>假设 <code>Thread2</code>正好获得了GIL, 运行代码去修改共享数据 <code>data</code>,由于<code>Thread1</code>有互斥锁<code>lock</code>，所以<code>Thread2</code>无法更改共享数据<code>data</code>,这时<code>Thread2</code>让出<code>GIL</code>锁 ,<code> GIL</code>锁再次发生竞争</li><li>假设<code>Thread1</code>又抢到<code>GIL</code>，由于其有互斥锁<code>Lock</code>所以其可以继续修改共享数据<code>data</code>,当<code>Thread1</code>修改完数据释放互斥锁<code>lock</code>,<code>Thread2</code>在获得<code>GIL</code>与<code>lock</code>后才可对<code>data</code>进行修改</li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;GIL是什么？&quot;&gt;GIL是什么？&lt;/h2&gt;
&lt;p&gt;首先需要明确的一点是&lt;code&gt;GIL&lt;/code&gt;并不是Python的特性，它是在实现Python解析器(CPython)时所引入的一个概念。就好比C&lt;ins&gt;是一套语言（语法）标准，但是可以用不同的编译器来编译
      
    
    </summary>
    
    
      <category term="python" scheme="http://nanpy.top/categories/python/"/>
    
    
      <category term="python" scheme="http://nanpy.top/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>elasticsearch建议器</title>
    <link href="http://nanpy.top/posts/9bd4ee27.html"/>
    <id>http://nanpy.top/posts/9bd4ee27.html</id>
    <published>2020-05-08T07:59:20.000Z</published>
    <updated>2020-05-12T07:34:53.538Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是建议器">什么是建议器</h2><p>目前为止，浏览器都已经具备<code>Suggest as you type</code>功能，即在我们输入搜索的过程中，进行自动的补全或者纠错功能，协助用户输入更精确的关键词，提高搜索阶段的文档匹配程度。例如我们在百度或谷歌浏览器输入搜索关键词时，虽然我们输入的有误，但是浏览器依然能够提示出我们想要的正确结果。<br><img src="/img/loading.gif" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200506185947444.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5OTEwMw==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"></p><p><img src="/img/loading.gif" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200506190050554.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5OTEwMw==,size_16,color_FFFFFF,t_70"  alt="![在这里插入图片描述](https://img-blog.csdnimg.cn/2020050619002368.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5OTEwMw==,size_16,color_FFFFFF,t_70"><br><strong>在elasticsearch中，建议功能通过使用建议器基于提供的文本建议类似的词</strong><br>目前<code>_suggest</code>已经弃用，我们可以通过<code>_search</code>来做建议器的查询。<br>在5.0版本中，<code>_search</code>经过优化，变得非常的方便。</p><h2 id="建议器如何使用">建议器如何使用</h2><h3 id="query与suggest结合">query与suggest结合</h3><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">PUT s1</span><br><span class="line">{</span><br><span class="line">  "mappings": {</span><br><span class="line">    "doc": {</span><br><span class="line">      "properties": {</span><br><span class="line">        "title": {</span><br><span class="line">          "type": "text",</span><br><span class="line">          "analyzer": "standard"</span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">PUT s1/doc/1</span><br><span class="line">{</span><br><span class="line">  "title": "Lucene is cool"</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">PUT s1/doc/2</span><br><span class="line">{</span><br><span class="line">  "title":"Elasticsearch builds on top of lucene"</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">GET s1/doc/_search</span><br><span class="line">{</span><br><span class="line">  "query": {</span><br><span class="line">    "match": {</span><br><span class="line">      "title": "Lucene"</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  "suggest": {</span><br><span class="line">    "my_suggest": {</span><br><span class="line">      "text": "Elasticsear lucen",</span><br><span class="line">      "term": {</span><br><span class="line">        "field": "title"</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="/img/loading.gif" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200506192346470.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5OTEwMw==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"></p><p>上例是一个包含建议的查询请求，查询<code>query</code>我们已经了然。<br>让我们注意<code>suggest</code>，每个建议器都有自己名称<code>my-suggestion</code>，es根据text字段返回建议结果。建议类型是<code>term</code>。从<code>field</code>字段生成建议。</p><h3 id="直接使用-suggest">直接使用 suggest</h3><p>如果我们仅需要建议而不需要查询功能，我们可以忽略<code>query</code>而直接使用<code>suggest</code>对象返回建议。</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET s1/doc/_search</span><br><span class="line">{</span><br><span class="line">  "suggest": {</span><br><span class="line">    "my_sugget": {</span><br><span class="line">      "text": "Elasticsear lucen",</span><br><span class="line">      "term": {</span><br><span class="line">        "field": "title"</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>可以根据需要指定几组建议器，每组建议器都有自己的名称。如下例的<code>my_suggest1</code>和<code>my_suggest2</code>。</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">GET s1/doc/_search</span><br><span class="line">{</span><br><span class="line">  "suggest": {</span><br><span class="line">    "my_sugget1": {</span><br><span class="line">      "text": "Elasticsear",</span><br><span class="line">      "term": {</span><br><span class="line">        "field": "title"</span><br><span class="line">      }</span><br><span class="line">    },</span><br><span class="line">    "my_suggest2": {</span><br><span class="line">      "text": "lucen",</span><br><span class="line">      "term": {</span><br><span class="line">        "field": "title"</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>在多个建议器中，如果输入的<code>text</code>字段值一致，可以单独写出来，以适用于<code>my_suggest1</code>和<code>my_suggest2</code>两个建议器。</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">GET s1/doc/_search</span><br><span class="line">{</span><br><span class="line">  "suggest": {</span><br><span class="line">    "text": "Elasticsear lucen",</span><br><span class="line">    "my_sugget1": {</span><br><span class="line">      "term": {</span><br><span class="line">        "field": "title"</span><br><span class="line">      }</span><br><span class="line">    },</span><br><span class="line">    "my_suggest2": {</span><br><span class="line">      "term": {</span><br><span class="line">        "field": "title"</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="建议器种类">建议器种类</h2><p>根据需求不同<code>elasticsearch</code>设计了4种<code>suggester</code>，分别是：</p><ul><li>词条建议器（<code>term suggester</code>）：主要做<strong>纠正</strong>。对于给定文本的每个词条，该键议器从索引中抽取要建议的关键词，这对于短字段（如分类标签）很有效。</li><li>词组建议器（<code>phrase suggester</code>）：主要做<strong>纠正</strong>。我们可以认为它是词条建议器的扩展，为整个文本（而不是单个词条）提供了替代方案，它考虑了各词条彼此临近出现的频率，使得该建议器更适合较长的字段，比如商品的描述。</li><li>完成建议器（<code>completion suggester</code>）：该建议器根据词条的前缀，提供自动完成的功能（智能提示，有点最左前缀查询的意思），为了实现这种实时的建议功能，它得到了优化，工作在内存中。所以，速度要比之前说的<code>match_phrase_prefix</code>快的多！</li><li>上下文建议器（<code>context suggester</code>）：它是完成建议器的扩展，允许我们根据词条或分类亦或是地理位置对结果进行过滤。</li></ul><h3 id="词条建议器（term-suggester）">词条建议器（<code>term suggester</code>）</h3><p>词条建议器接收输入的文本，对其进行分析并且分为词条，然后为每个词条提供一系列的建议。</p><p><strong>测试数据：创建索引，创建文档。</strong></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">PUT s2</span><br><span class="line">{</span><br><span class="line">  "mappings": {</span><br><span class="line">    "doc": {</span><br><span class="line">      "properties": {</span><br><span class="line">        "title": {</span><br><span class="line">          "type": "text",</span><br><span class="line">          "analyzer": "standard"</span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">PUT s2/doc/1</span><br><span class="line">{</span><br><span class="line">  "title": "Lucene is cool"</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">PUT s2/doc/2</span><br><span class="line">{</span><br><span class="line">  "title": "Elasticsearch builds on top of lucene"</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">PUT s2/doc/3</span><br><span class="line">{</span><br><span class="line">  "title": "Elasticsearch rocks"</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">PUT s2/doc/4</span><br><span class="line">{</span><br><span class="line">  "title": "Elastic is the company behind ELK stack"</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">PUT s2/doc/5</span><br><span class="line">{</span><br><span class="line">  "title": "elk rocks"</span><br><span class="line">}</span><br><span class="line">PUT s2/doc/6</span><br><span class="line">{</span><br><span class="line">  "title": "elasticsearch is rock solid"</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>查询：</strong></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET s2/doc/_search</span><br><span class="line">{</span><br><span class="line">  "suggest": {</span><br><span class="line">    "my_suggest": {</span><br><span class="line">      "text": "luenc",</span><br><span class="line">      "term": {</span><br><span class="line">        "field": "title"</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>返回结果：</strong></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">  "took" : 3,</span><br><span class="line">  "timed_out" : false,</span><br><span class="line">  "_shards" : {</span><br><span class="line">    "total" : 5,</span><br><span class="line">    "successful" : 5,</span><br><span class="line">    "skipped" : 0,</span><br><span class="line">    "failed" : 0</span><br><span class="line">  },</span><br><span class="line">  "hits" : {</span><br><span class="line">    "total" : 0,</span><br><span class="line">    "max_score" : 0.0,</span><br><span class="line">    "hits" : [ ]</span><br><span class="line">  },</span><br><span class="line">  "suggest" : {</span><br><span class="line">    "my_suggest" : [</span><br><span class="line">      {</span><br><span class="line">        "text" : "luenc",</span><br><span class="line">        "offset" : 0,</span><br><span class="line">        "length" : 5,</span><br><span class="line">        "options" : [</span><br><span class="line">          {</span><br><span class="line">            "text" : "lucene",</span><br><span class="line">            "score" : 0.6,</span><br><span class="line">            "freq" : 2</span><br><span class="line">          }</span><br><span class="line">        ]</span><br><span class="line">      }</span><br><span class="line">    ]</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>上例中，在<code>options</code>字段中，建议结果是<code>lucene</code>。我们来看看，在建议器中，都有哪些字段。</p><p><code>text</code>：建议文本，建议文本是必需的选项，可以通过全局（多个建议器中查询相同的内容）或者按照单个建议器的格式来。<br><code>field</code>：从<code>field</code>字段中获取候选建议的字段。这是一个必需的选项，需要全局设置或根据建议设置。<br><code>analyzer</code>：用于分析建议文本的分析器。默认为建议字段的搜索分析器。<br><code>size</code>：个建议文本标记返回的最大条目。<br><code>sort</code>：定义如何根据建议文本术语对建议进行排序。它有两个可能的值。<br><code>score</code>，先按分数排序，然后按文档频率排序，再按术语本身排序。<br><code>frequency</code>，首先按文档频率排序，然后按相似性分数排序，然后按术语本身排序。也可以理解为按照流行度排序。<br><code>suggest_mode</code>：控制建议的模式，有3个模式可选择。</p><ul><li><code>missing</code>，仅为不在索引中的建议文本术语提供建议。这是默认值。</li><li><code>popular</code>，仅建议在比原始建议文本术语更多的文档中出现的建议。也就是说提供比原有输入词频更高的词条</li><li><code>always</code>，根据建议文本中的条款建议任何匹配的建议。说白了就是无论如何都会提供建议。</li></ul><p><code>lowercase_terms</code>：在文本分析之后降低建议文本术语的大小写。<br><code>min_word_length</code>：建议文本术语必须具有的最小长度才能包含在内。默认为4.（旧名称<code>min_word_len</code>已弃用）。<br><code>shard_size</code>：设置从每个单独分片中检索的最大建议数。在减少阶段，仅根据<code>size</code>选项返回前N个建议。默认为该 <code>size</code>选项。将此值设置为高于该值的值<code>size</code>可能非常有用，以便以性能为代价获得更准确的拼写更正文档频率。由于术语在分片之间被划分，因此拼写校正频率的分片级文档可能不准确。增加这些将使这些文档频率更精确。<br><code>max_inspections</code>：用于乘以的因子， <code>shards_size</code>以便在碎片级别上检查更多候选拼写更正。可以以性能为代价提高准确性。默认为5。<br><code>string_distance</code>：用于比较类似建议术语的字符串距离实现。<br><code>internal</code>，默认值基于<code>damerau_levenshtein</code>，但高度优化用于比较索引中术语的字符串距离。<br><code>damerau_levenshtein</code>，基于<code>Damerau-Levenshtein</code>算法的字符串距离算法。<br><code>levenshtein</code>，基于<code>Levenshtein</code>编辑距离算法的字符串距离算法。<br><code>jaro_winkler</code>，基于<code>Jaro-Winkler</code>算法的字符串距离算法。<br><code>ngram</code>，基于字符<code>n-gram</code>的字符串距离算法。</p><p>了解了各字段的大致含义，我们来探讨一下，词条建议器是如何运作的。以便理解如何确定哪些建议将成为第一名。</p><h4 id="选择哪些词条被建议">选择哪些词条被建议</h4><p>词条建议器使用了<code>Lucene</code>的错拼检查器模块，该模块会根据给定词条的<strong>编辑距离</strong>（es使用了叫做Levenstein edit distance的算法，其核心思想就是一个词改动多少字符就可以和另外一个词一致），从索引中返回最大编辑距离不超过某个值的那些词条。比如说为了从<code>mik</code>得到<code>mick</code>，需要加入一个字母（也就是说需要至少要改动一次），所以这两个词的编辑距离就是1。我们可以通过配置一系列的选项，来均衡灵活和性能：</p><ul><li>max_edits：最大编辑距离候选建议可以具有以便被视为建议。只能是介于1和2之间的值。任何其他值都会导致抛出错误的请求错误。默认为2。</li><li>prefix_length：必须匹配的最小前缀字符的数量才是候选建议。默认为1.增加此数字可提高拼写检查性能。通常拼写错误不会出现在术语的开头。（旧名<code>prefix_len</code>已弃用）。</li><li>min_doc_freq：建议应出现的文档数量的最小阈值。可以指定为绝对数字或文档数量的相对百分比。这可以仅通过建议高频项来提高质量。默认为0f且未启用。如果指定的值大于1，则该数字不能是小数。分片级文档频率用于此选项。</li><li>max_term_freq：建议文本令牌可以存在的文档数量的最大阈值，以便包括在内。可以是表示文档频率的相对百分比数（例如0.4）或绝对数。如果指定的值大于1，则不能指定小数。默认为0.01f。这可用于排除高频术语的拼写检查。高频术语通常拼写正确，这也提高了拼写检查的性能。分片级文档频率用于此选项。</li></ul><p>小结，<code>term suggester</code>首先将输入文本经过分析器（所以，分析结果由于采用的分析器不同而有所不同）分析，处理为单个词条，然后根据单个词条去提供建议，并不会考虑多个词条之间的关系。然后将每个词条的建议结果（有或没有）封装到<code>options</code>列表中。最后由建议器统一返回。</p><h3 id="词组建议器（phrase-suggester）">词组建议器（<code>phrase suggester</code>）</h3><p>词组建议器和词条建议器一样，不过它不再为单个词条提供建议，而是为整个文本提供建议。</p><p><strong>测试数据：创建索引，创建文档。</strong></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">PUT s4</span><br><span class="line">{</span><br><span class="line">  "mappings": {</span><br><span class="line">    "doc": {</span><br><span class="line">      "properties": {</span><br><span class="line">        "title": {</span><br><span class="line">          "type": "text",</span><br><span class="line">          "analyzer": "standard"</span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">PUT s4/doc/1</span><br><span class="line">{</span><br><span class="line">  "title": "Lucene is cool"</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">PUT s4/doc/2</span><br><span class="line">{</span><br><span class="line">  "title": "Elasticsearch builds on top of lucene"</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">PUT s4/doc/3</span><br><span class="line">{</span><br><span class="line">  "title": "Elasticsearch rocks"</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">PUT s4/doc/4</span><br><span class="line">{</span><br><span class="line">  "title": "Elastic is the company behind ELK stack"</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">PUT s4/doc/5</span><br><span class="line">{</span><br><span class="line">  "title": "elk rocks"</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">PUT s4/doc/6</span><br><span class="line">{</span><br><span class="line">  "title": "elasticsearch is rock solid"</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>查询</strong></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET s4/doc/_search</span><br><span class="line">{</span><br><span class="line">  "suggest": {</span><br><span class="line">    "my_s4": {</span><br><span class="line">      "text": "lucne and elasticsear rock",</span><br><span class="line">      "phrase": {</span><br><span class="line">        "field": "title"</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><code>text</code>是输入带有拼错的文本。而建议类型则换成了<code>phrase</code>。来看查询结果：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">  "took" : 6,</span><br><span class="line">  "timed_out" : false,</span><br><span class="line">  "_shards" : {</span><br><span class="line">    "total" : 5,</span><br><span class="line">    "successful" : 5,</span><br><span class="line">    "skipped" : 0,</span><br><span class="line">    "failed" : 0</span><br><span class="line">  },</span><br><span class="line">  "hits" : {</span><br><span class="line">    "total" : 0,</span><br><span class="line">    "max_score" : 0.0,</span><br><span class="line">    "hits" : [ ]</span><br><span class="line">  },</span><br><span class="line">  "suggest" : {</span><br><span class="line">    "my_s4" : [</span><br><span class="line">      {</span><br><span class="line">        "text" : "lucne and elasticsear rock",</span><br><span class="line">        "offset" : 0,</span><br><span class="line">        "length" : 26,</span><br><span class="line">        "options" : [</span><br><span class="line">          {</span><br><span class="line">            "text" : "lucne and elasticsearch rocks",</span><br><span class="line">            "score" : 0.12709484</span><br><span class="line">          },</span><br><span class="line">          {</span><br><span class="line">            "text" : "lucne and elasticsearch rock",</span><br><span class="line">            "score" : 0.10422645</span><br><span class="line">          },</span><br><span class="line">          {</span><br><span class="line">            "text" : "lucne and elasticsear rocks",</span><br><span class="line">            "score" : 0.10036137</span><br><span class="line">          }</span><br><span class="line">        ]</span><br><span class="line">      }</span><br><span class="line">    ]</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>可以看到<code>options</code>直接返回了相关短语列表。虽然<code>lucene</code>建议的并不好。但<code>elasticserch</code>和<code>rock</code>很不错。除此之外，我们还可以使用高亮来向用户展示哪些原有的词条被纠正了。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">GET s4/doc/_search</span><br><span class="line">{</span><br><span class="line">  "suggest": {</span><br><span class="line">    "my_s4": {</span><br><span class="line">      "text": "lucne and elasticsear rock",</span><br><span class="line">      "phrase": {</span><br><span class="line">        "field": "title",</span><br><span class="line">        "highlight":{</span><br><span class="line">          "pre_tag":"&lt;em&gt;",</span><br><span class="line">          "post_tag":"&lt;/em&gt;"</span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>除了默认的，还可以自定义高亮显示：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">GET s4/doc/_search</span><br><span class="line">{</span><br><span class="line">  "suggest": {</span><br><span class="line">    "my_s4": {</span><br><span class="line">      "text": "lucne and elasticsear rock",</span><br><span class="line">      "phrase": {</span><br><span class="line">        "field": "title",</span><br><span class="line">        "highlight":{</span><br><span class="line">          "pre_tag":"&lt;b id='d1' class='t1' style='color:red;font-size:18px;'&gt;",</span><br><span class="line">          "post_tag":"&lt;/b&gt;"</span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>需要注意的是，建议器结果的高亮显示和查询结果高亮显示有些许区别，比如说，这里的自定义标签是<code>pre_tag</code>和<code>post_tag</code>而不是之前如这样的：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">GET s4/doc/_search</span><br><span class="line">{</span><br><span class="line">  "query": {</span><br><span class="line">    "match": {</span><br><span class="line">      "title": "rock"</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  "highlight": {</span><br><span class="line">    "pre_tags": "&lt;b style='color:red'&gt;",</span><br><span class="line">    "post_tags": "&lt;/b&gt;",</span><br><span class="line">    "fields": {</span><br><span class="line">      "title": {}</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><code>phrase suggester</code>在<code>term suggester</code>的基础上，会考虑多个<code>term</code>之间的关系，比如是否同时出现索引的原文中，临近程度，词频等。</p><h3 id="完成建议器（completion-suggester）">完成建议器（<code>completion suggester</code>）</h3><h4 id="前言">前言</h4><p>我们来看一下自动完成的建议器——是一个导航功能，提供自动完成、搜索功能，可以在用户输入时引导用户查看相关结果，从而提高搜索精度。<br>但并不适用于拼接检查或者像<code>term</code>和<code>phrase</code>建议那样的功能。<br>如果说在2000年左右，自动完成还是很炫酷的功能，那么现在它是必备的了——任何没有自动完成功能的搜索引擎都是很古老的。用户期望一个良好的自动完成来帮助用户实现更快的（特别是移动端）以及更好的（比如输入<code>e</code>，搜索引擎就应该知道用户想要查找的是<code>elasticsearch</code>）搜索。<br>一个优秀的自动完成将降低搜索引擎的负载，特别是在用户有一些快速搜索可用时，也就是直接跳转到主流的搜索结果而无须执行完整的搜索。<br>除此之外，一个优秀的自动完成必须是和快速的、相关的：</p><ul><li>快速是因为它必须在用户不断输入的时候产生建议。</li><li>相关则是用户并不希望建议一个没有搜索结果或者没有用处的结果。<br>那我们依靠之前学过的<code>match_phrase_prefix</code>最左前缀查询来完成该功能，但是这样的查询可能不够快，因为理想的情况下，搜索引擎需要在用户输入下一个字符前返回建议结果。<br>完成建议器和后面的上下文建议器可以帮助用户构建更快的自动完成，它们是基于<code>Lucene</code>的<code>suggest</code>建议模块而构建的，将数据保存在内存中的有限状态转移机中（FST）。FST实际上是一种图。它可以将词条以压缩和易于检索的方式来存储。<br><img src="/img/loading.gif" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200508152415865.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5OTEwMw==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"><br>上图展示了词条<code>index</code>、<code>search</code>、<code>suggest</code>是如何存储的。当然实际中的实现更加复杂，比如它允许我们添加权重。<br>FST（Finite StateTransducers），通常中文译作有限状态传感器，FST目前在语音识别和自然语言搜索、处理等方向被广泛应用。<br>FST的功能更类似于字典，Lucene4.0在查找Term时使用了FST算法，用来快速定位Term的位置。FST的数据结构可以理解成（<code>key:value</code>）的形式。<br>在同义词过滤器（SynonymFilter）的实现中甚至可以用<code>HashMap</code>代替，不过相比较于<code>HashMap</code>，它的优点是：<ul><li>以O(1)的时间复杂度找到key对应的value。</li><li>以字节的方式来存储所有的Term，重复利用Term Index的前缀和后缀，使Term - Index小到可以放进内存，减少存储空间，不过相对的也会占用更多的cpu资源。</li><li>FST还可以用来快速确定term是否在系统中。</li></ul></li></ul><p><strong>测试数据：创建索引，创建文档。</strong><br>为了告诉elasticsearch我们准备将建议存储在自动完成的FST中，需要在映射中定义一个字段并将其type类型设置为completion：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">PUT s5</span><br><span class="line">{</span><br><span class="line">  "mappings":{</span><br><span class="line">    "doc":{</span><br><span class="line">      "properties": {</span><br><span class="line">        "title": {</span><br><span class="line">          "type": "completion",</span><br><span class="line">          "analyzer": "standard"</span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">PUT s5/doc/1</span><br><span class="line">{</span><br><span class="line">  "title":"Lucene is cool"</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">PUT s5/doc/2</span><br><span class="line">{</span><br><span class="line">  "title":"Elasticsearch builds on top of lucene"</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">PUT s5/doc/3</span><br><span class="line">{</span><br><span class="line">  "title":"Elasticsearch rocks"</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">PUT s5/doc/4</span><br><span class="line">{</span><br><span class="line">  "title":"Elastic is the company behind ELK stack"</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">PUT s5/doc/5</span><br><span class="line">{</span><br><span class="line">  "title":"the elk stack rocks"</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">PUT s5/doc/6</span><br><span class="line">{</span><br><span class="line">  "title":"elasticsearch is rock solid"</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">GET s5/doc/_search</span><br><span class="line">{</span><br><span class="line">  "suggest": {</span><br><span class="line">    "my_s5": {</span><br><span class="line">      "text": "elas",</span><br><span class="line">      "completion": {</span><br><span class="line">        "field": "title"</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>建议结果不展示了！<br>上例的特殊映射中，支持以下参数：</p><ul><li>analyzer，要使用的索引分析器，默认为simple。</li><li>search_analyzer，要使用的搜索分析器，默认值为analyzer。</li><li>preserve_separators，保留分隔符，默认为true。 如果您禁用，您可以找到以Foo Fighters开头的字段，如果您建议使用foof。</li><li>preserve_position_increments，启用位置增量，默认为true。如果禁用并使用停用词分析器The Beatles，如果您建议，可以从一个字段开始b。注意：您还可以通过索引两个输入来实现此目的，Beatles并且 The Beatles，如果您能够丰富数据，则无需更改简单的分析器。</li><li>max_input_length，限制单个输入的长度，默认为50UTF-16代码点。此限制仅在索引时使用，以减少每个输入字符串的字符总数，以防止大量输入膨胀基础数据结构。大多数用例不受默认值的影响，因为前缀完成很少超过前缀长于少数几个字符。<br>除此之外，该建议映射还可以定义在已存在索引字段的多字段：</li></ul><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">PUT s6</span><br><span class="line">{</span><br><span class="line">  "mappings": {</span><br><span class="line">    "doc": {</span><br><span class="line">      "properties": {</span><br><span class="line">        "name": {</span><br><span class="line">          "type": "text",</span><br><span class="line">          "fields": {</span><br><span class="line">            "suggest": {</span><br><span class="line">              "type": "completion"</span><br><span class="line">            }</span><br><span class="line">          }</span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">PUT s6/doc/1</span><br><span class="line">{</span><br><span class="line">  "name":"KFC"</span><br><span class="line">}</span><br><span class="line">PUT s6/doc/2</span><br><span class="line">{</span><br><span class="line">  "name":"kfc"</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">GET s6/doc/_search</span><br><span class="line">{</span><br><span class="line">  "suggest": {</span><br><span class="line">    "my_s6": {</span><br><span class="line">      "text": "K",</span><br><span class="line">      "completion": {</span><br><span class="line">        "field": "name.suggest"</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>如上示例中，我们需要索引餐厅这样的地点，而且每个地点的<code>name</code>名称字段添加<code>suggest</code>子字段。<br>上例的查询将肯德基（KFC）和开封菜（kfc）都返回。</p><h4 id="在索引阶段提升相关性">在索引阶段提升相关性</h4><p>在进行普通的索引时，输入的文本在索引和搜索阶段都会被分析，这就是为什么上面的示例会将<code>KFC</code>和<code>kfc</code>都返回了。我们也可以通过<code>analyzer</code>和<code>search_analyzer</code>选项来进一步控制分析过程。如上例我们可以只匹配<code>KFC</code>而不匹配<code>kfc</code>：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">PUT s7</span><br><span class="line">{</span><br><span class="line">  "mappings": {</span><br><span class="line">    "doc": {</span><br><span class="line">      "properties": {</span><br><span class="line">        "name": {</span><br><span class="line">          "type": "text",</span><br><span class="line">          "fields": {</span><br><span class="line">            "suggest": {</span><br><span class="line">              "type": "completion",</span><br><span class="line">              "analyzer":"keyword",</span><br><span class="line">              "search_analyzer":"keyword"</span><br><span class="line">            }</span><br><span class="line">          }</span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">PUT s7/doc/1</span><br><span class="line">{</span><br><span class="line">  "name":"KFC"</span><br><span class="line">}</span><br><span class="line">PUT s7/doc/2</span><br><span class="line">{</span><br><span class="line">  "name":"kfc"</span><br><span class="line">}</span><br><span class="line">GET s7/doc/_search</span><br><span class="line">{</span><br><span class="line">  "suggest": {</span><br><span class="line">    "my_s7": {</span><br><span class="line">      "text": "K",</span><br><span class="line">      "completion": {</span><br><span class="line">        "field": "name.suggest"</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>建议结果如下：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">  "took" : 0,</span><br><span class="line">  "timed_out" : false,</span><br><span class="line">  "_shards" : {</span><br><span class="line">    "total" : 5,</span><br><span class="line">    "successful" : 5,</span><br><span class="line">    "skipped" : 0,</span><br><span class="line">    "failed" : 0</span><br><span class="line">  },</span><br><span class="line">  "hits" : {</span><br><span class="line">    "total" : 0,</span><br><span class="line">    "max_score" : 0.0,</span><br><span class="line">    "hits" : [ ]</span><br><span class="line">  },</span><br><span class="line">  "suggest" : {</span><br><span class="line">    "my_s7" : [</span><br><span class="line">      {</span><br><span class="line">        "text" : "K",</span><br><span class="line">        "offset" : 0,</span><br><span class="line">        "length" : 1,</span><br><span class="line">        "options" : [</span><br><span class="line">          {</span><br><span class="line">            "text" : "KFC",</span><br><span class="line">            "_index" : "s7",</span><br><span class="line">            "_type" : "doc",</span><br><span class="line">            "_id" : "1",</span><br><span class="line">            "_score" : 1.0,</span><br><span class="line">            "_source" : {</span><br><span class="line">              "name" : "KFC"</span><br><span class="line">            }</span><br><span class="line">          }</span><br><span class="line">        ]</span><br><span class="line">      }</span><br><span class="line">    ]</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>上述的建议结果中，只有<code>KFC</code>被返回。更多的细节控制可以搭配不同的分析器来完成。<br>多数的情况下，我们将在单独的字段中、单独的索引中甚至是单独的集群中保存建议。这对于主搜索引擎的性能提升和扩展建议器都是非常有利的。</p><p>除此之外，还可以使用<code>input</code>和可选的<code>weight</code>属性，<code>input</code>是建议查询匹配的预期文本，<code>weight</code>是建议评分方式（也就是权重）。例如：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">PUT s8</span><br><span class="line">{</span><br><span class="line">  "mappings": {</span><br><span class="line">    "doc":{</span><br><span class="line">      "properties":{</span><br><span class="line">        "title":{</span><br><span class="line">          "type": "completion"</span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>添加数据的几种形式：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">PUT s8/doc/1</span><br><span class="line">{</span><br><span class="line">  "title":{</span><br><span class="line">    "input":"blow",</span><br><span class="line">    "weight": 2</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line">PUT s8/doc/2</span><br><span class="line">{</span><br><span class="line">  "title":{</span><br><span class="line">    "input":"block",</span><br><span class="line">    "weight": 3</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>上例分别添加两个建议并设置各自的权重值。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">PUT s8/doc/3</span><br><span class="line">{</span><br><span class="line">  "title": [  </span><br><span class="line">    {</span><br><span class="line">      "input":"appel",</span><br><span class="line">      "weight": 2</span><br><span class="line">    },</span><br><span class="line">    {</span><br><span class="line">      "input":"apple",</span><br><span class="line">      "weight": 3</span><br><span class="line">    }</span><br><span class="line">  ]</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>上例以列表的形式添加建议，设置不同的权重。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">PUT s8/doc/4</span><br><span class="line">{</span><br><span class="line">  "title": ["apple", "appel", "block", "blow"],</span><br><span class="line">  "weght": 32</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>上例是为多个建议设置相同的权重。<br>查询的结果由权重决定：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET s8/doc/_search</span><br><span class="line">{</span><br><span class="line">  "suggest": {</span><br><span class="line">    "my_s8": {</span><br><span class="line">      "text": "app",</span><br><span class="line">      "completion": {</span><br><span class="line">        "field": "title"</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>比如，我们在设置建议的时候，将<code>apple</code>建议的权重<code>weight</code>设置的更高，那么在如上例的查询中，<code>apple</code>将会排在建议的首位。</p><h4 id="在搜索阶段提升相关性">在搜索阶段提升相关性</h4><p>当在运行建议的请求时，可以决定出现哪些建议，就像其他建议器一样，<code>size</code>参数控制返回多少项建议（默认为5项）；还可以通过<code>fuzzy</code>参数设置模糊建议，以对拼写进行容错。当开启模糊建议之后，可以设置下列参数来完成建议：</p><ul><li>fuzziness，可以指定所允许的最大编辑距离。</li><li>min_length，指定什么长度的输入文本可以开启模糊查询。</li><li>prefix_length，假设若干开始的字符是正确的（比如block，如果输入blaw，该字段也认为之前输入的是对的），这样可以通过牺牲灵活性提升性能。<br>这些参数都是在建议的<code>completion</code>对象的下面：</li></ul><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">GET s8/doc/_search</span><br><span class="line">{</span><br><span class="line">  "suggest": {</span><br><span class="line">    "my_s9": {</span><br><span class="line">      "text": "blaw",</span><br><span class="line">      "completion": {</span><br><span class="line">        "field": "title",</span><br><span class="line">        "size": 2,</span><br><span class="line">        "fuzzy": {</span><br><span class="line">          "fuzziness": 2,</span><br><span class="line">          "min_length": 3,</span><br><span class="line">          "prefix_length": 2</span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>结果如下：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">  "took" : 0,</span><br><span class="line">  "timed_out" : false,</span><br><span class="line">  "_shards" : {</span><br><span class="line">    "total" : 5,</span><br><span class="line">    "successful" : 5,</span><br><span class="line">    "skipped" : 0,</span><br><span class="line">    "failed" : 0</span><br><span class="line">  },</span><br><span class="line">  "hits" : {</span><br><span class="line">    "total" : 0,</span><br><span class="line">    "max_score" : 0.0,</span><br><span class="line">    "hits" : [ ]</span><br><span class="line">  },</span><br><span class="line">  "suggest" : {</span><br><span class="line">    "my_s9" : [</span><br><span class="line">      {</span><br><span class="line">        "text" : "blow",</span><br><span class="line">        "offset" : 0,</span><br><span class="line">        "length" : 4,</span><br><span class="line">        "options" : [</span><br><span class="line">          {</span><br><span class="line">            "text" : "block",</span><br><span class="line">            "_index" : "s8",</span><br><span class="line">            "_type" : "doc",</span><br><span class="line">            "_id" : "3",</span><br><span class="line">            "_score" : 6.0,</span><br><span class="line">            "_source" : {</span><br><span class="line">              "title" : {</span><br><span class="line">                "input" : "block",</span><br><span class="line">                "weight" : 3</span><br><span class="line">              }</span><br><span class="line">            }</span><br><span class="line">          },</span><br><span class="line">          {</span><br><span class="line">            "text" : "blow",</span><br><span class="line">            "_index" : "s8",</span><br><span class="line">            "_type" : "doc",</span><br><span class="line">            "_id" : "2",</span><br><span class="line">            "_score" : 4.0,</span><br><span class="line">            "_source" : {</span><br><span class="line">              "title" : {</span><br><span class="line">                "input" : "blow",</span><br><span class="line">                "weight" : 2</span><br><span class="line">              }</span><br><span class="line">            }</span><br><span class="line">          }</span><br><span class="line">        ]</span><br><span class="line">      }</span><br><span class="line">    ]</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="其他">其他</h4><p><code>_source</code><br>为了减少不必要的响应，我们可以对建议结果做一些过滤，比如加上<code>_source</code>：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">GET s8/doc/_search</span><br><span class="line">{</span><br><span class="line">  "suggest": {</span><br><span class="line">    "completion_suggest": {</span><br><span class="line">      "text": "appl",</span><br><span class="line">      "completion": {</span><br><span class="line">        "field": "title"</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  "_source": "title"</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>好吧，虽然我们只有一个字段！</p><p><code>size</code><br>除了<code>_source</code>，我们还可以指定<code>size</code>参数：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">GET s8/doc/_search</span><br><span class="line">{</span><br><span class="line">  "suggest": {</span><br><span class="line">    "completion_suggest": {</span><br><span class="line">      "prefix": "app",</span><br><span class="line">      "completion": {</span><br><span class="line">        "field": "title",</span><br><span class="line">        "size": 1</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  "_source": "title"</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><code>size</code>参数指定返回建议数（默认为5），需要注意的是，<code>size must be positive</code>，也就是说<code>size</code>参数必须是积极的——非0非负数！</p><p><strong>skip_duplicates</strong><br>我们的建议可能是来自不同的文档，这其中就会有一些重复建议项，我们可以通过设置<code>skip_duplicates:true</code>来修改此行为，如果为<code>true</code>则会过滤掉结果中的重复建议文档：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">GET s8/doc/_search</span><br><span class="line">{</span><br><span class="line">  "suggest": {</span><br><span class="line">    "completion_suggest": {</span><br><span class="line">      "prefix": "app",</span><br><span class="line">      "completion": {</span><br><span class="line">        "field": "title",</span><br><span class="line">        "size": 5,</span><br><span class="line">        "skip_duplicates":true</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  "_source": "title"</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>但需要注意的是，该参数设置为<code>true</code>的话，可能会降低搜索速度，因为需要访问更多的建议结果项，才能过滤出来前N个。<br>最后，完成建议器还支持正则表达式查询，这意味着我们可以将前缀表示为正则表达式：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET s5/doc/_search</span><br><span class="line">{</span><br><span class="line">  "suggest": {</span><br><span class="line">    "completion_suggest": {</span><br><span class="line">      "regex": "e[l|e]a",</span><br><span class="line">      "completion": {</span><br><span class="line">        "field": "title"</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是建议器&quot;&gt;什么是建议器&lt;/h2&gt;
&lt;p&gt;目前为止，浏览器都已经具备&lt;code&gt;Suggest as you type&lt;/code&gt;功能，即在我们输入搜索的过程中，进行自动的补全或者纠错功能，协助用户输入更精确的关键词，提高搜索阶段的文档匹配程度。例如我们在百
      
    
    </summary>
    
    
      <category term="ElasticSearch" scheme="http://nanpy.top/categories/ElasticSearch/"/>
    
    
      <category term="ElasticSearch" scheme="http://nanpy.top/tags/ElasticSearch/"/>
    
  </entry>
  
  <entry>
    <title>分页器封装</title>
    <link href="http://nanpy.top/posts/5dd0a337.html"/>
    <id>http://nanpy.top/posts/5dd0a337.html</id>
    <published>2020-05-05T09:36:00.000Z</published>
    <updated>2020-05-06T10:19:34.040Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line">__author__ = <span class="string">'LiuNan'</span></span><br><span class="line">__date__ = <span class="string">'2020/5/5 17:12'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.utils.safestring <span class="keyword">import</span> mark_safe</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 分页器</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pagination</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, request, all_count, per_num=<span class="number">20</span>, max_show=<span class="number">11</span>)</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :param request:跳转需要</span></span><br><span class="line"><span class="string">        :param all_count:数据的总条数</span></span><br><span class="line"><span class="string">        :param per_num:每一个展示多少条</span></span><br><span class="line"><span class="string">        :param max_show:显示的分页按钮个数</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        <span class="comment"># 基本的URL</span></span><br><span class="line">        self.base_url = request.path_info</span><br><span class="line">        <span class="comment"># 当前页码</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.current_page = int(request.GET.get(<span class="string">'page'</span>, <span class="number">1</span>))</span><br><span class="line">            <span class="keyword">if</span> self.current_page &lt;= <span class="number">0</span>:</span><br><span class="line">                self.current_page = <span class="number">1</span></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            self.current_page = <span class="number">1</span></span><br><span class="line">        <span class="comment"># 最多显示的页码数</span></span><br><span class="line">        self.max_show = max_show</span><br><span class="line">        half_show = max_show // <span class="number">2</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 每页显示的数据条数</span></span><br><span class="line">        self.per_num = per_num</span><br><span class="line">        <span class="comment"># 总数据量</span></span><br><span class="line">        self.all_count = all_count</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 总页码数  divmod求商余，下面的total_num是商，more是余数</span></span><br><span class="line">        self.total_num, more = divmod(all_count, per_num)</span><br><span class="line">        <span class="keyword">if</span> more:</span><br><span class="line">            self.total_num += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 总页码数小于最大显示数：显示总页码数</span></span><br><span class="line">        <span class="keyword">if</span> self.total_num &lt;= max_show:</span><br><span class="line">            self.page_start = <span class="number">1</span></span><br><span class="line">            self.page_end = self.total_num</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 总页码数大于最大显示数：最多显示11个</span></span><br><span class="line">            <span class="keyword">if</span> self.current_page &lt;= half_show:</span><br><span class="line">                self.page_start = <span class="number">1</span></span><br><span class="line">                self.page_end = max_show</span><br><span class="line">            <span class="keyword">elif</span> self.current_page + half_show &gt;= self.total_num:</span><br><span class="line">                self.page_end = self.total_num</span><br><span class="line">                self.page_start = self.total_num - max_show + <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                self.page_start = self.current_page - half_show</span><br><span class="line">                self.page_end = self.current_page + half_show</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        :return: 数据的开始索引</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        <span class="keyword">return</span> (self.current_page - <span class="number">1</span>) * self.per_num</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">end</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        :return: 数据的结束索引</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        <span class="keyword">return</span> self.current_page * self.per_num</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show_li</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 存放li标签的列表</span></span><br><span class="line">        html_list = []</span><br><span class="line"></span><br><span class="line">        first_li = <span class="string">'&lt;li&gt;&lt;a href="{}?page=1"&gt;首页&lt;/a&gt;&lt;/li&gt;'</span>.format(self.base_url)  <span class="comment"># get请求</span></span><br><span class="line">        html_list.append(first_li)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.current_page == <span class="number">1</span>:</span><br><span class="line">            prev_li = <span class="string">'&lt;li class="disabled"&gt;&lt;a&gt;上一页&lt;/a&gt;&lt;/li&gt;'</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            prev_li = <span class="string">'&lt;li&gt;&lt;a href="{1}?page={0}"&gt;上一页&lt;/a&gt;&lt;/li&gt;'</span>.format(self.current_page - <span class="number">1</span>, self.base_url)</span><br><span class="line">        html_list.append(prev_li)</span><br><span class="line">        <span class="keyword">for</span> num <span class="keyword">in</span> range(self.page_start, self.page_end + <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> self.current_page == num:</span><br><span class="line">                li_html = <span class="string">'&lt;li class="active"&gt;&lt;a href="{1}?page={0}"&gt;{0}&lt;/a&gt;&lt;/li&gt;'</span>.format(num, self.base_url)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                li_html = <span class="string">'&lt;li&gt;&lt;a href="{1}?page={0}"&gt;{0}&lt;/a&gt;&lt;/li&gt;'</span>.format(num, self.base_url)</span><br><span class="line">            html_list.append(li_html)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.current_page == self.total_num:</span><br><span class="line">            next_li = <span class="string">'&lt;li class="disabled"&gt;&lt;a&gt;下一页&lt;/a&gt;&lt;/li&gt;'</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            next_li = <span class="string">'&lt;li&gt;&lt;a href="{1}?page={0}"&gt;下一页&lt;/a&gt;&lt;/li&gt;'</span>.format(self.current_page + <span class="number">1</span>, self.base_url)</span><br><span class="line">        html_list.append(next_li)</span><br><span class="line"></span><br><span class="line">        last_li = <span class="string">'&lt;li&gt;&lt;a href="{1}?page={0}&gt;尾页&lt;/a&gt;&lt;/li&gt;'</span>.format(self.total_num, self.base_url)</span><br><span class="line">        html_list.append(last_li)</span><br><span class="line">        <span class="keyword">return</span> mark_safe(<span class="string">''</span>.join(html_list))</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;sp
      
    
    </summary>
    
    
      <category term="python" scheme="http://nanpy.top/categories/python/"/>
    
    
      <category term="python" scheme="http://nanpy.top/tags/python/"/>
    
  </entry>
  
</feed>
